//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CTIEntities : DbContext
    {
        public CTIEntities()
            : base("name=CTIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<ActivityLog> ActivityLog { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Assessment> Assessment { get; set; }
        public virtual DbSet<CIPCode2010> CIPCode2010 { get; set; }
        public virtual DbSet<Codes_AgentService> Codes_AgentService { get; set; }
        public virtual DbSet<Codes_Countries> Codes_Countries { get; set; }
        public virtual DbSet<Codes_CredentialAgentRelationship> Codes_CredentialAgentRelationship { get; set; }
        public virtual DbSet<Codes_Currency> Codes_Currency { get; set; }
        public virtual DbSet<Codes_EntityType> Codes_EntityType { get; set; }
        public virtual DbSet<Codes_PropertyCategory> Codes_PropertyCategory { get; set; }
        public virtual DbSet<Codes_PropertyValue> Codes_PropertyValue { get; set; }
        public virtual DbSet<Codes_Status> Codes_Status { get; set; }
        public virtual DbSet<Credential> Credential { get; set; }
        public virtual DbSet<Credential_ConnectionProfile> Credential_ConnectionProfile { get; set; }
        public virtual DbSet<Entity> Entity { get; set; }
        public virtual DbSet<Entity_AgentRelationship> Entity_AgentRelationship { get; set; }
        public virtual DbSet<Entity_Assessment> Entity_Assessment { get; set; }
        public virtual DbSet<Entity_Competency> Entity_Competency { get; set; }
        public virtual DbSet<Entity_CostProfile> Entity_CostProfile { get; set; }
        public virtual DbSet<Entity_CostProfileItem> Entity_CostProfileItem { get; set; }
        public virtual DbSet<Entity_Credential> Entity_Credential { get; set; }
        public virtual DbSet<Entity_DurationProfile> Entity_DurationProfile { get; set; }
        public virtual DbSet<Entity_FrameworkItem> Entity_FrameworkItem { get; set; }
        public virtual DbSet<Entity_LearningOpportunity> Entity_LearningOpportunity { get; set; }
        public virtual DbSet<Entity_Property> Entity_Property { get; set; }
        public virtual DbSet<Entity_PropertyOther> Entity_PropertyOther { get; set; }
        public virtual DbSet<Entity_QA_Action> Entity_QA_Action { get; set; }
        public virtual DbSet<Entity_Reference> Entity_Reference { get; set; }
        public virtual DbSet<Entity_RevocationProfile> Entity_RevocationProfile { get; set; }
        public virtual DbSet<Entity_TaskProfile> Entity_TaskProfile { get; set; }
        public virtual DbSet<Entity_VerificationProfile> Entity_VerificationProfile { get; set; }
        public virtual DbSet<GeoCoordinate> GeoCoordinate { get; set; }
        public virtual DbSet<JurisdictionProfile> JurisdictionProfile { get; set; }
        public virtual DbSet<LearningOpportunity> LearningOpportunity { get; set; }
        public virtual DbSet<NAICS> NAICS { get; set; }
        public virtual DbSet<ONET_SOC> ONET_SOC { get; set; }
        public virtual DbSet<ONET_SOC_JobFamily> ONET_SOC_JobFamily { get; set; }
        public virtual DbSet<Organization> Organization { get; set; }
        public virtual DbSet<Organization_Address> Organization_Address { get; set; }
        public virtual DbSet<Organization_Member> Organization_Member { get; set; }
        public virtual DbSet<Organization_PropertyOther> Organization_PropertyOther { get; set; }
        public virtual DbSet<Organization_Service> Organization_Service { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<AspNetUser_Import> AspNetUser_Import { get; set; }
        public virtual DbSet<Entity_Address> Entity_Address { get; set; }
    
        public virtual int OrganizationSearch(string filter, string sortOrder, Nullable<int> startPageIndex, Nullable<int> pageSize, Nullable<int> currentUserId, ObjectParameter totalRows)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var startPageIndexParameter = startPageIndex.HasValue ?
                new ObjectParameter("StartPageIndex", startPageIndex) :
                new ObjectParameter("StartPageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrganizationSearch", filterParameter, sortOrderParameter, startPageIndexParameter, pageSizeParameter, currentUserIdParameter, totalRows);
        }
    
        public virtual int Credential_Search(string filter, string sortOrder, Nullable<int> startPageIndex, Nullable<int> pageSize, Nullable<int> currentUserId, ObjectParameter totalRows)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var startPageIndexParameter = startPageIndex.HasValue ?
                new ObjectParameter("StartPageIndex", startPageIndex) :
                new ObjectParameter("StartPageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Credential_Search", filterParameter, sortOrderParameter, startPageIndexParameter, pageSizeParameter, currentUserIdParameter, totalRows);
        }
    }
}
