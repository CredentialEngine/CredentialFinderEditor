@using Models.Common;
@using Models.ProfileModels;
@model Models.Common.BaseObject
@{
    ViewBag.Title = "Details";

    var canEditDocument = AccountServices.IsUserSiteStaff();
    if ( Model.Id == 0 ) {
        canEditDocument = false;
    } else if ( Model.CanEditRecord ) {
        canEditDocument = true;
    }
    var metadataRegistryUrl = ServiceHelper.GetAppKeyValue("credentialRegistryGet");//.Replace("{0}","");

    var enumServices = new EnumerationServices();
    var googleMapsKey = new ThirdPartyApiServices().GetGoogleMapsApiKey();
    var data = ( dynamic ) Model;
    var typeCode = Model.GetType().Name.ToLower();
    var dataType = DataTypes.ENTITY;
    var dataCredential = new Credential();
    var dataOrganization = new Organization();
    var dataAssessment = new AssessmentProfile();
    var dataLearningOpportunity = new LearningOpportunityProfile();
    var roleCodes = new Enumeration();
    var credentialRegistryId = "";
    var jsonData = new Dictionary<string, object>();
    var costTypeCodes = enumServices.GetEnumeration( "costType", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items;
    var currencyCodes = enumServices.GetCurrencies( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items;
    var ownerOrganization = new Organization();
    var ownerOrganizationQARoles = new List<OrganizationRoleProfile>();

    var title = "Entity";
    switch ( typeCode )
    {
        case "credential":
            {
                title = "Credential";
                dataType = DataTypes.CREDENTIAL;
                dataCredential = ( Credential ) data;
                credentialRegistryId = dataCredential.CredentialRegistryId ?? "";
                roleCodes = new EnumerationServices().GetCredentialAllAgentRoles( EnumerationType.CUSTOM );
                jsonData = new JsonLDServices().GetProfileV2( dataCredential, new Models.JsonV2.Credential(), roleCodes.Items );
                //Fix embedded credentials
                var replacements = new List<Credential>();
                foreach ( var credential in dataCredential.EmbeddedCredentials )
                {
                    var replacement = CredentialServices.GetBasicCredential( credential.Id );
                    replacement.CredentialType.SchemaName = ( replacement.CredentialType.Items.FirstOrDefault() ?? new EnumeratedItem() ).SchemaName ?? "credential";
                    replacements.Add( replacement );
                }
                dataCredential.EmbeddedCredentials = replacements;
                //Fix tasks
                //FixTasks( dataCredential.Requires.SelectMany( m => m.TargetTask ).ToList() );
                //FixTasks( dataCredential.Recommends.SelectMany( m => m.TargetTask ).ToList() );
                //FixTasks( dataCredential.IsRequiredFor.SelectMany( m => m.TargetTask ).ToList() );
                //FixTasks( dataCredential.IsRecommendedFor.SelectMany( m => m.TargetTask ).ToList() );
                //FixTasks( dataCredential.Renewal.SelectMany( m => m.TargetTask ).ToList() );
                //Fix costs
                FixCosts( dataCredential.EstimatedCosts, costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.Requires.SelectMany( m => m.TargetAssessment ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.Requires.SelectMany( m => m.TargetLearningOpportunity ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.Requires.SelectMany( m => m.TargetTask ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.Recommends.SelectMany( m => m.TargetAssessment ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.Recommends.SelectMany( m => m.TargetLearningOpportunity ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.Recommends.SelectMany( m => m.TargetTask ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.IsRequiredFor.SelectMany( m => m.TargetAssessment ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.IsRequiredFor.SelectMany( m => m.TargetLearningOpportunity ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.IsRequiredFor.SelectMany( m => m.TargetTask ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.IsRecommendedFor.SelectMany( m => m.TargetAssessment ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.IsRecommendedFor.SelectMany( m => m.TargetLearningOpportunity ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.IsRecommendedFor.SelectMany( m => m.TargetTask ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.Renewal.SelectMany( m => m.TargetAssessment ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.Renewal.SelectMany( m => m.TargetLearningOpportunity ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //FixCosts( dataCredential.Renewal.SelectMany( m => m.TargetTask ).SelectMany( m => m.EstimatedCost ).ToList(), costTypeCodes, currencyCodes );
                //Try to get owner org
                try
                {
                    ownerOrganization = dataCredential.OrganizationRole.FirstOrDefault( m => m.AgentRole.Items.FirstOrDefault( n => n.SchemaName.Contains( "owner" ) || n.SchemaName.Contains( "creat" ) ) != null ).ActingAgent;
                    if ( ownerOrganization.OrganizationRole_Recipient.Count() == 0 )
                    {
                        ownerOrganization = OrganizationServices.GetOrganizationDetail( ownerOrganization.Id );
                    }
                }
                catch { }

                break;
            }
        case "organization":
            {
                title = "Organization";
                dataType = DataTypes.ORGANIZATION;
                dataOrganization = ( Organization ) data;
                credentialRegistryId = dataOrganization.CredentialRegistryId ?? "";
                roleCodes = new EnumerationServices().GetAllAgentReverseRoles( EnumerationType.CUSTOM );
                jsonData = new JsonLDServices().GetProfileV2( dataOrganization, new Models.JsonV2.CredentialOrganization(), roleCodes.Items );
                //Fix created credentials
                var replacements = new List<Credential>();
                foreach ( var credential in dataOrganization.CreatedCredentials )
                {
                    var replacement = CredentialServices.GetBasicCredential( credential.Id );
                    replacement.CredentialType.SchemaName = ( replacement.CredentialType.Items.FirstOrDefault() ?? new EnumeratedItem() ).SchemaName ?? "credential";
                    replacements.Add( replacement );
                }
                dataOrganization.CreatedCredentials = replacements;
                //Fix departments and subsidiaries
                FixMissingOrgInfo( dataOrganization.OrganizationRole_Dept );
                FixMissingOrgInfo( dataOrganization.OrganizationRole_Subsidiary );
                break;
            }
        case "assessmentprofile":
            {
                title = "Assessment";
                typeCode = "assessment";
                dataType = DataTypes.ASSESSMENT;
                dataAssessment = ( AssessmentProfile ) data;
                credentialRegistryId = dataAssessment.CredentialRegistryId ?? "";
                roleCodes = new EnumerationServices().GetAssessmentAgentRoles( EnumerationType.CUSTOM );
                jsonData = new JsonLDServices().GetProfileV2( dataAssessment, new Models.JsonV2.AssessmentProfile(), roleCodes.Items );
                //Fix costs
                //FixCosts( dataAssessment.EstimatedCost, costTypeCodes, currencyCodes );
                //Try to get owner org
                try
                {
                    //ownerOrganization = dataAssessment.OrganizationRole.FirstOrDefault( m => m.AgentRole.Items.FirstOrDefault( n => n.SchemaName.Contains( "owner" ) || n.SchemaName.Contains( "creat" ) ) != null ).ActingAgent;
                    
                    //if ( ownerOrganization.OrganizationRole_Recipient.Count() == 0 )
                    //{
                    //    ownerOrganization = OrganizationServices.GetOrganizationDetail( ownerOrganization.Id );
                    //}
                }
                catch { }

                break;
            }
        case "learningopportunityprofile":
            {
                title = "Learning Opportunity";
                typeCode = "learningopportunity";
                dataType = DataTypes.LEARNINGOPPORTUNITY;
                dataLearningOpportunity = ( LearningOpportunityProfile ) data;
                credentialRegistryId = dataLearningOpportunity.CredentialRegistryId ?? "";
                roleCodes = new EnumerationServices().GetLearningOppAgentRoles( EnumerationType.CUSTOM );
                jsonData = new JsonLDServices().GetProfileV2( dataLearningOpportunity, new Models.JsonV2.LearningOpportunityProfile(), roleCodes.Items );
                //Fix costs
                //FixCosts( dataLearningOpportunity.EstimatedCost, costTypeCodes, currencyCodes );
                //Try to get owner org
                try
                {
                    //ownerOrganization = dataLearningOpportunity.OrganizationRole.FirstOrDefault( m => m.AgentRole.Items.FirstOrDefault( n => n.SchemaName.Contains( "owner" ) || n.SchemaName.Contains("creat") ) != null ).ActingAgent;
                    
                    //if ( ownerOrganization.OrganizationRole.Count() == 0 )
                    //{
                    //    ownerOrganization = OrganizationServices.GetOrganizationDetail( ownerOrganization.Id );
                    //}
                }
                catch { }
                break;
            }
        default: break;
    }
    try
    {
        ownerOrganizationQARoles = ownerOrganization.OrganizationRole.Where( m => m.AgentRole.Items.Where( n => n.IsSpecialValue ).Count() > 0 ).ToList();
    }
    catch { }

}
@functions {
    public enum DataTypes { ENTITY, CREDENTIAL, ORGANIZATION, ASSESSMENT, LEARNINGOPPORTUNITY }
    public enum ConditionProfileTypes { REQUIRES, RECOMMENDS, ADVANCEDSTANDINGFROM, PREPARATIONFROM, ISREQUIREDFOR, ISRECOMMENDEDFOR, ISADVANCEDSTANDINGFOR, ISPREPARATIONFOR, RENEWAL }
    
    public bool HasText( string text )
    {
        return !string.IsNullOrWhiteSpace( text );
    }

    public void FixTasks( List<TaskProfile> tasks )
    {
        foreach ( var task in tasks )
        {
            try
            {
                task.AffiliatedAgent = OrganizationServices.GetLightOrgByRowId( task.AffiliatedAgentUid.ToString() );
            }
            catch { }
        }
    }

    public void FixMissingOrgInfo( List<OrganizationRoleProfile> roles )
    {
        foreach ( var role in roles )
        {
            try
            {
                role.ActingAgent = OrganizationServices.GetLightOrgByRowId( role.ActingAgentUid.ToString() );
            }
            catch { }
        }
    }
    public void FixCosts( List<CostProfile> profiles, List<EnumeratedItem> costTypeCodes, List<EnumeratedItem> currencyCodes )
    {
        foreach ( var profile in profiles )
        {
            try
            {
                profile.Currency = currencyCodes.FirstOrDefault( m => m.CodeId == profile.CurrencyTypeId ).Name;
            }
            catch { }

            foreach ( var item in profile.Items )
            {
                try
                {
                    if ( item.CostType.Items.Count() == 0 )
                    {
                        item.CostType.Items.Add( new EnumeratedItem() { Id = item.CostTypeId, Name = costTypeCodes.FirstOrDefault( m => m.CodeId == item.CostTypeId ).Name } );
                    }
                }
                catch { }
            }
        }
    }

    public void CountLearningOpportunityCompetencies( LearningOpportunityProfile learnOpp, ref int total )
    {
        total += learnOpp.RequiresCompetencies.Count() + learnOpp.TeachesCompetencies.Count() + learnOpp.RequiresCompetenciesFrameworks.SelectMany( m => m.Items ).Count() + learnOpp.TeachesCompetenciesFrameworks.SelectMany( m => m.Items ).Count();
        foreach ( var item in learnOpp.HasPart )
        {
            CountLearningOpportunityCompetencies( item, ref total );
        }
    }

    public void AddLinkToValues( List<TextValueProfile> values, string link, string title )
    {
        if ( !string.IsNullOrWhiteSpace( link ) )
        {
            values.Add( new TextValueProfile() { TextValue = link, ProfileName = title } );
        }
    }
}

@helper Enumerate( string title, string headerTag, Enumeration list, string typeCode ) { 
    try
    {
        var usedIDs = new List<int>();
        if ( list.Items.Count() > 0 )
        {
            <div class="subsection enumeration">
                @ShowTag( title, headerTag )
                @foreach ( var item in list.Items )
                {
                    if ( !usedIDs.Contains( item.Id ) && !item.Name.Contains( "z???" ) )
                    {
                        <a class="linkButton grayButton" target="searchWindow" href="@Url.Content( "~/search?autosearch=true&searchType=" + typeCode + "&filters=" + list.Id + "-" + item.Id )">@item.Name</a>
                        usedIDs.Add( item.Id ); //Prevent duplicates
                    }
                }
            </div>
        }
    }
    catch { }
}
@helper EnumerateGroup( string title, string headerTag, List<Enumeration> lists, string typeCode )
{
    try
    {
        if ( lists.Where( m => m.Items.Count() > 0 ) != null )
        {
            <div class="subsection enumeration">
                @ShowTag( title, headerTag )
                @foreach(var list in lists){
                    var usedIDs = new List<int>();
                    foreach ( var item in list.Items )
                    {
                        if ( !usedIDs.Contains( item.Id ) && !item.Name.Contains( "z???" ) )
                        {
                            <a class="linkButton grayButton" target="searchWindow" href="@Url.Content( "~/search?autosearch=true&searchType=" + typeCode + "&filters=" + list.Id + "-" + item.Id )">@item.Name</a>
                            usedIDs.Add( item.Id ); //Prevent duplicates
                        }
                    }
                }
            </div>
        }
    }
    catch { }
}
@helper EnumerateList( string title, string headerTag, Enumeration list  ) { 
    try
    {
        if ( list.Items.Count() > 0 )
        {
            //Fix items
            //Each item is duplicated
            var newList = new List<string>();
            
            <div class="subsection enumerationList">
                @ShowTag( title, headerTag )
                <ul>
                    @foreach( var item in list.Items )
                    {
                        if ( !newList.Contains( item.Name ) )
                        {
                            <li>@item.Name</li>
                            newList.Add( item.Name );
                        }
                    }
                </ul>
            </div>
        }
    }
    catch { }
}
@helper RenderPreformattedText( string text, string tag, int maxLength = 0 )
{
    try
    {
        var finalText = text.Trim();
        if ( maxLength > 0 && text.Length > maxLength )
        {
            finalText = text.Substring( 0, maxLength ) + "...";
        }
        var paragraphs = finalText.Split( new string[] { "\n" }, StringSplitOptions.RemoveEmptyEntries ).ToList();
        foreach ( var item in paragraphs )
        {
            @ShowTag( item, tag )
        }
    }
    catch { }
}
@helper ShowNamedText( string title, string headerTag, string content, string className, bool isPreformatted )
{
    try
    {
        if ( !string.IsNullOrWhiteSpace( content ) )
        {
            @ShowTag( title, headerTag )
            <div class="namedText @( isPreformatted ? "preformatted" : "" ) @className">
                @if ( isPreformatted )
                {
                    @RenderPreformattedText( content, "p" )
                    @*@Html.Raw( content.Trim().Replace( "\n", "<br /><br />" ) );*@
                }
                else
                {
                    @Html.Raw( content.Trim() )
                }
            </div>
        }
    }
    catch { }
}
@helper ShowTextValues( string title, string headerTag, List<TextValueProfile> items, string className, bool containsLinks, bool showLinksViaName )
{ 
    try
    {
        if ( items.Count() > 0 )
        {
            <div class="textValueItems">
                @ShowTag( title, headerTag )
                <ul class="textValueList">
                    @foreach(var item in items)
                    {
                        var itemName = HasText( item.TextTitle ) ? item.TextTitle :
                            HasText( item.ProfileName ) ? item.ProfileName :
                            HasText( item.CodeTitle ) ? item.CodeTitle :
                            HasText( item.CategoryTitle ) ? item.CategoryTitle :
                            "";
                        var itemContent = HasText( item.TextValue ) ? item.TextValue : HasText( item.Description ) ? item.Description : "";
                        <li class="textValue">
                            @if( containsLinks )
                            {
                                if ( showLinksViaName )
                                {
                                    <a class="linkButton greenButton" href="@itemContent" target="_blank">@( HasText( itemName ) ? itemName : "Reference" ) <i class="fa fa-external-link"></i></a>
                                }
                                else
                                {
                                    if ( HasText( itemName ) )
                                    { <b>@itemName:</b> } <a class="linkButton greenButton" href="@itemContent" target="_blank">@itemContent <i class="fa fa-external-link"></i></a>
                                }
                            }
                            else 
                            {
                                if( HasText( itemName ) ) { <b>@itemName:</b> } @Html.Raw( itemContent )
                            }
                        </li>
                    }
                </ul>
            </div>
        }
    }
    catch { }
}
@helper ShowCompetencyValues( string title, string headerTag, List<CredentialAlignmentObjectProfile> items, string className )
{
    try
    {
        if ( items.Count() > 0 )
        {
            <div class="competencyItems @className">
                @ShowTag( title, headerTag )
                <ul class="competencyList">
                    @foreach ( var item in items )
                    {
                        var itemName = HasText( item.Name ) ? item.Name : HasText( item.TargetName ) ? item.TargetName : HasText(item.TargetUrl) ? item.TargetUrl : "";
                        var itemDescription = HasText( item.Description ) ? item.Description : HasText( item.TargetDescription ) ? item.TargetDescription : "";
                        <li class="competencyItem @( HasText(itemName) ? "hasName" : "noName" ) @( HasText(itemDescription) ? "hasDescription" : "noDescription" ) @( HasText(item.TargetUrl) ? "hasURL" : "noURL" )">
                            @if ( HasText( itemName ) )
                            {
                                <div class="competencyName">@itemName</div>
                            }
                            @if( HasText( itemDescription ) )
                            {
                                <div class="competencyDescription">@Html.Raw( itemDescription )</div>
                            }
                            @*@if( HasText( item.TargetUrl ) )
                            {
                                <a class="competencyUrl" target="_blank" href="@item.TargetUrl">@item.TargetUrl</a>
                            }*@
                        </li>
                    }
                </ul>
            </div>
            
        }
    }
    catch { }
}
@helper ShowCompetencyFrameworkValues( string title, string headerTag, List<CredentialAlignmentObjectFrameworkProfile> frameworks, string className )
{
    try
    {
        if ( frameworks.Count() > 0 )
        {
            <div class="competencyFrameworks @className">
                @ShowTag( title, headerTag )
                @foreach ( var framework in frameworks )
                {
                    <div class="competencyFramework">
                        <div class="competencyFrameworkTitle">@framework.EducationalFrameworkName</div>
                        <div class="competencyItems">
                            <ul class="competencyList">
                                @foreach ( var item in framework.Items )
                                {
                                    var itemName = HasText( item.Name ) ? item.Name : HasText( item.TargetName ) ? item.TargetName : HasText(item.TargetUrl) ? item.TargetUrl : "";
                                    var itemDescription = HasText( item.Description ) ? item.Description : HasText( item.TargetDescription ) ? item.TargetDescription : "";
                                    <li class="competencyItem @( HasText(itemName) ? "hasName" : "noName" ) @( HasText(itemDescription) ? "hasDescription" : "noDescription" ) @( HasText(item.TargetUrl) ? "hasURL" : "noURL" )">
                                        @if ( HasText( itemName ) )
                                        {
                                            <div class="competencyName">@itemName</div>
                                        }
                                        @if( HasText( itemDescription ) )
                                        {
                                            <div class="competencyDescription">@Html.Raw( itemDescription )</div>
                                        }
                                        @*@if( HasText( item.TargetUrl ) )
                                        {
                                            <a class="competencyUrl" target="_blank" href="@item.TargetUrl">@item.TargetUrl</a>
                                        }*@
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        }
    }
    catch { }
}
@helper Jurisdiction( string title, string headerTag, List<JurisdictionProfile> jurisdictions ) { 
    try
    {
        if ( jurisdictions.Count() > 0 )
        {
            <div class="subsection jurisdictionList">
                @ShowTag( title, headerTag )
                @foreach ( var jurisdiction in jurisdictions )
                {
                    <div class="subsection profile jurisdiction">
                        @Html.Raw( "<" + headerTag + ">Applicable To</" + headerTag + ">" )
                        @*@if ( jurisdiction.IsOnlineJurisdiction )
                        {
                            <div><b>Online:</b> This jurisdiction applies to the internet.</div>
                        }*@
                        @if ( jurisdiction.IsGlobalJurisdiction )
                        {
                            <div><b>Globally:</b> This jurisdiction applies to the entire world.</div>
                        }
                        @if ( jurisdiction.MainJurisdiction != null && jurisdiction.MainJurisdiction.Id > 0 )
                        {
                            <a href="@jurisdiction.MainJurisdiction.Url" target="jurisdictionWindow">@jurisdiction.MainJurisdiction.TitleFormatted</a>
                        }
                        @if ( jurisdiction.JurisdictionException.Count() > 0 )
                        {
                            @Html.Raw( "<" + headerTag + ">Exceptions</" + headerTag + ">" )
                            foreach ( var exclude in jurisdiction.JurisdictionException )
                            {
                                <a href="@exclude.Url" target="jurisdictionWindow">@exclude.TitleFormatted</a>
                            }
                        }
                        @if ( HasText( jurisdiction.Description ) && jurisdiction.Description != "Auto-saved Jurisdiction" )
                        {
                            <div class="jurisdictionDescription">@Html.Raw( jurisdiction.Description )</div>
                        }
                    </div>
                }
            </div>
        }
    }
    catch { }
}
@helper JurisdictionMerged( string title, string headerTag, string guidance, string onlinePhrase, string globalPhrase, string locationPhrase, string exceptionPhrase, List<JurisdictionProfile> jurisdictions, bool allowOnlineGlobal = true ) { 
    try
    {
        var mains = new List<GeoCoordinates>();
        var exceptions = new List<GeoCoordinates>();
        var isGlobal = false;
        var isOnline = false;
        foreach ( var jurisdiction in jurisdictions )
        {
            if ( mains.FirstOrDefault( m => m.GeoNamesId == jurisdiction.MainJurisdiction.GeoNamesId ) == null && jurisdiction.MainJurisdiction != null && jurisdiction.MainJurisdiction.GeoNamesId != 0 )
            {
                mains.Add( jurisdiction.MainJurisdiction );
            }
            foreach ( var exceptionItem in jurisdiction.JurisdictionException )
            {
                if ( exceptions.FirstOrDefault( m => m.GeoNamesId == exceptionItem.GeoNamesId ) == null && exceptionItem != null && exceptionItem.GeoNamesId != 0 )
                {
                    exceptions.Add( exceptionItem );
                }
            }
            isGlobal = jurisdiction.IsGlobalJurisdiction ? true : isGlobal;
            //isOnline = jurisdiction.IsOnlineJurisdiction ? true : isOnline;
        }
        
        if ( mains.Count() > 0 || exceptions.Count() > 0 || isOnline || isGlobal )
        {
            <div class="subsection jurisdiction mergedJurisdictionList">
                @ShowTag( title, headerTag )
                @if ( !string.IsNullOrWhiteSpace( guidance ) )
                {
                <p>@Html.Raw( guidance )</p>
                }
                @if ( isOnline && allowOnlineGlobal )
                {
                    <div><b>Online:</b> @Html.Raw( onlinePhrase )</div>
                }
                @if ( isGlobal && allowOnlineGlobal )
                {
                    <div><b>Globally:</b> @Html.Raw( globalPhrase )</div>
                }
                @if ( mains.Count() > 0 )
                {
                    @*<div><b>Specific Places:</b> @Html.Raw( locationPhrase )</div>*@
                    <ul>
                        @foreach ( var main in mains )
                        {
                            @*<li><a href="@main.Url" target="jurisdictionWindow">@main.TitleFormatted</a></li>*@
                            <li>@main.TitleFormatted</li>
                        }
                    </ul>
                }
                @if ( exceptions.Count() > 0 )
                {
                    <div>@*<b>Exceptions:</b>*@@Html.Raw( exceptionPhrase )</div>
                    <ul>
                        @foreach ( var exclude in exceptions )
                        {
                            @*<li><a href="@exclude.Url" target="jurisdictionWindow">@exclude.TitleFormatted</a></li>*@
                            <li>@exclude.TitleFormatted</li>
                        }
                    </ul>
                }
            </div>
        }
    }
    catch { }
}
@helper ListReceivedRoles( string typeTitle, List<OrganizationRoleProfile> receivedRoles, Enumeration roleCodes ) { 
    foreach ( var role in receivedRoles )
    {
        try
        {
            //Prevent nulls
            role.ActingAgent.Name = role.ActingAgent.Name ?? "";
            role.ActingAgent.Description = role.ActingAgent.Description ?? "";
            var imageStyle = string.IsNullOrWhiteSpace( role.ActingAgent.ImageUrl ) ? "" : "style=\"background-image:url('" + role.ActingAgent.ImageUrl + "');\"";
            var imageSource = string.IsNullOrWhiteSpace( role.ActingAgent.ImageUrl ) ? "" : role.ActingAgent.ImageUrl;
            var hasLocation = role.ActingAgent.Address.Latitude != 0d && role.ActingAgent.Address.Longitude != 0d;
            
            //Temporary hack - hide QA roles/QA-only orgs
            var newRoles = new List<EnumeratedItem>();
            foreach ( var item in role.AgentRole.Items )
            {
                if ( !item.IsSpecialValue ) 
                {
                    newRoles.Add( item );
                }
            }
            //Skip the entire role if all roles were QA
            if ( newRoles.Count() == 0 ) 
            {
                continue;
            }
            //Otherwise only show the non-QA roles
            else
            {
                role.AgentRole.Items = newRoles;
            }
            //End hack
            
            <div class="subsection organization roles @( hasLocation ? "hasLocation" : "" )" data-organizationID="@role.ActingAgent.Id" data-latitude="@role.ActingAgent.Address.Latitude" data-longitude="@role.ActingAgent.Address.Longitude">
                <div class="roleList">@string.Join( ", ", role.AgentRole.Items.Select( m => m.Name ).ToList() )</div>
                <h3><a href="@Url.Content( "~/detail/organization/" + role.ActingAgent.Id )" target="_blank">@role.ActingAgent.Name</a></h3>
                <div class="description">@RenderPreformattedText( role.ActingAgent.Description, "p", 200 )</div>
                <div class="dataBox">
                    @if ( hasLocation )
                    {
                        <button class="mapButton" onclick="focusMapOnOrganization(@role.ActingAgent.Id);" title="Show on Map"><i class="fa fa-map-marker"></i></button>
                    }
                    else 
                    {
                        <button disabled="disabled" class="mapButton" title="Location Unavailable"><i class="fa fa-map-marker"></i></button>
                    }
                    @*@if(hasQA)
                    {
                        <img src="@Url.Content( "~/images/v2/icons/flat_quality.png" )" alt="This Organization provides Quality Assurance to this @typeTitle" title="This Organization provides Quality Assurance to this @typeTitle" />
                    }*@
                </div>
                @*<div class="logo"><div class="logoImage" @Html.Raw( imageStyle )></div></div>*@
                <div class="logo">
                    @if ( !string.IsNullOrWhiteSpace( imageSource ) )
                    {
                        <img class="logoImage" src="@Html.Raw( imageSource )" alt="Logo" />
                    }
                </div>
                @*<h4>This @typeTitle is:</h4>
                <ul>
                    @foreach ( var played in role.AgentRole.Items )
                    {
                        <li>@played.Name</li>
                    }
                </ul>
                <p>by this Organization.</p>*@
            </div>
        }
        catch { }
    }
}
@helper ListQualityAssuranceRoles( string headerTag, string prefix, List<OrganizationRoleProfile> roles, Enumeration roleCodes ) {
    foreach ( var code in roleCodes.Items.Where( m => m.IsSpecialValue ) ) //For each QA role...
    {
        try
        {
            var matchedPlayers = new List<Organization>();
            foreach ( var role in roles )
            {
                //If the role profile contains a matching role and the matched players list does not already contain the org for that role, add that org to the list
                if ( role.AgentRole.Items.FirstOrDefault( m => m.CodeId == code.Id ) != null && matchedPlayers.FirstOrDefault( m => m.Id == role.ActingAgent.Id ) == null )
                {
                    matchedPlayers.Add( role.ActingAgent );
                }
            }

            if ( matchedPlayers.Count() > 0 )
            //if ( matches.Count() > 0 )
            {
                @ShowTag( prefix + " " + code.Name, headerTag )
                <ul class="qaRolePlayerList">
                    @foreach ( var player in matchedPlayers )
                    {
                        <li class="rolePlayer">
                            <a href="@Url.Content( "~/detail/organization/" + player.Id )" target="_blank">@player.Name</a>
                        </li>
                    }
                </ul>
            }
        }
        catch { }
    }
}
@helper DetailsButton( string title, string detailName, int count ) { 
    if ( count > 0 )
    {
        <button class="blackButton" data-detailName="@detailName">@title <i class="fa fa-caret-down"></i><i class="fa fa-caret-right"></i></button>
    }
}
@helper ListCredentials( string headerTag, List<Credential> credentials, bool showImage ) { 
    if ( credentials != null )
    {
        foreach ( var credential in credentials )
        {
            if ( credential == null || credential.Id == 0 )
            {
                continue;
            }
            try
            {
                try
                {
                    credential.CredentialType.SchemaName = credential.CredentialType.Items.FirstOrDefault().SchemaName ?? "credential";
                }
                catch 
                {
                    try
                    {
                        credential.CredentialType.SchemaName = credential.CredentialType.SchemaName ?? "credential";
                    }
                    catch { }
                    credential.CredentialType.SchemaName = "credential";
                }
                
                credential.Name = credential.Name ?? "";
                credential.Description = credential.Description ?? "";
        
                <div class="subprofile credential" data-type="@credential.CredentialType.SchemaName.ToLower()" data-withIcon="@( showImage ? "true" : "false" )">
                    <div class="typeIcon"></div>
                    @Html.Raw( "<" + headerTag + ">" )<a href="@Url.Content( "~/detail/credential/" + credential.Id )" target="_blank">@credential.Name</a>@Html.Raw( "</" + headerTag + ">" )
                    <div class="description">@RenderPreformattedText( credential.Description, "p", 400 )</div>
                </div>
            }
            catch { }
        }
    }
}
@helper ListOrganizations( string headerTag, List<Organization> organizations, bool showImage ) { 
    if ( organizations != null )
    {
        foreach ( var organization in organizations )
        {
            if ( organization == null || organization.Id == 0 )
            {
                continue;
            }
            try
            {
                organization.Name = organization.Name ?? "";
                organization.Description = organization.Description ?? "";
                organization.ImageUrl = string.IsNullOrWhiteSpace( organization.ImageUrl ) ? "" : organization.ImageUrl;

                <div class="subprofile organization" data-withIcon="@( showImage ? "true" : "false" )">
                    @Html.Raw( "<" + headerTag + ">" )<a href="@Url.Content( "~/detail/organization/" + organization.Id )" target="_blank">@organization.Name</a>@Html.Raw( "</" + headerTag + ">" )
                    <div class="description">@RenderPreformattedText( organization.Description, "p", 400 )</div>
                    <div class="logo">
                        @*<div class="logoImage" style="background-image:url('@organization.ImageUrl');"></div>*@
                        @if ( !string.IsNullOrWhiteSpace( organization.ImageUrl ) )
                        {
                            <img class="logoImage" src="@organization.ImageUrl" />
                        }
                    </div>
                </div>
            }
            catch { }
        }
    } 
}
@helper ListAssessments( string headerTag, List<AssessmentProfile> assessments )
{ 
    if ( assessments != null )
    {
        foreach ( var assessment in assessments )
        {
            if ( assessment == null || assessment.Id == 0 )
            {
                continue;
            }
            try
            {
                assessment.Name = string.IsNullOrWhiteSpace( assessment.Name ) ? "" : assessment.Name;
                assessment.Description = string.IsNullOrWhiteSpace( assessment.Description ) ? "" : assessment.Description;
                
                <div class="subprofile assessment">
                    @Html.Raw( "<" + headerTag + ">" )<a href="@Url.Content( "~/detail/assessment/" + assessment.Id )" target="_blank">@assessment.Name</a>@Html.Raw( "</" + headerTag + ">" )
                    <div class="description">@RenderPreformattedText( assessment.Description, "p", 400 )</div>
                    @EnumerateGroup( "", "", new List<Enumeration>() { assessment.AssessmentMethodType, assessment.AssessmentUseType, assessment.DeliveryType }, "assessment" )
                    @*@ListCostsCompact( assessment.EstimatedCost, "Costs", "h6", "" )*@
                </div>
            }
            catch { }
        }
    }
}
@helper ListLearningOpportunities( string headerTag, List<LearningOpportunityProfile> learningOpportunities )
{ 
    if ( learningOpportunities != null )
    {
        foreach ( var learningOpportunity in learningOpportunities )
        {
            if ( learningOpportunity == null || learningOpportunity.Id == 0 )
            {
                continue;
            }
            try
            {
                learningOpportunity.Name = string.IsNullOrWhiteSpace( learningOpportunity.Name ) ? "" : learningOpportunity.Name;
                learningOpportunity.Description = string.IsNullOrWhiteSpace( learningOpportunity.Description ) ? "" : learningOpportunity.Description;
                
                <div class="subprofile learningopportunity">
                    @Html.Raw( "<" + headerTag + ">" )<a href="@Url.Content( "~/detail/learningopportunity/" + learningOpportunity.Id )" target="_blank">@learningOpportunity.Name</a>@Html.Raw( "</" + headerTag + ">" )
                    <div class="description">@RenderPreformattedText( learningOpportunity.Description, "p", 400 )</div>
                    @ShowCompetencyValues( "Teaches Competencies", "h6", learningOpportunity.TeachesCompetencies, "" )
                    @ShowCompetencyValues( "Requires Competencies", "h6", learningOpportunity.RequiresCompetencies, "" )
                    @Enumerate( "", "", learningOpportunity.DeliveryType, "learningopportunity" )
                    @*@ListCostsCompact( learningOpportunity.EstimatedCost, "Costs", "h6", "" )*@
                </div>
            }
            catch { }
        }
    }
}
@helper Durations( List<DurationProfile> durations, string title, string headerTag ) { 
    try
    {
        if ( durations.Count() > 0 )
        {
            <div class="subsection">
                @ShowTag( title, headerTag )
                @foreach ( var item in durations )
                {
                    <dl class="subsection profile estimatedTimeToEarn">
                        <dt>@( item.IsRange ? item.MinimumDuration.Print() + " - " + item.MaximumDuration.Print() : item.ExactDuration.Print() )</dt>
                        @if( !string.IsNullOrWhiteSpace( item.Conditions ) )
                        {
                            <dd>Conditions: @item.Conditions</dd>
                        }
                    </dl>
                }
            </div>
        }
    }
    catch { }
}
@helper ListConditions( List<ConditionProfile> conditions, string title, ConditionProfileTypes typeCode ) {
    var indexer = 1;
    foreach ( var condition in conditions )
    {
        condition.ProfileName = string.IsNullOrWhiteSpace( condition.ProfileName ) ? title + " #" + indexer : condition.ProfileName;
        condition.Description = string.IsNullOrWhiteSpace( condition.Description ) ? "" : condition.Description;
        
        var headerPrefix = "";
        var headerPrefixNoun = "";
        switch( typeCode )
        {
            case ConditionProfileTypes.REQUIRES:
                headerPrefix = "Required";
                headerPrefixNoun = "Requirements";
                break;
            case ConditionProfileTypes.RECOMMENDS:
                headerPrefix = "Recommended";
                headerPrefixNoun = "Recommendation";
                break;
            case ConditionProfileTypes.ADVANCEDSTANDINGFROM:
                headerPrefix = "Advanced Standing From";
                headerPrefixNoun = "Advanced Standing";
                break;
            case ConditionProfileTypes.PREPARATIONFROM:
                headerPrefix = "Preparation From";
                headerPrefixNoun = "Preparation";
                break;
            case ConditionProfileTypes.ISREQUIREDFOR:
                headerPrefix = "Is Required For";
                headerPrefixNoun = "Requirement For";
                break;
            case ConditionProfileTypes.ISRECOMMENDEDFOR:
                headerPrefix = "Is Recommended For";
                headerPrefixNoun = "Recommendation For";
                break;
            case ConditionProfileTypes.ISADVANCEDSTANDINGFOR:
                headerPrefix = "Advanced Standing For";
                headerPrefixNoun = "Advanced Standing For";
                break;
            case ConditionProfileTypes.ISPREPARATIONFOR:
                headerPrefixNoun = "Preparation For";
                headerPrefixNoun = "Preparation For";
                break;
            case ConditionProfileTypes.RENEWAL:
                headerPrefix = "Related";
                headerPrefixNoun = "Additional";
                break;
            default: break;
        }
        
        <div class="profile conditions @typeCode.ToString().ToLower()">
            <h3 class="detailProfileHeader">@condition.ProfileName</h3>
            @if ( HasText( condition.DateEffective ) ) 
            { 
                <div class="date">As of @condition.DateEffective</div> 
            }
            
            <div class="autoColumns">
                <div class="autoColumnItem">
                    @if ( condition.TargetLearningOpportunity.Count() > 0 )
                    {
                        <h5>@headerPrefix Learning Opportunities</h5>
                        @ListLearningOpportunities( "h6", condition.TargetLearningOpportunity )
                    }
                </div>
                <div class="autoColumnItem">
                    @if ( condition.TargetAssessment.Count() > 0 )
                    {
                        <h5>@headerPrefix Assessments</h5>
                        @ListAssessments( "h6", condition.TargetAssessment )
                    }
                </div>
                <div class="autoColumnItem">
                    @if ( condition.RequiredCredential.Count() > 0 )
                    {
                        <h5>@headerPrefix Specific Credentials</h5>
                        @ListCredentials( "h6", condition.RequiredCredential, false )
                    }
                </div>
                <div class="autoColumnItem">
                    @Enumerate( headerPrefix + " Audience Level", "h4", condition.AudienceLevel, "credential" )
                </div>
                @if ( !string.IsNullOrWhiteSpace( condition.Description ) || !string.IsNullOrWhiteSpace( condition.Experience ) || condition.ConditionItem.Count() > 0 )
                {
                    <div class="autoColumnItem">
                        <h5>@headerPrefixNoun Details</h5>
                        @ShowNamedText( "Description", "", condition.Description, "", true )
                        @ShowNamedText( "Experience", "", condition.Experience, "", true )
                        @ShowTextValues( "Experience", "", condition.ConditionItem, "", false, false )
                        @if ( condition.YearsOfExperience > 0 )
                        {
                            <p><b>Years of Experience:</b> @condition.YearsOfExperience</p>
                        }
                        @if( condition.MinimumAge > 0 )
                        {
                            <p><b>Minimum Age:</b> @condition.MinimumAge</p>
                        }
                    </div>
                }
                @*<div class="autoColumnItem">
                    @Enumerate( "Applicable Audience", "h5", condition.ApplicableAudienceType, "credential" )
                </div>*@
                @*<div class="autoColumnItem">
                    @ShowTextValues( headerPrefix + " Competencies", "h5", condition.TargetMiniCompetency, "", true, true )
                </div>*@
                @*<div class="autoColumnItem">
                    @ShowTextValues( "References", "h5", condition.ReferenceUrl, "", true, true )
                </div>*@
                <div class="autoColumnItem">
                    @JurisdictionMerged( "Applicable to Residents Of", "h5", "These conditions have residency restrictions:", "", "", "These conditions apply to residents of:", "These conditions do <i>not</i> apply to residents of:", condition.ResidentOf )
                </div>
                @*<div class="autoColumnItem">
                    @JurisdictionMerged( "Applicable Area(s)", "h5", "These conditions are valid in the following places:", "", "", "", "These conditions do <i>not</i> apply within these places:", condition.Jurisdiction )
                </div>*@
                <div class="autoColumnItem">
                    @Enumerate( "Applicable Audience", "h5", condition.ApplicableAudienceType, typeCode.ToString().ToLower() )
                </div>
                @if ( condition.AssertedByAgentUid != null && condition.AssertedByAgentUid != Guid.Empty )
                {
                    try
                    {
                        condition.AssertedBy = OrganizationServices.GetLightOrgByRowId( condition.AssertedByAgentUid.ToString() );
                        <div class="autoColumnItem">
                            <h5>Conditions Asserted By</h5>
                            @ListOrganizations( "h5", new List<Organization>() { condition.AssertedBy }, true )
                        </div>
                    }
                    catch { }
                }
            </div>

          

            @try {
                OrganizationLink( new Organization() { Name = condition.AssertedByOrgProfileLink.Name, Id = condition.AssertedByOrgProfileLink.Id }, "Conditions Provided By", "h4" );
            }
            catch { }
        </div>
    
        indexer++;
    }
}
@helper ListCostsCompact( List<CostProfile> costs, string title, string headerTag, string className )
{
    try
    {
        if ( costs != null && costs.Count() > 0 && costs.SelectMany(m => m.Items).Count() > 0 )
        {
            var usedCostIDs = new List<int>();
            <div class="costProfileCompact @className">
                @ShowTag( title, headerTag )
                <div class="costList">
                    @foreach(var cost in costs)
                    {
                        if ( usedCostIDs.Contains( cost.Id ) )
                        {
                            continue;
                        }
                        usedCostIDs.Add( cost.Id );
                        if ( cost.Items.Count() > 0 )
                        {
                            <div class="cost">
                                <button class="costName actionButton" data-costID="@cost.Id" onclick="toggleCost(@cost.Id);">@cost.ProfileName <i class="fa fa-caret-right"></i><i class="fa fa-caret-down"></i></button>
                                <div class="costItems" data-costID="@cost.Id">
                                    <div class="description">
                                        @RenderPreformattedText( cost.Description, "p" )
                                        @if ( HasText( cost.DateEffective ) && HasText( cost.ExpirationDate ) )
                                        {
                                            <p class="date">Valid @cost.DateEffective - @cost.ExpirationDate</p>
                                        }
                                        else if ( HasText( cost.DateEffective ) && !HasText( cost.ExpirationDate ) )
                                        {
                                            <p class="date">As of @cost.DateEffective</p>
                                        }
                                        else if ( !HasText( cost.DateEffective ) && HasText( cost.ExpirationDate ) )
                                        {
                                            <p class="date">Expires @cost.ExpirationDate</p>
                                        }
                                        @if ( !string.IsNullOrWhiteSpace( cost.DetailsUrl ) )
                                        {
                                            cost.ReferenceUrl.Insert( 0, new TextValueProfile() { TextValue = cost.DetailsUrl, ProfileName = "Cost Details" } );
                                        }
                                        @ShowTextValues( "References", "b", cost.ReferenceUrl, "", true, true )
                                    </div>
                                    @foreach ( var costItem in cost.Items )
                                    {
                                        var type = costItem.CostType.Items.FirstOrDefault();
                                        var audiences = string.Join( ", ", costItem.ApplicableAudienceType.Items.Where( m => m.Name != "Any/All" ).Select( m => m.Name ) );
                                        var residency = string.Join( ", ", costItem.ResidencyType.Items.Where( m => m.Name != "Any/All" ).Select( m => m.Name ) );
                                        var enrollment = "";
                                        var itemName = costItem.ProfileName == cost.ProfileName ? "" : costItem.ProfileName;
                                        if ( type != null )
                                        {
                                            <div class="costItem">
                                                @if ( !string.IsNullOrWhiteSpace( itemName ) )
                                                {
                                                    <div class="costItemName">@itemName</div>
                                                }
                                                <div class="costItemSummary">@type.Name: @cost.CurrencySymbol + @costItem.Price </div>
                                                <div class="costItemConditions">
                                                    <div>@costItem.PaymentPattern</div>
                                                    @if ( !string.IsNullOrWhiteSpace( audiences ) )
                                                    {
                                                        <div>Audiences: @audiences</div>
                                                    }
                                                    @if ( !string.IsNullOrWhiteSpace( residency ) )
                                                    {
                                                        <div>Residency: @residency</div>
                                                    }
                                                    @if ( !string.IsNullOrWhiteSpace( enrollment ) )
                                                    {
                                                        <div>Enrollment: @enrollment</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
    catch { }
}
@helper OrganizationLink( Organization organization, string title, string headerTag ) { 
    if ( organization != null && organization.Id > 0 )
    {
        <div>
            @ShowTag( title, headerTag )
            <a href="@Url.Content( "~/detail/organization/" )@organization.Id" target="_blank">@organization.Name</a>
        </div>
    }
}
@helper ShowTag( string text, string tag  ) { 
    if ( !string.IsNullOrWhiteSpace( tag ) && !string.IsNullOrWhiteSpace( text ) )
    {
        @Html.Raw( "<" + tag + ">" + text + "</" + tag + ">" )
    }
}
@helper ListQualityAssuranceActions( string title, string headerTag, List<QualityAssuranceActionProfile> qualityActions ) { 
    if ( qualityActions != null && qualityActions.Count() > 0 )
    {
        @ShowTag( title, headerTag )
        foreach ( var quality in qualityActions )
        {
            try
            {
                <div class="profile qualityAssuranceAction">
                    <h5><a href="@Url.Content( "~/detail/credential/" + quality.IssuedCredential.Id )" target="_blank">@quality.IssuedCredential.Name</a></h5>
                    <div class="description">
                        @ShowNamedText( "QA Credential Description", "", quality.IssuedCredential.Description, "", true )
                        @ShowNamedText( "QA Description", "", quality.Description, "", true )
                    </div>
                    @if ( quality.ActingAgent != null && quality.ActingAgent.Id > 0 )
                    {
                        <div class="issuedBy">Issued by: <a href="@Url.Content( "~/detail/organization/" + quality.ActingAgent.Id )" target="_blank">@quality.ActingAgent.Name</a></div>
                    }
                    @if ( quality.StartDate != null || quality.EndDate != null )
                    {
                        var validity = "";
                        if ( !string.IsNullOrWhiteSpace( quality.StartDate ) && !string.IsNullOrWhiteSpace( quality.EndDate ) )
                        {
                            validity = "Valid " + quality.StartDate + " - " + quality.EndDate;
                        }
                        else if ( !string.IsNullOrWhiteSpace( quality.StartDate ) )
                        {
                            validity = "As of " + quality.StartDate;
                        }
                        else if ( !string.IsNullOrWhiteSpace( quality.EndDate ) )
                        {
                            validity = "Expires " + quality.EndDate;
                        }
                        
                        <div class="validDates">@validity</div>
                    }

                </div>
            }
            catch { }
        }
    }
}
@helper ListAddresses( List<Address> addresses, string title, string headerTag ) { 
    try
    {
        if ( addresses.Count() > 0 )
        {
            var addressCount = 1;
            <div class="block">
                @ShowTag( title, headerTag )
                @foreach ( var address in addresses )
                {
                    <div class="address" data-latitude="@address.Latitude" data-longitude="@address.Longitude">
                        <div class="addressName">
                            @( string.IsNullOrWhiteSpace( address.Name ) ? "Address #" + addressCount : address.Name )
                            @if( address.IsMainAddress && addresses.Count() > 1 ) 
                            {
                                <span>(Main Address)</span>
                            }
                            :
                        </div> @address.DisplayAddress() 
                        <button class="mapButton"><i class="fa fa-map-marker"></i></button>
                    </div>
                }
            </div>
        }
    }
    catch { }
}
@helper LearningOpportunityCompetencyGroup( LearningOpportunityProfile item, string headerTag )
{
    try
    {
        <button class="competencyTitle" data-competencyGroupID="@item.Id">@item.Name <i class="fa fa-caret-right"></i><i class="fa fa-caret-down"></i></button>
        <div class="competencyData" data-competencyGroupID="@item.Id">
            <a href="@Url.Content( "~/detail/learningopportunity/" + item.Id )" target="_blank">More Information</a>
            @*@ShowCompetencyValues( "Teaches", headerTag, item.TeachesCompetencies, "" )
            @ShowCompetencyValues( "Requires", headerTag, item.RequiresCompetencies, "" )*@
            @ShowCompetencyFrameworkValues( "Teaches", headerTag, item.TeachesCompetenciesFrameworks, "" )
            @ShowCompetencyFrameworkValues( "Requires", headerTag, item.RequiresCompetenciesFrameworks, "" )
        </div>
    }
    catch { }
}
@helper AssessmentCompetencyGroup( AssessmentProfile item, string headerTag ) 
{ 
    try
    {
        <button class="competencyTitle" data-competencyGroupID="@item.Id">@item.Name <i class="fa fa-caret-right"></i><i class="fa fa-caret-down"></i></button>
        <div class="competencyData" data-competencyGroupID="@item.Id">
            <a href="@Url.Content( "~/detail/assessment/" + item.Id )" target="_blank">More Information</a>
            @*@ShowCompetencyValues( "Assesses", headerTag, item.AssessesCompetencies, "" )
            @ShowCompetencyValues( "Requires", headerTag, item.RequiresCompetencies, "" )*@
            @ShowCompetencyFrameworkValues( "Assesses", headerTag, item.AssessesCompetenciesFrameworks, "" )
            @ShowCompetencyFrameworkValues( "Requires", headerTag, item.RequiresCompetenciesFrameworks, "" )
        </div>
    }
    catch { }
}
@helper ConditionsCompetencyGroup( ConditionProfile item, string title, string headerTag ) { 
    try
    {
        <button class="competencyTitle" data-competencyGroupID="@item.Id">@title <i class="fa fa-caret-right"></i><i class="fa fa-caret-down"></i></button>
        <div class="competencyData" data-competencyGroupID="@item.Id">
            @*@ShowCompetencyValues( "Requires", headerTag, item.RequiresCompetencies, "" )*@
            @ShowCompetencyFrameworkValues( "Requires", headerTag, item.RequiresCompetenciesFrameworks, "" )
        </div>
    }
    catch { }
}
@helper ListCredentialsModal( string title, string buttonTitle, string headerTag, string modalID, List<Credential> data, string guidance )
{
    try
    {
        if ( data.Count() > 0 && data.Where( n => n.Id != 0 ).Count() > 0 )
        {
            <button class="actionButton credentialModalButton" onclick="showModal('@modalID');">@buttonTitle @data.Where( n => n.Id != 0 ).Count() Credentials<i class="fa fa-arrows-alt"></i></button>
            <div class="modal credentialModal dataModal" data-modalID="@modalID">
                <div class="dataModalHeader">
                    <h2 class="header">@title</h2>
                <button class="closeButton" onclick="hideModal('@modalID');"><i class="fa fa-close"></i></button>
                </div>
                <div class="dataModalContent">
                <p class="guidance">@guidance</p>
                @ListCredentials( "h3", data, true )
            </div>
            </div>
        }
    }
    catch { }
}
@helper LearningOpportunityCompetencyHierarchy( LearningOpportunityProfile learnOpp, string headerTag )
{
    try
    {
        if ( learnOpp.TeachesCompetencies.Count() > 0 || learnOpp.RequiresCompetencies.Count() > 0 || learnOpp.TeachesCompetenciesFrameworks.Select(m => m.Items).Count() > 0 || learnOpp.RequiresCompetenciesFrameworks.SelectMany( m => m.Items).Count() > 0 )
        {
            @LearningOpportunityCompetencyGroup( learnOpp, headerTag )
        }
        foreach ( var item in learnOpp.HasPart )
        {
            @LearningOpportunityCompetencyHierarchy( item, headerTag )
        }
    }
    catch {}
}
@helper ListCredentialsById( string headerTag, List<int> credentialIDs, bool showImage )
{
    try
    {
        var credentials = new List<Credential>();
        foreach ( var item in credentialIDs )
        {
            credentials.Add( CredentialServices.GetBasicCredential( item ) );
        }
        
        @ListCredentials( headerTag, credentials, showImage );
    }
    catch { }
}
@helper EnumerateTextValues( string title, string headerTag, List<TextValueProfile> items, string typeCode ) 
{ 
    try
    {
        if ( items.Count() > 0 )
        {
            <div class="subsection enumeration">
                @ShowTag( title, headerTag )
                @foreach ( var item in items )
                {
                    <a class="linkButton grayButton" target="searchWindow" href="@Url.Content("~/search?autosearch=true&searchType=" + typeCode + "&keywords=" + item.TextValue )">@item.TextValue</a>
                }
            </div>
        }
    }
    catch { }
}
@helper ListInheritedSubjects( string title, string headerTag, List<ConditionProfile> conditions, string typeCode )
{
    try
    {
        if ( conditions.SelectMany( m => m.TargetAssessment ).SelectMany( m => m.Subject ).Count() > 0 || conditions.SelectMany( m => m.TargetLearningOpportunity ).SelectMany( m => m.Subject ).Count() > 0 )
        {
            <div class="subsection">
                @ShowTag( title, headerTag )
                @foreach ( var condition in conditions )
                {
                    var assessedSubjects = condition.TargetAssessment.SelectMany( m => m.Subject ).ToList();
                    var taughtSubjects = condition.TargetLearningOpportunity.SelectMany( m => m.Subject ).ToList();
                    if ( assessedSubjects.Count() > 0 || taughtSubjects.Count() > 0 )
                    {
                        <div class="subsection">
                            @ShowTag( condition.ProfileName, "h3" )
                            @EnumerateTextValues( "Assesses", "h4", assessedSubjects, typeCode )
                            @EnumerateTextValues( "Teaches", "h4", taughtSubjects, typeCode )
                        </div>
                    }
                }
            </div>
        }
    }
    catch { }
}
@helper ListProcesses( List<ProcessProfile> data, string typeCode )
{
    try
    {
        if ( data.Count() > 0 )
        {
            foreach ( var process in data )
            {
                <div class="process">
                    @ShowTag( process.ProfileName, "h3" )
                    @ShowNamedText("Description", "h4", process.Description, "", true )
                    @Enumerate( "External Input Type", "h4", process.ExternalInput, typeCode )
                    @*@Enumerate( "Process Method", "h4", process.ProcessMethod, typeCode )
                    @Enumerate( "Staff Evaluation Method", "h4", process.StaffEvaluationMethod, typeCode )*@
                    @{ 
                        var links = new List<TextValueProfile>();
                        AddLinkToValues( links, process.TargetCompetencyFramework, "Competency Framework" );
                        //AddLinkToValues( links, process.DecisionInformationUrl, "Decision Information" );
                        //AddLinkToValues( links, process.OfferedByDirectoryUrl, "Offered Credentials Directory" );
                        //AddLinkToValues( links, process.PublicInformationUrl, "Public Information" );
                        //AddLinkToValues( links, process.StaffEvaluationUrl, "Staff Evaluation Information" );
                        //AddLinkToValues( links, process.OutcomeReviewUrl, "Outcome Review Information" );
                        //AddLinkToValues( links, process.PoliciesAndProceduresUrl, "Policies and Procedures" );
                        //AddLinkToValues( links, process.ProcessCriteriaUrl, "Process Criteria Information" );
                        //AddLinkToValues( links, process.ProcessCriteriaValidationUrl, "Process Criteria Validation Information" );
                        //AddLinkToValues( links, process.StaffSelectionCriteriaUrl, "Staff Selection Criteria Information" );
                    }
                    @ShowTextValues( "", "", links, "", true, true )
                    @if ( process.ProcessingAgent != null && process.ProcessingAgent.Id > 0 )
                    {
                        <h4>Process data provided by:</h4>
                        @ListOrganizations( "h5", new List<Organization>() { process.ProcessingAgent }, false )
                    }
                    
                </div>
            }
        }
    }
    catch { }
}

@Html.Partial( "~/Views/V2/Compare/_CompareBar.cshtml", "" )

<script type="text/javascript">
    /* Initialization */
    $(document).ready(function () {
        removeBlanks();
        setupDetails();
        setupProfileTabs();
        setupRawMetadata();
        setupCompetencyAccordions();
        setupStickyHeader();
        setupTruncation();
    });

    //Remove blank/empty boxes
    function removeBlanks() {
        $("#dataColumn .block, #mapColumn .block, #details .autoColumns .autoColumnItem").each(function () {
            var block = $(this);

            var subsections = block.find(".subsection");
            subsections.each(function () {
                var subsection = $(this);
                if (subsection.text().trim().length == 0 || subsection.find("*").not("h2, h3").length == 0) {
                    subsection.remove();
                }
            })

            if (block.text().trim().length == 0 || block.find("*").not("h2, h3").length == 0) {
                block.remove();
            }
        });
        $("#dataColumn .block").first().css("border-top", "none");
        $("#mapColumn .block").first().css("border-top", "none");
    }
    //

    //Setup detail buttons
    function setupDetails() {
        var buttons = $("#details button[data-detailName]");
        var tabs = $("#details .detailTab");
        tabs.hide();
        buttons.each(function() {
            var button = $(this);
            button.on("click", function() {
                button.toggleClass("selected");
                var tab = $("#details .detailTab[data-detailName=" + button.attr("data-detailName") + "]");
                if(button.hasClass("selected")){
                    tab.addClass("selected").slideDown();
                }
                else {
                    tab.removeClass("selected").slideUp();
                }
            
            });
        });
        //buttons.first().addClass("selected");
        //tabs.filter("[data-detailName=" + buttons.first().attr("data-detailName") + "]").addClass("selected").show();
        ////buttons.first().trigger("click");
    }
    //

    //Setup Profile Tabs
    function setupProfileTabs(){
        $(".profileTabBox").each(function() {
            var box = $(this);
            var buttons = box.find("> .profileTabBoxNavigation button");
            var tabs = box.find("> .profileTabBoxContent > .profileTab");
            buttons.each(function() {
                var button = $(this);
                button.on("click", function() {
                    buttons.removeClass("selected").filter(button).addClass("selected");
                    tabs.removeClass("selected").filter("[data-profileTabName=" + button.attr("data-profileTabName") + "]").addClass("selected");
                });
            });
            buttons.first().trigger("click");
        });
    }
    //

    //Setup Raw Metadata
    function setupRawMetadata(){
        var metaData = @Html.Raw( new JsonLDServices().SerializeJsonV2( jsonData ) );
        $("#rawMetadata").html( JSON.stringify( metaData, null, "\t") );
    }
    //

    //Setup Competency Accordions
    function setupCompetencyAccordions() {
        var competencyGroups = $("#competencyList .competencyTitle");
        competencyGroups.on("click", function() {
            var button = $(this);
            button.toggleClass("selected");
            var data = $("#competencyList .competencyData[data-competencygroupid=" + button.attr("data-competencygroupid") + "]");
            if(button.hasClass("selected")){
                data.addClass("selected");
            }
            else {
                data.removeClass("selected");
            }
        });
        if(competencyGroups.length == 1){
            competencyGroups.first().trigger("click");
        }
        $("#competencyList .toggleAllButton").on("click", function() {
            var button = $(this);
            if(button.hasClass("selected")){
                button.removeClass("selected");
                $("#competencyList .competencyTitle, #competencyList .competencyData").removeClass("selected");
            }
            else {
                button.addClass("selected");
                $("#competencyList .competencyTitle, #competencyList .competencyData").addClass("selected");
            }
        });
    }
    //

    //Setup sticky header
    function setupStickyHeader(){
        var mainSiteHeaderHeight = $("#mainSiteHeader").height();
        $(window).on("scroll", function(){
            var top = document.documentElement.scrollTop || document.body.scrollTop;
            if(top > mainSiteHeaderHeight){
                $("#content").addClass("stickyHeader");
            }
            else {
                $("#content").removeClass("stickyHeader");
            }
        }).trigger("scroll");
    }
    //

    //Truncate tall blocks
    function setupTruncation() {
        var boxes = $(".truncated");
        boxes.each(function() {
            var box = $(this);
            if(box.outerHeight() >= 300){
                var button = $("<button class=\"whiteButton truncateButton\"><span class=\"showAll\">Show All</span><span class=\"collapse\">Collapse</span></button>").insertAfter(box);
                button.on("click", function() { 
                    box.toggleClass("expanded");
                })
            }
            else {
                box.removeClass("truncated");
            }
        });
    }
    //
</script>
<script type="text/javascript">
    /* Page Functions */

    //Delete the data
    function deleteData() {
        modal.confirm(
            "Delete This Data",
            "Really delete @data.Name? This action cannot be undone!",
            function () {
                var context = {
                    IsTopLevel: true,
                    Profile: { Id: @Model.Id, RowId: "@Model.RowId", TypeName: "@Model.GetType().Name" }
                };

                doAjax("Editor", "DeleteProfile", context, success_deleteData, null, true);
            },
            function() {}
        );
    }
    //

    //
    function registerEntity() {
        modal.confirm(
            "Register This Data",
            "Are you sure that you want to register @data.Name?",
            function () {
                var context = {
                    IsTopLevel: true,
                    Profile: { Id: @Model.Id, RowId: "@Model.RowId", TypeName: "@Model.GetType().Name" }
                };
                doAjax("Editor", "Register", context, success_Publish, null, true);
            },
            function() {}
        );
    }
    //
    function success_Publish(message, result){
        if(message.valid){
            consoleMessage.addSuccessMessage("Register was successful", "", 2000);
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 10000);
        }
    }
    //
    function unRegisterEntity() {
        modal.confirm(
            "Un-Register from the Metadata Registry",
            "Are you sure that you want to remove @data.Name from the Metadata Registry?",
            function () {
                var context = {
                    IsTopLevel: true,
                    Profile: { Id: @Model.Id, RowId: "@Model.RowId", TypeName: "@Model.GetType().Name" }
                };

                doAjax("Editor", "Unregister", context, success_unRegister, null, true);
            },
            function() {}
        );
    }
    //
    function success_unRegister(message, result){
        if(message.valid){
            consoleMessage.addSuccessMessage("Remove was successful", "", 2000);
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 5000);
        }
    }
    //
    //Show Competencies
    function showCompetencyList() {
        $("#competencyList").fadeIn();
    }

    //Hide Competencies
    function hideCompetencyList() {
        $("#competencyList").fadeOut();
    }

    //Show Modal
    function showModal(modalID) {
        $(".dataModal[data-modalID=" + modalID + "]").fadeIn();
    }

    //Hide Modal
    function hideModal(modalID) {
        $(".dataModal[data-modalID=" + modalID + "]").fadeOut();
    }

    //Show/Hide costs
    function toggleCost(costID){
        var button = $(".costName[data-costID='" + costID + "']");
        var box = $(".costItems[data-costID='" + costID + "']")
        button.toggleClass("selected");
        if(button.hasClass("selected")){
            box.addClass("selected");
        }
        else {
            box.removeClass("selected");
        }
    }
    //
</script>
<script type="text/javascript">
    /* AJAX Functions */

    function showSpinner(){
        $("#waitWrapper").stop().fadeIn(250);
    }
    //

    function hideSpinner() {
        $("#waitWrapper").stop().fadeOut(250);
    }
    //

    //AJAX caller
    function doAjax(controller, method, data, success, passThrough, useSpinner) {
        //Show spinner if appropriate
        if(useSpinner){
            showSpinner();
        }

        $.ajax({
            url: "@Url.Content( "~/" )" + controller + "/" + method,
            async: true,
            headers: { "Accept": "application/json", "Content-type": "application/json; charset=utf-8" },
            dataType: "json",
            type: "POST",
            data: JSON.stringify(data),
            success: function (message) {
                console.log("Response: ", message);
                if (typeof (success) == "function") {
                    success(message, passThrough);
                }
            }
        }).always(function() {
            hideSpinner();
        });
    }
    //

    function success_deleteData(message, passThrough){
        if (message.valid) {
            modal.alert("Data Deleted", "The data has been deleted. You will now be taken back to the search page.", function() { window.location.href = "@Url.Content("~/Search")"; });
        }
    }
    //

</script>
<script type="text/javascript">
    /* Map Functions */
    var googleMaps = {
        mainMap: { boxID: "mainMapBox", map: {}, markers: [] }
    };
    var mapCenter = { lat: 37.0902, lng: -95.7129 };
    var markerID = 0;

    //Wait for all of the map objects to be added, then create the maps
    function setupMaps() {
        for(var i in googleMaps){
            googleMaps[i].map = createMap($("#" + googleMaps[i].boxID));
        }

        $(".organization.hasLocation, #mapColumn .address").each(function() {
            var targetBox = $(this);
            var lat = parseFloat(targetBox.attr("data-latitude"));
            var lng = parseFloat(targetBox.attr("data-longitude"));
            var mapButton = targetBox.find(".mapButton");

            if(lat == 0 || lng == 0){
                targetBox.addClass("noMarker");
                mapButton.prop("disabled", true);
                mapButton.attr("title", "Location Unavailable");
                return;
            }

            targetBox.attr("data-markerID", markerID);
            mapButton.attr("data-markerID", markerID).on("click", function() {
                focusMapOnMarker($(this).attr("data-markerID"));
            });

            addMarker(googleMaps.mainMap, { coords: { lat: lat, lng: lng }, markerID: markerID });
            markerID++;

        });

        if(googleMaps.mainMap.markers.length == 0){
            $("#" + googleMaps.mainMap.boxID).remove();
        }
    }
    //

    //Create Map
    function createMap(box){
        return new google.maps.Map(box[0], { center: mapCenter, zoom: 4 });
    }
    //

    //Add marker
    function addMarker(mapObject, marker){
        var newMarker = new google.maps.Marker({
            map: mapObject.map,
            position: marker.coords,
            markerID: marker.markerID
        });
        var temp = marker.markerID;
        newMarker.addListener("click", function() {
            $(window).trigger("markerClicked", marker);
            focusMapOnMarker(temp);
        })
        marker.mapMarker = newMarker;
        mapObject.markers.push(marker);
    }
    //

    //Center marker on organization and highlight that org
    function focusMapOnMarker(id){
        for(var i in googleMaps.mainMap.markers){
            var marker = googleMaps.mainMap.markers[i];
            if(marker.markerID == id){
                centerMapOnMarker(marker);
            }
        }
    }
    //

    //Center map on marker
    function centerMapOnMarker(marker){
        googleMaps.mainMap.map.setCenter(marker.coords);
        $("[data-markerID=" + marker.markerID + "]").addClass("highlight");
        setTimeout(function() {
            $("[data-markerID=" + marker.markerID + "]").removeClass("highlight");
        }, 800);
    }
    //

</script>

<style type="text/css">
    
    /* Basics */
    ul, ol, dl { margin: 0; padding: 0 0 0 25px; }
    .section { margin: 0 -5vw; padding: 25px 5vw; }
    .subsection { margin-bottom: 25px; }
    .enumeration .linkButton { margin: 2px; padding: 5px 10px; }
    #waitWrapper { position: fixed; top: 0; bottom: 0; left: 0; right: 0; background-color: rgba(0,0,0,0.5); z-index: 999999; transition: none; display: none; }
    #wait { width: 200px; margin: calc(50vh - 200px) auto; text-align: center; color: #FFF; }
    #waitSpinner { width: 100%; display: block; font-size: 100px; line-height: 100px; }
    #waitTitle { font-size: 26px; padding: 20px 5px 20px 20px; }

    /* Title Box */
    #titleBox { background-color: #0F3E63; color: #FFF; position: relative; }
    #titleBoxPlaceholder { opacity: 0; }
    #titleBox, #titleBoxPlaceholder { padding: 20px calc(5vw + 450px) 20px 5vw; }
    #titleBox, #titleBoxPlaceholder h1 { font-size: 36px; }
    #titleBox h1, #titleBoxPlaceholder h1 { margin: 0; padding: 0; }
    #titleBox * { color: inherit; }
    #titleBox #tools { position: absolute; top: 40px; right: 5vw; }
    #titleBox #tools .actionButton { padding: 10px; font-size: 16px; margin: 0 5px; white-space: nowrap; }
    #content.stickyHeader #titleBox { position: fixed; top: 0; left: 0; width: 100%; margin: 0; z-index: 100; }
    #content.stickyHeader #titleBox, #content.stickyHeader #titleBoxPlaceholder { min-height: 100px; }
    #content.stickyHeader #titleBox h1, #content.stickyHeader #titleBoxPlaceholder h1 { font-size: 28px; }
    #content.stickyHeader #titleBox #tools { top: 25px; }
    #content:not(.stickyHeader) #titleBoxPlaceholder { display: none; }
    #titleBox h2, #titleBoxPlaceholder h2 { font-size: 18px; font-weight: normal; padding: 5px; margin: 0; }

    /* Call to Action */
    #callToAction { background-color: #BADCA3; padding: 10px; font-size: 24px; font-weight: bold; text-align: center; }
    #callToAction a { color: #FFF; }

    /* Columns */
    #columns {  }
    #columns .column { width: 50%; }
    #columns h2 { font-size: 20px; padding: 0 0 10px 0; margin: 0; }
    #columns h3 { font-size: 18px; padding: 0 0 5px 0; margin: 0; }

    /* Data Column */
    #dataColumn { padding-right: 1vw; }
    #dataColumn .block { padding: 25px 15px; border-top: 1px solid #CAD9DB; position: relative; }
    #dataColumn .block:first-child { border-top: none; }
    #dataColumn .block:empty { display: none; }
    #dataColumn .block.withIcon { padding-left: 100px; background-position: left top; background-repeat: no-repeat; background-size: 95px; }
    #dataColumn .block.withLogo .logoImage { position: absolute; top: 25px; left: 0; width: 90px; }

    /* Map Column */
    #mapColumn { padding-left: 1vw; }
    #mapColumn #mainMapBox { width: 100%; height: 50vh; }
    .accessRequirements { border-top: 1px solid #CAD9DB; margin-bottom: 25px; padding: 10px 0; }
    .accessRequirements .accessRequirement { padding-left: 25px; }
    .accessRequirements ul.accessRequirement { padding-left: 50px; }
    #mapColumn .block { padding: 25px 15px; border-top: 1px solid #CAD9DB; }
    #mapColumn .block:first-of-type { border-top: none; }
    #mapColumn .block.withIcon { padding-left: 100px; background-position: left top; background-repeat: no-repeat; background-size: 95px; }
    #mapColumn .block:empty { display: none; }
    .address { padding: 10px; }
    .address .mapButton { padding: 2px 5px; width: 40px; font-size: 25px; margin: 2px; }
    .address.highlight { box-shadow: 0 0 25px #E0DB80; }
    .address .addressName { font-weight: bold; }
     
    /* Details */
    #details { background-color: #F2F4F4; overflow: hidden; min-height: 300px; }
    #detailNavigation { width: 300px; }
    #detailContent { width: calc(100% - 300px); padding-left: 3vw; }
    #detailNavigation button { display: block; width: 100%; padding: 15px; font-weight: bold; font-size: 20px; }
    #detailNavigation button.selected { background-color: #3D4443; color: #FFF; }
    #details button:not(.selected) .fa-caret-down { display: none; }
    #details button.selected .fa-caret-right { display: none; }
    #details button .fa { margin: 0 10px; }
    #detailNavigation button:not(:hover):not(:focus) { border-top: 1px solid #CAD9DB; }
    #detailNavigation button:not(:hover):not(:focus):first-of-type { border-top: none; margin-top: 1px; }
    #detailNavigation button:not(.selected) { background-color: transparent; }
    #detailContent .detailTab:not(.selected) { display: none; }
    #details .detailTab { padding-bottom: 25px; }
    #details .detailTab .detailTabHeader { margin: 0 0 10px 0; }
    #details .autoColumns { column-count: 2; -moz-column-count: 2; }
    #details .autoColumns .autoColumnItem  { display: inline-block; width: 100%; vertical-align: top; }
    #details .detailProfileHeader { text-transform: uppercase; padding: 5px 125px 15px 5px; border-bottom: 1px solid #CAD9DB; margin-bottom: 15px; font-size: 20px; min-height: 1em; }

    .profileTabBoxNavigation { width: 250px; }
    .profileTabBoxNavigation button { display: block; width: 100%; padding: 5px; font-weight: bold; font-size: 18px; }
    .profileTabBoxNavigation button.selected { background-color: #3D4443; color: #FFF; }
    .profileTabBoxContent { width: calc(100% - 250px); }
    .profileTabBoxContent .profileTab { padding: 0 0 25px 10px; }
    .profileTabBoxContent .profileTab:not(.selected) { display: none; }
    .profileTabBox.profileTabBoxInline > .profileTabBoxNavigation, .profileTabBox.profileTabBoxInline > .profileTabBoxContent { display: block; width: 100%; }
    .profileTabBox.profileTabBoxInline > .profileTabBoxNavigation button { display: inline-block; vertical-align: top; width: auto; margin: 2px 0; }

    /* Profiles */
    .profile { position: relative; margin-bottom: 25px; }
    .enumeration { }
    .estimatedTimeToEarn {  }
    .estimatedTimeToEarn dt { font-weight: normal; }
    .jurisdiction { }
    .jurisdiction div, .jurisdiction a { padding: 5px 10px; line-height: 1.5em; }
    .jurisdiction ul { padding-left: 30px; }

    /* Organization boxes */
    .organization { position: relative; min-height: 185px; border-top: 1px solid #CAD9DB; padding: 25px 160px 10px 55px; }
    .organization:first-of-type { border-top: none; }
    .organization .logo { position: absolute; top: 25px; right: 0; width: 150px; height: 150px; }
    /*.organization .logo .logoImage { position: absolute; top: 0; right: 0; bottom: 0; left: 0; background-position: center center; background-size: 95%; background-repeat: no-repeat; }*/
    .organization .logo .logoImage, .block.withLogo .logoImage { max-width: 100%; max-height: 100%; border: 1px solid #CAD9DB; background-image: linear-gradient(#AAA, #EEE); }
    .organization.roles { }
    .organization .roleList { padding: 5px 0; text-transform: uppercase; font-size: 14px; letter-spacing: 0.08em; }
    .organization .description { line-height: 1.5em; }
    .organization .dataBox { position: absolute; top: 20px; left: 0px; padding: 5px; width: 50px; height: 150px; }
    .organization .dataBox .mapButton { width: 100%; background-color: transparent; color: #45A085; font-size: 25px; }
    .organization .dataBox .mapButton[disabled] { opacity: 0.2; color: #3D4443; border-color: transparent; box-shadow: none; cursor: initial; }
    .organization .dataBox img { max-width: 100%; }
    .organization.highlight { box-shadow: 0 0 25px #E0DB80; }

    /* Embedded/Owned Credentials */
    .credential { padding: 25px 10px 5px 160px; border-top: 1px solid #CAD9DB; position: relative; min-height: 160px; margin-bottom: 25px; }
    .credential:first-of-type { border-top: none; }
    .credential .typeIcon { position: absolute; top: 10px; left: 0; width: 150px; height: 150px; background-position: center center; background-size: cover; background-repeat: no-repeat; }
    .credential[data-withIcon=false], .organization[data-withIcon=false] { padding: 25px 10px 5px 10px; }
    .credential[data-withIcon=false] .typeIcon, .organization[data-withIcon=false] .logo { display: none; }

    /* Details */
    #details .profile { padding: 10px; }
    #details .profile:first-of-type { border-top: none; }
    #details .profile h4 { font-size: 26px; }
    #details .profile h5 { font-size: 22px; }
    #details .profile h6 { font-size: 20px; }
    #details .profile ul { padding-left: 25px; }
    #details .grayBox { padding: 10px; border: 1px solid #CAD9DB; margin-bottom: 10px; }

    /* Details (accordion) */
    #details button[data-detailName] { margin: 0 -5vw 15px -5vw; width: 100vw; padding: 10px 5vw; font-size: 32px; display: block; text-align: left; font-weight: bold; border-radius: 0; }
    #details .detailTabHeader { display: none; }

    /* Conditions */
    .conditions > .date { position: absolute; top: 15px; right: 10px; }
    .conditions .subprofile { border: none; padding: 10px; margin-bottom: 10px; min-height: 0; }
    .conditions .subprofile a { font-weight: normal; }
    /*.conditions .taskProfile, .conditions .costProfile, .conditions .costItem { border-left: 3px solid #CAD9DB; padding-left: 5px; }*/

    /* Misc */
    .qualityAssuranceAction .issuedBy, .qualityAssuranceAction .validDates { font-size: 14px; padding: 5px; }
    .namedText, .textValueItems { margin-bottom: 15px; }
    .properName { text-transform: capitalize; }
    .rawData { white-space: pre-wrap; font-family: Consolas, 'Courier New', monospace; }
    .qaRolePlayerList { margin-bottom: 15px; }
    #socialMedia { text-align: center; }
    #socialMedia a { display: inline-block; vertical-align: top; margin: 2px; width: 50px; height: 50px; background-position: center center; background-size: contain; background-repeat: no-repeat; opacity: 0.7; }
    #socialMedia a:hover, #socialMedia a:focus { opacity: 1; }
    #orgAddress { font-size: 18px; color: #45A085; background-color: transparent; box-shadow: none; border: none; }
    /*.preformatted { white-space: pre-wrap; }*/
    .textValueList li { padding: 2px 0; }
    .availabilityListing, .availableOnlineAt, .mainLink { font-size: 20px; width: 100%; margin-bottom: 25px; font-size: 20px; padding: 10px; }
    .upperCaseEnumeration { }
    .truncated { max-height: 300px; overflow: hidden; position: relative; }
    .truncated.expanded { max-height: none; }
    .truncateButton { display: block; margin: 10px auto; padding: 10px; width: 100%; }
    .truncated:not(.expanded) + .truncateButton .collapse { display: none; }
    .truncated.expanded + .truncateButton .showAll { display: none; }
    .truncated:not(.expanded)::after { display: block; content: " "; position: absolute; bottom: 0; left: 0; height: 100px; width: 100%; background-image: linear-gradient(rgba(255,255,255,0),rgba(255,255,255,1)); }
    .cost { margin-bottom: 15px; display: inline-block; width: 100%; }
    .costList { margin: 5px 0; }
    .twoColumns .costList { column-count: 2; -moz-column-count: 2; }
    .costItem { padding: 5px; margin-bottom: 5px; }
    .costItemConditions div { opacity: 0.8; font-style: italic; padding: 5px 15px; }
    .enumeration .grayButton { text-align: left;}
    .credentialModalButton { display: block; width: 100%; max-width: 700px; margin: 10px auto; font-size: 20px; padding: 10px; }
    .costName { display: block; width: 100%; padding: 5px; }
    .costName.selected .fa-caret-right { display: none; }
    .costName:not(.selected) .fa-caret-down { display: none; }
    .costItems:not(.selected) { display: none; }


    /* Competency List */
    .dataModal { display: none; position: fixed; top: 5vh; bottom: 10vh; left: 5vw; right: 5vw; z-index: 10000; background-color: #F2F4F4; border-radius: 4px; box-shadow: 0 0 25px -2px rgba(0,0,0,0.5); padding: 40px 0 5px 0; transition: none; }
    #content .dataModal .dataModalHeader { position: absolute; top: 0; left: 0; width: 100%; height: 40px; background-color: #3D4443; border-radius: 5px 5px 0 0; } 
    #content .dataModal .dataModalContent { height: 100%; overflow: auto; padding: 15px; }
    #content .dataModal .header { color: #FFF; padding: 5px 15px; font-size: 26px; margin: 0; }
    #content .dataModal .closeButton { position: absolute; top: 5px; right: 10px; width: 25px; height: 25px; }
    #content .dataModal .closeButton .fa { margin: 0; }
    #competencyList .competencyTitle { background-color: #607171; padding: 5px 15px; margin: 25px -15px 5px -15px; color: #FFF; display: block; width: calc(100% + 30px); border-radius: 0; text-align: left; }
    #competencyList .competencyTitle:first-of-type { margin-top: 0; }
    #competencyList .competencyTitle.selected .fa-caret-right { display: none; }
    #competencyList .competencyTitle:not(.selected) .fa-caret-down { display: none; }
    #competencyList .competencyTitle .fa { margin: 0 5px; }
    #competencyList .competencyData { display: none; }
    #competencyList .competencyData.selected { display: block; }
    .competencyButton { padding: 10px; display: block; margin: 5px auto; width: 100%; }

    .competencyList li { margin-bottom: 10px; }
    .competencyList li .competencyName { text-transform: capitalize; }
    .competencyList li.hasName.hasDescription .competencyDescription { padding: 5px; font-style: italic; }
    .competencyList li.hasName .competencyUrl, .competencyList li.hasDescription .competencyUrl { padding: 0 5px; }
    .competencyFrameworkTitle { font-weight: bold; font-size: 18px; padding: 5px; }

    /* Responsive */
    @@media (max-width: 1200px) { .section; { padding: 20px 3vw; }

        #titleBox { text-align: center; }
        #titleBox, #titleBoxPlaceholder { min-height: 120px; padding: 15px calc(3vw + 120px) 15px 3vw; }
        #titleBox h1, #titleBoxPlaceholder h1 { font-size: 28px; }
        #titleBox #tools { top: 10px; right: 3vw; width: 100px; }
        #titleBox #tools .actionButton { padding: 5px; display: block; width: 100%; text-align: left; font-size: 14px; }

        #columns #dataColumn, #columns #mapColumn { display: block; width: 100%; padding: 15px 0; }

        #detailNavigation, #detailContent { display: block; width: 100%; padding: 10px 0; }
    }
    @@media (max-width: 1000px) {
        .profileTabBoxNavigation, .profileTabBoxContent { display: block; width: 100%; }
        .profileTabBoxNavigation button { display: inline-block; vertical-align: top; width: auto; margin: 2px 0; }
    }
    @@media (max-width: 800px) {
        #details .autoColumns { column-count: 1; -moz-column-count: 1; }
        .twoColumns .costList { column-count: 1; -moz-column-count: 1; }
    }
    @@media (max-width: 600px) {
        .section { padding: 15px 1vw; }

        #titleBox, #titleBoxPlaceholder { padding: 15px 1vw; min-height: 50px; }
        #titleBox h1, #titleBoxPlaceholder h1 { font-size: 20px; }
        #titleBox h2, #titleBoxPlaceholder h2 { font-size: 16px; font-weight: lighter; }
        #titleBoxPlaceholder #toolsPlaceholder { height: 32px; }
        #titleBox #tools { position: static; width: 100%; display: block; white-space: nowrap; }
        #titleBox #tools .actionButton { display: inline-block; width: calc((100% / 3) - 5px); margin: 2px 2.5px; text-align: center; }

        .organization { padding-right: 60px; }
        .organization .logo { width: 50px; height: 50px; }

        .credential { padding: 15px 10px 5px 80px; }
        .credential .typeIcon { width: 75px; height: 75px; }
    }
    @@media (max-width: 450px) {
        #dataColumn .block.withIcon, #mapColumn .block.withIcon { padding-left: 30px; background-size: 30px; }
        #dataColumn .block.withLogo .logoImage { width: 25px; }
        #titleBox #tools .actionButton { font-size: 10px; }
        #titleBoxPlaceholder #toolsPlaceholder { height: 27px; }
    }

</style>
<style type="text/css">
    .credential[data-type*=adge] .typeIcon, .withIcon[data-type*=adge] { background-image: url('@Url.Content("~/images/V2/icons/flat_badge.png")'); }
    .credential[data-type*=ertificate] .typeIcon, .withIcon[data-type*=ertificate] { background-image: url('@Url.Content("~/images/V2/icons/flat_certificate.png")'); }
    .credential[data-type*=ertification] .typeIcon, .withIcon[data-type*=ertification] { background-image: url('@Url.Content("~/images/V2/icons/flat_certification.png")'); }
    .credential[data-type*=egree] .typeIcon, .withIcon[data-type*=egree] { background-image: url('@Url.Content("~/images/V2/icons/flat_degree.png")'); }
    .credential[data-type*=aster] .typeIcon, .withIcon[data-type*=aster] { background-image: url('@Url.Content("~/images/V2/icons/flat_degree.png")'); }
    .credential[data-type*=ssociate] .typeIcon, .withIcon[data-type*=ssociate] { background-image: url('@Url.Content("~/images/V2/icons/flat_degree.png")'); }
    .credential[data-type*=achelor] .typeIcon, .withIcon[data-type*=achelor] { background-image: url('@Url.Content("~/images/V2/icons/flat_degree.png")'); }
    .credential[data-type*=iploma] .typeIcon, .withIcon[data-type*=iploma] { background-image: url('@Url.Content("~/images/V2/icons/flat_diploma.png")'); }
    .credential[data-type*=icense] .typeIcon, .withIcon[data-type*=icense] { background-image: url('@Url.Content("~/images/V2/icons/flat_license.png")'); }
    .credential[data-type*=pprentice] .typeIcon, .withIcon[data-type*=pprentice] { background-image: url('@Url.Content("~/images/V2/icons/flat_apprenticeship.png")'); }
    .credential[data-type*=ilitary] .typeIcon, .withIcon[data-type*=ilitary] { background-image: url('@Url.Content("~/images/V2/icons/flat_military.png")'); }
    .credential[data-type*=icro] .typeIcon, .withIcon[data-type*=icro] { background-image: url('@Url.Content("~/images/V2/icons/flat_micro.png")'); }
    .credential[data-type*=uality] .typeIcon, .withIcon[data-type*=uality] { background-image: url('@Url.Content("~/images/V2/icons/flat_quality.png")'); }
</style>
<style type="text/css">
    #socialMedia a { background-image: url('@Url.Content( "~/Images/Social/other.png" )'); }
    #socialMedia a[href*='twitter.com'] { background-image: url('@Url.Content( "~/Images/Social/twitter.png" )'); }
    #socialMedia a[href*='facebook.com'] { background-image: url('@Url.Content( "~/Images/Social/facebook.png" )'); }
    #socialMedia a[href*='google.com'] { background-image: url('@Url.Content( "~/Images/Social/googleplus.png" )'); }
    #socialMedia a[href*='pinterest.com'] { background-image: url('@Url.Content( "~/Images/Social/pinterest.png" )'); }
    #socialMedia a[href*='youtube.com'] { background-image: url('@Url.Content( "~/Images/Social/youtube.png" )'); }
    #socialMedia a[href*='linkedin.com'] { background-image: url('@Url.Content( "~/Images/Social/linkedin.png" )'); }
    #socialMedia a[href*='apple.com'] { background-image: url('@Url.Content( "~/Images/Social/apple.png" )'); }
    #socialMedia a[href*='yahoo.com'] { background-image: url('@Url.Content( "~/Images/Social/yahoo.png" )'); }
    #socialMedia a[href*='flickr.com'] { background-image: url('@Url.Content( "~/Images/Social/flickr.png" )'); }
    #socialMedia a[href*='instagram.com'] { background-image: url('@Url.Content( "~/Images/Social/instagram.png" )'); }
</style>


<!-- Title -->
<div class="section" id="titleBox">
    <h1>@data.Name</h1>
    @{ Organization owner = new Organization(); }
    @if ( dataType != DataTypes.ORGANIZATION )
    {
        try
        {
            owner = ( data.OrganizationRole as List<OrganizationRoleProfile> )
                .FirstOrDefault( m => m.AgentRole.Items
                    .FirstOrDefault( o => o.SchemaName == "ceterms:ownedBy" ) != null ).ActingAgent;
            <h2><a href="@Url.Content( "~/detail/organization/" + owner.Id )" target="window_orgRole">@owner.Name</a></h2>
        }
        catch { }
    }
    <div id="tools" class="inlineBlockBox">
        <button class="actionButton column" onclick="compare.addItem(@Model.Id, '@typeCode', '@data.Name');"><i class="fa fa-fw fa-copy"></i> Compare</button>
        @if ( canEditDocument )
        {
            <a class="linkButton actionButton column" href="@Url.Content( "~/editor/" + typeCode + "/" + Model.Id )" target="_blank"><i class="fa fa-fw fa-pencil"></i> Edit</a>

            if ( data.StatusId == 0 )
            {

            }
            if ( typeCode == "credential" || typeCode == "organization" || typeCode == "assessment"  || typeCode == "learningopportunity"  )
            {
            <button class="actionButton column" onclick="registerEntity('@data.Name', '@typeCode' , @Model.Id);"><i class="fa fa-cloud-upload"></i> Register</button>
                if ( credentialRegistryId.Length == 36 && AccountServices.IsUserSiteStaff()) {
                <button class="actionButton column" onclick="unRegisterEntity('@data.Name', '@typeCode', @Model.Id);" ><i class="fa fa-fw fa-trash"></i> Un-Register</button>
                }
            }
<button class="actionButton column" onclick="deleteData('@data.Name', '@typeCode', @Model.Id);" style="display:none;"><i class="fa fa-fw fa-trash"></i> Delete</button>
        }
    </div>
</div>
<div class="section" id="titleBoxPlaceholder">
    <h1>@data.Name</h1>
    @if ( owner.Id > 0 )
    {
        <h2><a>@owner.Name</a></h2>
    }
    <div id="toolsPlaceholder"></div>
</div>

<!-- Columns -->
<div class="section inlineBlockBox" id="columns">

    <!-- Data -->
    <div class="column" id="dataColumn">
        @switch ( dataType )
        {
            case DataTypes.CREDENTIAL:
            {
                var credentialType = "credential";
                try
                {
                    credentialType = dataCredential.CredentialType.Items.FirstOrDefault().SchemaName.ToLower();
                }
                catch { }
                var totalCompetencies = 0;
                try
                {
                    <div id="competencyList" class="dataModal">
                        <div class="dataModalHeader">
                        <h2 class="competencyListHeader header">Competencies</h2>
                        <button class="closeButton" onclick="hideCompetencyList()"><i class="fa fa-close"></i></button>
                        </div>
                        <div class="dataModalContent">
                        <button class="actionButton toggleAllButton">Show/Hide All</button>
                        @foreach ( var route in dataCredential.Requires )
                        {
                            <div class="route">
                                <h2>@route.ProfileName</h2>
                                @* Learning Opportunities *@
                                @foreach ( var learnOpp in route.TargetLearningOpportunity )
                                {
                                    @*try
                                    {
                                        learnOpp.TeachesCompetencies = learnOpp.TeachesCompetencies.Concat( CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( learnOpp.TeachesCompetenciesFrameworks ) ).ToList();
                                        learnOpp.RequiresCompetencies = learnOpp.RequiresCompetencies.Concat( CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( learnOpp.RequiresCompetenciesFrameworks ) ).ToList();
                                    }
                                    catch { }*@
                                    @LearningOpportunityCompetencyHierarchy( learnOpp, "h2" )
                                    CountLearningOpportunityCompetencies( learnOpp, ref totalCompetencies );
                                }
                                @* Assessments *@
                                @foreach ( var asmt in route.TargetAssessment )
                                {
                                    @*try
                                    {
                                        asmt.AssessesCompetencies = asmt.AssessesCompetencies.Concat( CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( asmt.AssessesCompetenciesFrameworks ) ).ToList();
                                        asmt.RequiresCompetencies = asmt.RequiresCompetencies.Concat( CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( asmt.RequiresCompetenciesFrameworks ) ).ToList();
                                    }
                                    catch { }*@
                                    if ( asmt.AssessesCompetencies.Count() > 0 || asmt.RequiresCompetencies.Count() > 0 || asmt.RequiresCompetenciesFrameworks.Count() > 0 || asmt.AssessesCompetenciesFrameworks.Count() > 0 ) 
                                    {
                                        @AssessmentCompetencyGroup( asmt, "h2" )
                                        totalCompetencies += asmt.RequiresCompetencies.Count() + asmt.AssessesCompetencies.Count() + asmt.RequiresCompetenciesFrameworks.SelectMany( m => m.Items ).Count() + asmt.AssessesCompetenciesFrameworks.SelectMany( m => m.Items ).Count();
                                    }
                                }
                                @* Direct Requirements *@
                                @if ( route.RequiresCompetencies.Count() > 0 || route.RequiresCompetenciesFrameworks.Count() > 0 )
                                {
                                    @ConditionsCompetencyGroup( route, "Directly Required Competencies", "h2" )
                                    totalCompetencies += route.RequiresCompetencies.Count() + route.RequiresCompetenciesFrameworks.SelectMany( m => m.Items ).Count();
                                }
                            </div>
                        }
                    </div>
                    </div>
                }
                catch { }
                if ( !string.IsNullOrWhiteSpace( dataCredential.SubjectWebpage ) )
                {
                    <a href="@data.SubjectWebpage" class="linkButton greenButton mainLink" target="_blank">Connect to this Credential <i class="fa fa-external-link"></i></a>
                }
                <div class="block withIcon" data-type="@credentialType">
                    @ShowNamedText( "About this " + title, "h2", data.Description, "description", true )
                    @Enumerate( "Credential Type", "h2", dataCredential.CredentialType, typeCode )
                    @*@Enumerate( "What it's for", "h2", dataCredential.IntendedPurpose, typeCode )*@
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_quality.png" )');">
                    <h2>Quality Assurance</h2>
                    @if ( ownerOrganizationQARoles.Count() > 0 )
                    {
                        <div class="subsection">
                            @ListQualityAssuranceRoles( "h3", "Organization", ownerOrganization.OrganizationRole_Recipient, roleCodes )
                        </div>
                    }
                    <div class="subsection">
                        @ListQualityAssuranceActions( "Quality Assurance Received", "h3", dataCredential.QualityAssuranceAction )
                        @ListQualityAssuranceRoles( "h3", "Credential", dataCredential.OrganizationRole, roleCodes )
                    </div>
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_information-badge.png" )');">
                    @if ( totalCompetencies > 0 )
                    {
                        <h2>Competencies</h2>
                        <button class="actionButton competencyButton" onclick="showCompetencyList();">View <b>@totalCompetencies</b> competencies for this Credential <i class="fa fa-arrows-alt"></i></button>
                    }
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_duration.png" )');">
                    @Durations( dataCredential.EstimatedDuration, "Estimated Time to Earn", "h2" )
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_interests.png" )');">
                    @Enumerate( "Industries", "h2", dataCredential.Industry, typeCode )
                    @Enumerate( "Occupations", "h2", dataCredential.Occupation, typeCode )
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_levels.png" )');">
                    @Enumerate( "Audience Level", "h2", dataCredential.AudienceLevelType, typeCode )
                </div>
                if ( dataCredential.EstimatedCosts.Count() > 0 )
                {
                    <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_cost.png" )');">
                        @ListCostsCompact( dataCredential.EstimatedCosts, "Estimated Costs", "h2", "" )
                    </div>
                }
                <div class="block truncated">
                    @EnumerateTextValues( "Subjects", "h2", dataCredential.Subject, typeCode )
                    @ListInheritedSubjects( "", "", dataCredential.Requires, typeCode )
                </div>
                <div class="block truncated">
                    @EnumerateTextValues( "Keyword", "h2", dataCredential.Keyword, typeCode )
                </div>
            } 
            break;
            
            case DataTypes.ORGANIZATION:
            {
                if ( !string.IsNullOrWhiteSpace( dataOrganization.SubjectWebpage ) )
                {
                    <a href="@data.SubjectWebpage" class="linkButton greenButton mainLink" target="_blank">Visit this Organization <i class="fa fa-external-link"></i></a>
                }
                <div class="block withIcon withLogo">
                    @ShowNamedText( "About this " + title, "h2", data.Description, "description", true )
                    @ShowNamedText( "Our Mission", "h2", dataOrganization.Purpose, "description", true )
                    @*@ShowTextValues( "Identification Codes", "h2", dataOrganization.IdentificationCodes, "", false, false )*@
                    @if ( HasText( dataOrganization.FoundingYear ) )
                    {
                        <div>This organization was founded in @Html.Raw( HasText( dataOrganization.FoundingMonth ) && dataOrganization.FoundingMonth != "00" ? dataOrganization.FoundingMonth + "/" + dataOrganization.FoundingYear : dataOrganization.FoundingYear )<span>.</span></div>
                    }
                    <img class="logoImage" src="@dataOrganization.ImageUrl" alt="Organization Logo" />
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_quality.png" )');">
                    <h2>Quality Assurance</h2>
                    @ListQualityAssuranceActions( "Quality Assurance Received", "h3", dataOrganization.QualityAssuranceAction )
                    @ListQualityAssuranceRoles( "h3", "Organization", dataOrganization.OrganizationRole, roleCodes )
                </div>
                <div class="block">
                    @if ( dataOrganization.OrganizationSectorType.Items.Count() > 0 || dataOrganization.OrganizationType.Items.Count() > 0 )
                    {
                        <h2>Organization Type</h2>
                        <div class="subsection enumeration">
                            @foreach ( var item in dataOrganization.OrganizationSectorType.Items )
                            {
                                <a class="linkButton grayButton" target="searchWindow" href="@Url.Content( "~/search?autosearch=true&searchType=" + typeCode + "&filters=" + dataOrganization.OrganizationSectorType.Id + "-" + item.Id )">@item.Name</a>
                            }
                            @foreach ( var item in dataOrganization.OrganizationType.Items )
                            {
                                <a class="linkButton grayButton" target="searchWindow" href="@Url.Content( "~/search?autosearch=true&searchType=" + typeCode + "&filters=" + dataOrganization.OrganizationType.Id + "-" + item.Id )">@item.Name</a>
                            }
                        </div>
                    }
                </div>
                <div class="block">
                    @Enumerate( "Services", "h2", dataOrganization.ServiceType, typeCode )
                </div>
            } 
            break;
            
            case DataTypes.ASSESSMENT:
            {
                var totalCompetencies = dataAssessment.AssessesCompetenciesFrameworks.SelectMany( m => m.Items ).Count() + dataAssessment.RequiresCompetenciesFrameworks.SelectMany( m => m.Items ).Count();
                try
                {
                    <div id="competencyList" class="dataModal">
                        <div class="dataModalHeader">
                        <h2 class="competencyListHeader header">Competencies</h2>
                        <button class="closeButton" onclick="hideCompetencyList()"><i class="fa fa-close"></i></button>
                        </div>
                        <div class="dataModalContent">
                            <button class="actionButton toggleAllButton">Show/Hide All</button>
                            @ShowCompetencyFrameworkValues( "Competencies Assessed", "h2", dataAssessment.AssessesCompetenciesFrameworks, "" )
                            @ShowCompetencyFrameworkValues( "Competencies Required", "h2", dataAssessment.RequiresCompetenciesFrameworks, "" )
                        </div>
                    </div>
                }
                catch { }
                if ( !string.IsNullOrWhiteSpace( dataAssessment.SubjectWebpage ) )
                {
                    <a href="@data.SubjectWebpage" class="linkButton greenButton mainLink" target="_blank">Connect to this Assessment <i class="fa fa-external-link"></i></a>
                }
                <div class="block">
                    @ShowNamedText( "About this " + title, "h2", data.Description, "description", true )
                    @ShowNamedText( "Identification Code", "h2", dataAssessment.CodedNotation, "", true )
                    @*@if( HasText( dataAssessment.AssessmentInformationUrl ) )
                    {
                        <a class="linkButton greenButton" href="@dataAssessment.AssessmentInformationUrl" target="_blank">Assessment Information <i class="fa fa-external-link"></i></a>
                    }*@
                </div>
                <div class="block upperCaseEnumeration">
                    @Enumerate( "Instructional Program Classification", "h2", dataAssessment.InstructionalProgramCategory, typeCode )
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_duration.png" )');">
                    @Durations( dataAssessment.EstimatedDuration, "Estimated Time to Complete", "h2" )
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_information-badge.png" )');">
                    @if ( totalCompetencies > 0 )
                    {
                        <h2>Competencies</h2>
                        <button class="actionButton competencyButton" onclick="showCompetencyList();">View <b>@totalCompetencies</b> included competencies for this Assessment</button>
                    }
                </div>
                @*<div class="block">
                    @try
                    {
                        dataAssessment.AssessesCompetencies = dataAssessment.AssessesCompetencies.Concat( CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( dataAssessment.AssessesCompetenciesFrameworks ) ).ToList();
                        dataAssessment.RequiresCompetencies = dataAssessment.RequiresCompetencies.Concat( CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( dataAssessment.RequiresCompetenciesFrameworks ) ).ToList();
                    }
                    catch { }
                    @ShowCompetencyValues( "Competencies Assessed", "h2", dataAssessment.AssessesCompetencies, "" )
                    @ShowCompetencyValues( "Competencies Required", "h2", dataAssessment.RequiresCompetencies, "" )
                    @ShowCompetencyFrameworkValues( "Competencies Assessed", "h2", dataAssessment.AssessesCompetenciesFrameworks, "" )
                    @ShowCompetencyFrameworkValues( "Competencies Required", "h2", dataAssessment.RequiresCompetenciesFrameworks, "" )
                </div>*@
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_quality.png" )');">
                    <h2>Quality Assurance</h2>
                    @if ( ownerOrganizationQARoles.Count() > 0 )
                    {
                        <div class="subsection">
                            @ListQualityAssuranceRoles( "h3", "Organization", ownerOrganization.OrganizationRole_Recipient, roleCodes )
                        </div>
                    }
                    @*<div class="subsection">
                        @ListQualityAssuranceActions( "Quality Assurance Received", "h3", dataAssessment.QualityAssuranceAction )
                        @ListQualityAssuranceRoles( "h3", "Assessment", dataAssessment.OrganizationRole, roleCodes )
                    </div>*@
                </div>
                <div class="block">
                    @ShowTextValues( "Examples", "h2", dataAssessment.ResourceUrl, "", true, true )
                </div>
                <div class="block">
                    @Enumerate( "Assessment Method", "h2", dataAssessment.AssessmentMethodType, typeCode )
                    @Enumerate( "Assessment Use Type", "h2", dataAssessment.AssessmentUseType, typeCode )
                    @Enumerate( "Assessment Delivery Type", "h2", dataAssessment.DeliveryType, typeCode )
                </div>
                @*<div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_cost.png" )');">
                    @ListCostsCompact( dataAssessment.EstimatedCost, "Estimated Costs", "h2", "" )
                </div>*@
                <div class="block truncated">
                    @EnumerateTextValues( "Subjects", "h2", dataAssessment.Subject, typeCode )
                </div>
                <div class="block truncated">
                    @EnumerateTextValues( "Keyword", "h2", dataAssessment.Keyword, typeCode )
                </div>
            } 
            break;
            
            case DataTypes.LEARNINGOPPORTUNITY:
            {
                @*try
                {
                    dataLearningOpportunity.TeachesCompetencies = dataLearningOpportunity.TeachesCompetencies.Concat( CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( dataLearningOpportunity.TeachesCompetenciesFrameworks ) ).ToList();
                    dataLearningOpportunity.RequiresCompetencies = dataLearningOpportunity.RequiresCompetencies.Concat( CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( dataLearningOpportunity.RequiresCompetenciesFrameworks ) ).ToList();
                }
                catch { }*@
                var totalCompetencies = 0;
                try
                {
                    <div id="competencyList" class="dataModal">
                        <div class="dataModalHeader">
                        <h2 class="competencyListHeader header">Competencies</h2>
                        <button class="closeButton" onclick="hideCompetencyList()"><i class="fa fa-close"></i></button>
                        </div>
                        <div class="dataModalContent">
                            <button class="actionButton toggleAllButton">Show/Hide All</button>
                            @LearningOpportunityCompetencyHierarchy( dataLearningOpportunity, "h2" )
                            @{ CountLearningOpportunityCompetencies( dataLearningOpportunity, ref totalCompetencies ); }
                        </div>
                    </div>
                }
                catch { }
                if ( !string.IsNullOrWhiteSpace( dataLearningOpportunity.SubjectWebpage ) )
                {
                    <a href="@data.SubjectWebpage" class="linkButton greenButton mainLink" target="_blank">Connect to this Opportunity <i class="fa fa-external-link"></i></a>
                }
                <div class="block">
                    @ShowNamedText( "About this " + title, "h2", data.Description, "description", true )
                    @ShowNamedText( "Identification Code", "h2", dataLearningOpportunity.CodedNotation, "", false )
                    @*@ShowTextValues( "Learning Resources", "h2", dataLearningOpportunity.LearningResourceUrls, "", true, true )*@
                </div>
                <div class="block upperCaseEnumeration">
                    @Enumerate( "Instructional Program Classification", "h2", dataLearningOpportunity.InstructionalProgramCategory, typeCode )
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_duration.png" )');">
                    @Durations( dataLearningOpportunity.EstimatedDuration, "Estimated Time to Complete", "h2" )
                </div>
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_information-badge.png" )');">
                    @if ( totalCompetencies > 0 )
                    {
                        <h2>Competencies</h2>
                        <button class="actionButton competencyButton" onclick="showCompetencyList();">View <b>@totalCompetencies</b> included competencies for this Learning Opportunity</button>
                    }
                </div>
                @*<div class="block">
                    @ShowCompetencyValues( "Competencies Taught", "h2", dataLearningOpportunity.TeachesCompetencies, "" )
                    @ShowCompetencyValues( "Competencies Required", "h2", dataLearningOpportunity.RequiresCompetencies, "" )
                    @ShowCompetencyFrameworkValues( "Competencies Taught", "h2", dataLearningOpportunity.TeachesCompetenciesFrameworks, "" )
                    @ShowCompetencyFrameworkValues( "Competencies Required", "h2", dataLearningOpportunity.RequiresCompetenciesFrameworks, "" )
                </div>*@
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_quality.png" )');">
                    <h2>Quality Assurance</h2>
                    @if ( ownerOrganizationQARoles.Count() > 0 )
                    {
                        <div class="subsection">
                            @ListQualityAssuranceRoles( "h3", "Organization", ownerOrganization.OrganizationRole_Recipient, roleCodes )
                        </div>
                    }
                    @*<div class="subsection">
                        @ListQualityAssuranceActions( "Quality Assurance Received", "h3", dataLearningOpportunity.QualityAssuranceAction )
                        @ListQualityAssuranceRoles( "h3", "Learning Opportunity", dataLearningOpportunity.OrganizationRole, roleCodes )
                    </div>*@
                </div>
                @*<div class="block">
                    @ShowTextValues( "References", "h2", dataLearningOpportunity.ResourceUrls, "", true, true )
                </div>*@
                <div class="block">
                    @Enumerate( "Learning Opportunity Delivery Type", "h2", dataLearningOpportunity.DeliveryType, typeCode )
                </div>
                @*<div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_cost.png" )');">
                    @ListCostsCompact( dataLearningOpportunity.EstimatedCost, "Estimated Costs", "h2", "" )
                </div>*@
                <div class="block truncated">
                    @EnumerateTextValues( "Subjects", "h2", dataLearningOpportunity.Subject, typeCode )
                </div>
                <div class="block truncated">
                    @EnumerateTextValues( "Keyword", "h2", dataLearningOpportunity.Keyword, typeCode )
                </div>
            } 
            break;
            
            default: break;
        }

    </div>

    <!-- Map -->
    <div class="column" id="mapColumn">

        @switch ( dataType )
        {
            case DataTypes.CREDENTIAL:
            {
                if ( dataCredential.Addresses.Count() > 0 ) {
                    <div id="mainMapBox"></div>
                    <div class="block truncated">
                        @ListAddresses( dataCredential.Addresses, "Available At", "h2" )
                    </div>
                }
                if ( !string.IsNullOrWhiteSpace( dataCredential.AvailableOnlineAt ) || !string.IsNullOrWhiteSpace( dataCredential.AvailabilityListing ) )
                {
                    <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_connect.png" )');">
                        <h2>Available Online</h2>
                        <a class="linkButton greenButton availableOnlineAt" href="@dataCredential.AvailableOnlineAt" target="_blank">More Information <i class="fa fa-external-link"></i></a>
                        <a class="linkButton greenButton availabilityListing" href="@dataCredential.AvailabilityListing" target="_blank">View Locations <i class="fa fa-external-link"></i></a>
                    </div>
                }
                if ( dataCredential.OrganizationRole.Where(m => m.AgentRole.Items.Where( n => !n.IsSpecialValue ).Count() > 0).Count() > 0 )
                {
                    <div class="block">
                        <h2>Organization Roles</h2>
                        @ListReceivedRoles( title, dataCredential.OrganizationRole, roleCodes )
                    </div>
                }
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_map.png" )');">
                    @JurisdictionMerged( "Applicable Jurisdictions", "h2", "This credential can be used in the following places:", "This credential can be used online.", "This credential can be used anywhere in the world.", "This credential can be used in these places:", "This credential cannot be used in these places:", dataCredential.Jurisdiction, false )
                </div>
                            }
            break;
                
            case DataTypes.ORGANIZATION:
            {
                if ( dataOrganization.Addresses.Count() > 0 )
                {
                    <div id="mainMapBox"></div>
                    <div class="block truncated">
                        @ListAddresses( dataOrganization.Addresses, "Available At", "h2" )
                    </div>
                }
                    
                if ( dataOrganization.SocialMediaPages.Count() > 0 )
                {
                    <div class="block">
                        <h2>Social Media</h2>
                        <div id="socialMedia">
                            @foreach ( var item in dataOrganization.SocialMediaPages )
                            {
                                <a href="@item.TextValue" title="@item.TextValue" target="_blank"></a>
                            }
                        </div>
                    </div>
                }

                if ( !string.IsNullOrWhiteSpace( dataOrganization.AvailabilityListing ) )
                {
                    <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_connect.png" )');">
                        <h2>Available Online</h2>
                        <a class="linkButton greenButton availabilityListing" href="@dataOrganization.AvailabilityListing" target="_blank">View Locations <i class="fa fa-external-link"></i></a>
                    </div>
                }
                
                if ( dataOrganization.OrganizationRole.Where(m => m.AgentRole.Items.Where( n => !n.IsSpecialValue ).Count() > 0).Count() > 0 )
                {
                    <div class="block truncated">
                        <h2>Organization Roles</h2>
                        @ListReceivedRoles( title, dataOrganization.OrganizationRole_Recipient, roleCodes )
                    </div>
                }
                    
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_map.png" )');">
                    @JurisdictionMerged( "Applicable Jurisdictions", "h2", "This organization has a notable presence in these places:", "This organization has a significant online presence.", "This organization operates worldwide.", "This organization has a notable presence in these places:", "This organization does <i>not</i> serve these places:", dataOrganization.Jurisdiction )
                </div>
            }
            break;
                
            case DataTypes.ASSESSMENT:
            {
                if ( dataAssessment.Addresses.Count() > 0 )
                {
                    <div id="mainMapBox"></div>
                    <div class="block truncated">
                        @ListAddresses( dataAssessment.Addresses, "Available At", "h2" )
                    </div>
                }
                if ( !string.IsNullOrWhiteSpace( dataAssessment.AvailableOnlineAt ) || !string.IsNullOrWhiteSpace( dataAssessment.AvailabilityListing ) )
                {
                    <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_connect.png" )');">
                        <h2>Available Online</h2>
                        <a class="linkButton greenButton availableOnlineAt" href="@dataAssessment.AvailableOnlineAt" target="_blank">More Information <i class="fa fa-external-link"></i></a>
                        <a class="linkButton greenButton availabilityListing" href="@dataAssessment.AvailabilityListing" target="_blank">View Locations <i class="fa fa-external-link"></i></a>
                    </div>
                }
                @*if ( dataAssessment.OrganizationRole.Where( m => m.AgentRole.Items.Where( n => !n.IsSpecialValue ).Count() > 0 ).Count() > 0 )
                {
                    <div class="block">
                        <h2>Organization Roles</h2>
                        @ListReceivedRoles( title, dataAssessment.OrganizationRole, roleCodes )
                    </div>
                }*@
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_map.png" )');">
                    @JurisdictionMerged( "Applicable Jurisdictions", "h2", "This assessment is acknowledged in the following places:", "This assessment is acknowledged online.", "This assessment is acknowledged across the entire world.", "This assessment is acknowledged in these places:", "This assessment is not acknowledged in these places:", dataAssessment.Jurisdiction )
                </div>
            }
            break;
                
            case DataTypes.LEARNINGOPPORTUNITY:
            {
                if ( dataLearningOpportunity.Addresses.Count() > 0 )
                {
                    <div id="mainMapBox"></div>
                    <div class="block truncated">
                        @ListAddresses( dataLearningOpportunity.Addresses, "Available At", "h2" )
                    </div>
                }
                if ( !string.IsNullOrWhiteSpace( dataLearningOpportunity.AvailableOnlineAt ) || !string.IsNullOrWhiteSpace( dataLearningOpportunity.AvailabilityListing ) )
                {
                    <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_connect.png" )');">
                        <h2>Available Online</h2>
                        <a class="linkButton greenButton availableOnlineAt" href="@dataLearningOpportunity.AvailableOnlineAt" target="_blank">More Information <i class="fa fa-external-link"></i></a>
                        <a class="linkButton greenButton availabilityListing" href="@dataLearningOpportunity.AvailabilityListing" target="_blank">View Locations <i class="fa fa-external-link"></i></a>
                    </div>
                }
                @*if ( dataLearningOpportunity.OrganizationRole.Where( m => m.AgentRole.Items.Where( n => !n.IsSpecialValue ).Count() > 0 ).Count() > 0 )
                {
                    <div class="block">
                        <h2>Organization Roles</h2>
                        @ListReceivedRoles( title, dataLearningOpportunity.OrganizationRole, roleCodes )
                    </div>
                }*@
                <div class="block withIcon" style="background-image: url('@Url.Content( "~/images/v2/icons/flat_map.png" )');">
                    @JurisdictionMerged( "Applicable Jurisdictions", "h2", "This learning opportunity is acknowledged in the following places:", "This learning opportunity is acknowledged online.", "This learning opportunity is acknowledged across the entire world.", "This learning opportunity is acknowledged in these places:", "This learning opportunity is not acknowledged in these places:", dataLearningOpportunity.Jurisdiction )
                </div>
            }
            break;
                
            default: break;
        }
    </div>

</div>

<!-- Details -->
<div class="section" id="details">
        @switch ( dataType )
        {
            case DataTypes.CREDENTIAL:
                {
                    var partOfCredentials = dataCredential.IsPartOf.Where( m => m.Id != 0 ).ToList();
                    var embeddedCredentials = dataCredential.EmbeddedCredentials.Where( m => m.Id != 0 ).ToList();
                    var requiresCredentials = dataCredential.Requires.SelectMany( m => m.RequiredCredential ).Where( m => m.Id != 0 ).ToList();
                    var recommendsCredentials = dataCredential.Recommends.SelectMany( m => m.RequiredCredential ).Where( m => m.Id != 0 ).ToList();

                    //var isRequiredForCredentials = dataCredential.IsRequiredFor.SelectMany( m => m.RequiredCredential ).Where( m => m.Id != 0 ).ToList();
                    //var isRecommendedForCredentials = dataCredential.IsRecommendedFor.SelectMany( m => m.RequiredCredential ).Where( m => m.Id != 0 ).ToList();
                    //var isAdvancedStandingForCredentials = dataCredential.AdvancedStandingFor.SelectMany( m => m.RequiredCredential ).Where( m => m.Id != 0 ).ToList();
                    //var advancedStandingFromCredentials = dataCredential.AdvancedStandingFrom.SelectMany( m => m.RequiredCredential ).Where( m => m.Id != 0 ).ToList();
                    //var isPreparationForCredentials = dataCredential.IsPreparationFor.SelectMany( m => m.RequiredCredential ).Where( m => m.Id != 0 ).ToList();
                    //var preparationFromCredentials = dataCredential.PreparationFrom.SelectMany( m => m.RequiredCredential ).Where( m => m.Id != 0 ).ToList();

                    var totalConnections = partOfCredentials.Count() + embeddedCredentials.Count() + requiresCredentials.Count() + recommendsCredentials.Count() ;
                    //+isRequiredForCredentials.Count() + isRecommendedForCredentials.Count() + isAdvancedStandingForCredentials.Count() + advancedStandingFromCredentials.Count() + isPreparationForCredentials.Count() + preparationFromCredentials.Count()


                    @DetailsButton( "Credential Connections", "credentialConnections", totalConnections )
                <div class="detailTab" data-detailName="credentialConnections">
                    <h2 class="detailTabHeader">Credential Connections</h2>
                    <p class="guidance">This credential has connections to the following credentials:</p>
                    @ListCredentialsModal( "Requires Credentials", "Requires", "h2", "connections_requires", requiresCredentials, "This credential requires the following credential(s). Check the Requirements section for additional requirements." )
                    @ListCredentialsModal( "Recommends Credentials", "Recommends", "h2", "connections_recommends", recommendsCredentials, "This credential recommends attaining the following credential(s) first:" )
                    @ListCredentialsModal( "Included With Credentials", "Included With", "h2", "connections_partOf", partOfCredentials, "This credential is a part of the following credential(s):" )
                    @ListCredentialsModal( "Included Credentials", "Includes", "h2", "connections_embedded", embeddedCredentials, "This credential includes the following credential(s) when it is attained:" )
                    @*@ListCredentialsModal( "Required For Credentials", "Required For", "h2", "connections_requiredFor", isRequiredForCredentials, "This credential is a requirement for the following credential(s):" )
                    @ListCredentialsModal( "Recommended For Credentials", "Prepares For", "h2", "connections_recommendedFor", isRecommendedForCredentials, "This credential helps prepare you to attain the following credential(s):" )
                    @ListCredentialsModal( "Advanced Standing For Credentials", "Advanced Standing For", "h2", "connections_isAdvancedStandingFor", isAdvancedStandingForCredentials, "This credential grants advanced standing in attaining the following credential(s):" )
                    @ListCredentialsModal( "Advanced Standing From Credentials", "Advanced Standing From", "h2", "connections_advancedStandingFrom", advancedStandingFromCredentials, "This credential receives advanced standing from the following credential(s):" )
                    @ListCredentialsModal( "Prepares For Credentials", "Prepares For", "h2", "connections_isPreparationFor", isPreparationForCredentials, "This credential prepares for the following credential(s):" )
                    @ListCredentialsModal( "Preparation From Credentials", "Preparation From", "h2", "connections_preparationFrom", preparationFromCredentials, "This credential receives preparation from the following credential(s):" )*@
                </div>
            
                @*@DetailsButton( "Included Credentials", "embeddedCredentials", dataCredential.EmbeddedCredentials.Count() )
                <div class="detailTab" data-detailName="embeddedCredentials">
                    <h2 class="detailTabHeader">Included Credentials</h2>
                    @ListCredentials( "h3", dataCredential.EmbeddedCredentials, true )
                </div>
                *@
            
                @DetailsButton( "Requirements", "requirements", dataCredential.Requires.Count() )
                <div class="detailTab" data-detailName="requirements">
                    <h2 class="detailTabHeader">Requirements</h2>
                    @ListConditions( dataCredential.Requires, "Requirements", ConditionProfileTypes.REQUIRES )
                </div>
            
                @DetailsButton( "Recommendations", "recommendations", dataCredential.Recommends.Count() )
                <div class="detailTab" data-detailName="recommendations">
                    <h2 class="detailTabHeader">Recommendations</h2>
                    @ListConditions( dataCredential.Recommends, "Recommendations", ConditionProfileTypes.RECOMMENDS )
                </div>
            
                @*@DetailsButton("Advanced Standing From", "advancedStandingFrom", dataCredential.AdvancedStandingFrom.Count() )
                <div class="detailTab" data-detailName="advancedStandingFrom">
                    <h2 class="detailTabHeader">Advanced Standing From</h2>
                    @ListConditions( dataCredential.AdvancedStandingFrom, "Advanced Standing From", ConditionProfileTypes.ADVANCEDSTANDINGFROM )
                </div>
            
                @DetailsButton("Preparation From", "preparationFrom", dataCredential.PreparationFrom.Count() )
                <div class="detailTab" data-detailName="preparationFrom">
                    <h2 class="detailTabHeader">Preparation From</h2>
                    @ListConditions( dataCredential.PreparationFrom, "Preparation From", ConditionProfileTypes.PREPARATIONFROM )
                </div>*@
            
                @*@DetailsButton( "Required For", "requiredFor", dataCredential.IsRequiredFor.Count() )
                <div class="detailTab" data-detailName="requiredFor">
                    <h2 class="detailTabHeader">Required For</h2>
                    @ListConditions( dataCredential.IsRequiredFor, "Required For", ConditionProfileTypes.ISREQUIREDFOR )
                </div>
            
                @DetailsButton( "Recommended For", "recommendedFor", dataCredential.IsRecommendedFor.Count() )
                <div class="detailTab" data-detailName="recommendedFor">
                    <h2 class="detailTabHeader">Recommended For</h2>
                    @ListConditions( dataCredential.IsRecommendedFor, "Recommended For", ConditionProfileTypes.ISRECOMMENDEDFOR )
                </div>*@
            
                @*@DetailsButton( "Advanced Standing For", "advancedStandingFor", dataCredential.AdvancedStandingFor.Count() )
                <div class="detailTab" data-detailName="advancedStandingFor">
                    <h2 class="detailTabHeader">Advanced Standing For</h2>
                    @ListConditions( dataCredential.AdvancedStandingFor, "Advanced Standing For", ConditionProfileTypes.ISADVANCEDSTANDINGFOR)
                </div>
            
                @DetailsButton( "Preparation For", "preparationFor", dataCredential.IsPreparationFor.Count() )
                <div class="detailTab" data-detailName="preparationFor">
                    <h2 class="detailTabHeader">Preparation For</h2>
                    @ListConditions( dataCredential.IsPreparationFor, "Preparation For", ConditionProfileTypes.ISPREPARATIONFOR )
                </div>*@
            
                @DetailsButton( "Renewal Terms", "renewal", dataCredential.Renewal.Count() )
                <div class="detailTab" data-detailName="renewal">
                    <h2 class="detailTabHeader">Renewal</h2>
                    @ListConditions( dataCredential.Renewal, "Renewal Terms", ConditionProfileTypes.RENEWAL )
                </div>
            
                @DetailsButton( "Revocation Terms", "revocation", dataCredential.Revocation.Count() )
                <div class="detailTab" data-detailName="revocation">
                    <h2 class="detailTabHeader">Revocation Terms</h2>
                    @foreach ( var terms in dataCredential.Revocation )
                    {
                        <div class="profile revocation">
                            <h3 class="detailProfileHeader">@terms.ProfileName</h3>
                            @if ( HasText( terms.DateEffective ) )
                            {

                                <div class="date">As of @terms.DateEffective</div>
                            }

                            <div class="autoColumns">
                                <div class="autoColumnItem">
                                    @ShowNamedText( "Description", "", terms.Description, "", true )
                                    @*@ShowTextValues( "", "", terms.RevocationItems, "", false, false )*@
                                    @if( !string.IsNullOrWhiteSpace(terms.RevocationCriteriaUrl ) )
                                    {
                                        <a class="linkButton greenButton" href="@terms.RevocationCriteriaUrl" target="_blank">Revocation Criteria  <i class="fa fa-external-link"></i></a>
                                    }
                                </div>
                                @*<div class="autoColumnItem">
                                    @Enumerate( "Revocation Criteria", "h4", terms.RevocationCriteriaType, "credential" )
                                </div>*@
                                @*<div class="autoColumnItem">
                                    @ShowTextValues("References", "h4", terms.RevocationResourceUrl, "", true, true )
                                </div>*@
                                <div class="autoColumnItem">
                                    @JurisdictionMerged( "Applicable Jurisdiction", "h4", "These terms of revocation apply in the following places:", "", "", "", "", terms.Jurisdiction )
                                </div>
                            </div>

                        </div>
                    }
                </div>

            
                @*@DetailsButton( "Processes", "processProfile", dataCredential.CredentialProcess.Count() )
                <div class="detailTab" data-detailName="processProfile">
                    <h2 class="detailTabHeader">Credential Processes</h2>
                    @ListProcesses( dataCredential.CredentialProcess, typeCode )
                </div>*@
            
                if ( canEditDocument && dataCredential.CredentialRegistryId != null)
                {
                    @DetailsButton( "Registry Information", "registryInformation", 1 )
                    <div class="detailTab" data-detailname="registryInformation">
                        <h2 class="detailTabHeader">Credential Registry Information</h2>
                        @if ( dataCredential.CredentialRegistryId != null) {
                            var link = string.Format(metadataRegistryUrl, @dataCredential.CredentialRegistryId);

                            <p><a class="linkButton grayButton" target="crLink" href="@Url.Content( string.Format(metadataRegistryUrl, dataCredential.CredentialRegistryId) )">View in Registry</a></p>
                        }

                    </div>
                }


                @DetailsButton( "Raw Metadata", "rawMetadata", 1 )
                <div class="detailTab" data-detailName="rawMetadata">
                    <h2 class="detailTabHeader">Raw Metadata</h2>
                    <div class="rawData" id="rawMetadata"></div>
                </div>
            }
            break;

            case DataTypes.ORGANIZATION:
            {
                @DetailsButton( "Credentials", "createdCredentials", dataOrganization.CreatedCredentials.Count() )
                <div class="detailTab" data-detailName="createdCredentials">
                    <h2 class="detailTabHeader">Credentials</h2>
                    @ListCredentials( "h3", dataOrganization.CreatedCredentials, true )
                </div>

                @DetailsButton( "Quality Assurance Recipients", "qualityAssuranceRecipients", dataOrganization.QualityAssuranceActor.Count() )
                <div class="detailTab" data-detailName="qualityAssuranceRecipients">
                    <h2 class="detailTabHeader">Quality Assurance Recipients</h2>
                    @try
                    {
                        foreach ( var item in dataOrganization.QualityAssuranceActor )
                        {
                            <h3>This item is @roleCodes.Items.FirstOrDefault(m => m.CodeId == item.RoleTypeId).Name.ToLower() by this organization with the <a href="@Url.Content( "~/detail/credential/" + item.IssuedCredential.Id )" target="_blank">@item.IssuedCredential.Name</a> credential.</h3>
                            @ListCredentials( "h4", new List<Credential>() { item.TargetCredential ?? new Credential() }, false )
                            @ListOrganizations( "h4", new List<Organization>() { item.TargetOrganization ?? new Organization() }, false )
                            @ListAssessments( "h4", new List<AssessmentProfile>() { item.TargetAssessment ?? new AssessmentProfile() } )
                            @ListLearningOpportunities( "h4", new List<LearningOpportunityProfile>() { item.TargetLearningOpportunity ?? new LearningOpportunityProfile() } )
                        }
                        @*
                        foreach ( var qaType in roleCodes.Items )
                        {
                            var items = dataOrganization.QualityAssuranceActor.Where( m => m.RoleTypeId == qaType.CodeId ).ToList();
                            if ( items.Count() > 0 )
                            {
                                <h3>These items are @qaType.Name.ToLower() this organization:</h3>
                                @ListCredentials( "h4", items.Where( m => m.TargetCredential != null ).Select( m => m.TargetCredential ).ToList(), false )
                                @ListOrganizations( "h4", items.Where( m => m.TargetOrganization != null ).Select( m => m.TargetOrganization ).ToList(), false )
                                @ListAssessments( "h4", items.Where( m => m.TargetAssessment != null ).Select( m => m.TargetAssessment ).ToList() )
                                @ListLearningOpportunities( "h4", items.Where( m => m.TargetLearningOpportunity != null ).Select( m => m.TargetLearningOpportunity ).ToList() )
                            }
                        }
                        *@
                    }
                    catch { } 
                </div>
            
                @DetailsButton( "Verification Services", "verification", dataOrganization.VerificationServiceProfiles.Count() )
                <div class="detailTab" data-detailName="verification">
                    <h2 class="detailTabHeader">Verification Services</h2>
                    @foreach ( var service in dataOrganization.VerificationServiceProfiles )
                    {
                        <div class="profile verificationServiceProfile">
                            <h3>@service.ProfileName</h3>
                            <div class="autoColumns">
                                <div class="autoColumnItem">
                                    @ShowNamedText( "Description", "", service.Description, "", true )
                                    @ShowNamedText( "Holder Must Authorize", "", "The holder of the credential " + ( service.HolderMustAuthorize ? "must" : "does not need to" ) + " authorize this service.", "", false )
                                    @if( HasText( service.VerificationServiceUrl ) )
                                    {
                                        <a class="linkButton greenButton" href="@service.VerificationServiceUrl">Verification Service <i class="fa fa-external-link"></i></a>
                                    }
                                    @Enumerate( "Claim Type(s)", "h4", service.ClaimType, typeCode )
                                </div>
                                <div class="autoColumnItem">
                                    @JurisdictionMerged( "Applicable Jurisdiction(s)", "h4", "These services are available in the following places:", "This service is available online.", "This service is available globally.", "This service is available in these places:", "This service is <i>not</i> available in these places:", service.Jurisdiction )
                                </div>
                                <div class="autoColumnItem">
                                    @ListCredentials( "Applicable Credential", new List<Credential>() { CredentialServices.GetBasicCredential( service.TargetCredentialId ) }, true )
                                </div>
                                <div class="autoColumnItem">
                                    @ListCostsCompact( service.EstimatedCost, "Service Costs", "h4", "" )
                                </div>
                            </div>
                        </div>
                    }
                </div>
            
                @DetailsButton( "Departments & Subsidiaries", "departmentSubsidiary", dataOrganization.OrganizationRole_Dept.Count() + dataOrganization.OrganizationRole_Subsidiary.Count() )
                <div class="detailTab" data-detailName="departmentSubsidiary">
                    @if ( dataOrganization.OrganizationRole_Dept.Count() > 0 )
                    {
                        <h2>Departments</h2>
                        @ListOrganizations( "h3", dataOrganization.OrganizationRole_Dept.Select( m => m.ActingAgent ).ToList(), true )
                    }
                    @if ( dataOrganization.OrganizationRole_Subsidiary.Count() > 0 )
                    {
                        <h2>Subsidiaries</h2>
                        @ListOrganizations( "h3", dataOrganization.OrganizationRole_Subsidiary.Select( m => m.ActingAgent ).ToList(), true )
                    }
                </div>

                if ( canEditDocument && dataOrganization.CredentialRegistryId != null)
                {
                    @DetailsButton( "Registry Information", "registryInformation", 1 )
                    <div class="detailTab" data-detailname="registryInformation">
                        <h2 class="detailTabHeader">Credential Registry Information</h2>
                        @if ( dataOrganization.CredentialRegistryId != null){
                        <p><a class="linkButton grayButton" target="crLink" href="@Url.Content( string.Format(metadataRegistryUrl, @dataOrganization.CredentialRegistryId) )">View in Registry</a></p>
                        }

                    </div>
                }
                @DetailsButton( "Raw Metadata", "rawMetadata", 1 )
                <div class="detailTab" data-detailName="rawMetadata">
                    <h2 class="detailTabHeader">Raw Metadata</h2>
                    <div class="rawData" id="rawMetadata"></div>
                </div>

            }
            break;
                
            case DataTypes.ASSESSMENT:
            {
                @*@DetailsButton( "Requirements", "requirements", dataAssessment.Requires.Count() )
                <div class="detailTab" data-detailName="requirements">
                    <h2 class="detailTabHeader">Requirements</h2>
                    @ListConditions( dataAssessment.Requires, "Requirements", ConditionProfileTypes.REQUIRES )
                </div>
            
                @DetailsButton( "Recommendations", "recommendations", dataAssessment.Recommends.Count() )
                <div class="detailTab" data-detailName="recommendations">
                    <h2 class="detailTabHeader">Recommendations</h2>
                    @ListConditions( dataAssessment.Recommends, "Recommendations", ConditionProfileTypes.RECOMMENDS )
                </div>*@
            
                @DetailsButton( "Credentials", "credentials", dataAssessment.IsPartOfConditionProfile.Count() )
                <div class="detailTab" data-detailName="credentials">
                    <h2 class="detailTabHeader">Credentials</h2>
                    <p class="guidance">This assessment is known to be a requirement for the following item(s):</p>
                    @*@ListCredentialsById( "h3", dataAssessment.IsPartOfConditionProfile.Select(m => m.ParentId ).ToList(), false )*@
                    @ListCredentials( "h3", dataAssessment.IsPartOfConditionProfile.Select( m => m.ParentCredential ).ToList(), true )
                    @ListAssessments( "h3", dataAssessment.IsPartOfConditionProfile.Select( m => m.ParentAssessment ).ToList() )
                    @ListLearningOpportunities( "h3", dataAssessment.IsPartOfConditionProfile.Select( m => m.ParentLearningOpportunity ).ToList() )
                </div>

                @*@DetailsButton( "Processes", "processProfile", dataAssessment.AssessmentProcess.Count() )
                <div class="detailTab" data-detailname="processProfile">
                    <h2 class="detailTabHeader">Assessment Processes</h2>
                    @ListProcesses( dataAssessment.AssessmentProcess, typeCode )
                </div>*@

            if ( canEditDocument && dataAssessment.CredentialRegistryId != null)
                {
                    @DetailsButton( "Registry Information", "registryInformation", 1 )
                    <div class="detailTab" data-detailname="registryInformation">
                        <h2 class="detailTabHeader">Credential Registry Information</h2>
                        @if ( dataAssessment.CredentialRegistryId != null){
                            <p><a class="linkButton grayButton" target="crLink" href="@Url.Content(string.Format(metadataRegistryUrl, dataAssessment.CredentialRegistryId) )">View in Registry</a> </p>
                         }
                    </div>
                }
                
                @DetailsButton( "Raw Metadata", "rawMetadata", 1 )
                <div class="detailTab" data-detailName="rawMetadata">
                    <h2 class="detailTabHeader">Raw Metadata</h2>
                    <div class="rawData" id="rawMetadata"></div>
                </div>
            }
            break;
                
            case DataTypes.LEARNINGOPPORTUNITY:
            {
                @DetailsButton( "Included Learning Opportunities", "embeddedLearning", dataLearningOpportunity.HasPart.Count() )
                <div class="detailTab" data-detailName="embeddedLearning">
                    <h2>Included Learning Opportunities</h2>
                    @ListLearningOpportunities( "h3", dataLearningOpportunity.HasPart )
                </div>
            
                @*@DetailsButton( "Requirements", "requirements", dataLearningOpportunity.Requires.Count() )
                <div class="detailTab" data-detailName="requirements">
                    <h2 class="detailTabHeader">Requirements</h2>
                    @ListConditions( dataLearningOpportunity.Requires, "Requirements", ConditionProfileTypes.REQUIRES )
                </div>*@
            
                @*@DetailsButton( "Recommendations", "recommendations", dataLearningOpportunity.Recommends.Count() )
                <div class="detailTab" data-detailName="recommendations">
                    <h2 class="detailTabHeader">Recommendations</h2>
                    @ListConditions( dataLearningOpportunity.Recommends, "Recommendations", ConditionProfileTypes.RECOMMENDS )
                </div>*@
            
                @DetailsButton( "Credentials", "credentials", dataLearningOpportunity.IsPartOfConditionProfile.Count() )
                <div class="detailTab" data-detailName="credentials">
                    <h2 class="detailTabHeader">Credentials</h2>
                    <p class="guidance">This learning opportunity is known to be a requirement for the following item(s):</p>
                    @*@ListCredentialsById( "h3", dataLearningOpportunity.IsPartOfConditionProfile.Select( m => m.ParentId ).ToList(), false )*@
                    @ListCredentials( "h3", dataLearningOpportunity.IsPartOfConditionProfile.Select( m => m.ParentCredential ).ToList(), true )
                    @ListAssessments( "h3", dataLearningOpportunity.IsPartOfConditionProfile.Select( m => m.ParentAssessment ).ToList() )
                    @ListLearningOpportunities( "h3", dataLearningOpportunity.IsPartOfConditionProfile.Select( m => m.ParentLearningOpportunity ).ToList() )
                </div>
            
                @*@DetailsButton( "Processes", "processProfile", dataLearningOpportunity.LearningOpportunityProcess.Count() )
                <div class="detailTab" data-detailName="processProfile">
                    <h2 class="detailTabHeader">Learning Opportunity Processes</h2>
                    @ListProcesses( dataLearningOpportunity.LearningOpportunityProcess, typeCode )
                </div>*@


                if ( canEditDocument && dataLearningOpportunity.CredentialRegistryId != null)
                {
                    @DetailsButton( "Registry Information", "registryInformation", 1 )
                    <div class="detailTab" data-detailname="registryInformation">
                        <h2 class="detailTabHeader">Credential Registry Information</h2>
                        @if ( dataLearningOpportunity.CredentialRegistryId != null){
                            <p><a class="linkButton grayButton" target="crLink" href="@Url.Content(string.Format(metadataRegistryUrl, dataLearningOpportunity.CredentialRegistryId) )">View in Registry</a> </p>
                         }
                    </div>
                }

                @DetailsButton( "Raw Metadata", "rawMetadata", 1 )
                <div class="detailTab" data-detailName="rawMetadata">
                    <h2 class="detailTabHeader">Raw Metadata</h2>
                    <div class="rawData" id="rawMetadata"></div>
                </div>
            }
            break;
                
            default: break;
        }
</div>

<div id="waitWrapper">
    <div id="wait"><i id="waitSpinner" class="fa fa-spin fa-spinner"></i><div id="waitTitle">Working...</div></div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=@googleMapsKey&callback=setupMaps"></script>
