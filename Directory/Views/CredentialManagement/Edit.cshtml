@model Models.Common.Credential
@using Models;
@using Models.Common;
@using Models.Search;
@using CTIServices;
@{
	ViewBag.Title = "Editing Credential";
	var enumServices = new EnumerationServices();
    var allOrganizationsList = OrganizationServices.QuickSearch();

    //ViewBag.GetOrgs = true;
    //ViewBag.GetQAOrgs = true;

    var activeSection = string.IsNullOrWhiteSpace( ViewBag.ActiveSection ) ? "basic" : ViewBag.ActiveSection;
	var tabs = new List<dynamic>() {
			new { name = "basic", title = "Basic Information", tabs = new List<string>() { "Name", "Description", "AlternateName", "Url", "CreatorOrganizationId", "OwnerOrganizationId", "ImageUrl", "DateEffective", "EstimatedTimeToEarn", "Region", "Jurisdiction", "Purpose", "CredentialType", "CredentialLevel", "Version", "LatestVersionUrl", "ReplacesVersionUrl" } },
			new { name = "organizationRole", title = "Organization Roles", tabs = new List<string>() { "OrganizationRole" } },
			new { name = "naics", title = "Industries", tabs = new List<string>() { "Industry" } },
			new { name = "soc", title = "Occupations", tabs = new List<string>() { "Occupation" } },
			new { name = "requires", title = "Requirements", tabs = new List<string>() { "Requires" } },
			new { name = "recommends", title = "Recommendations", tabs = new List<string>() { "Recommends" } },
			new { name = "isrequiredfor", title = "Post-Award Credential Connections (Requirements For)", tabs = new List<string>() { "IsRequiredFor" } },
            new { name = "isrecommendedfor", title = "Post-Award Credential Connections (Recommended For)", tabs = new List<string>() { "IsRecommendedFor" } },
			new { name = "renew", title = "Renewal", tabs = new List<string>() { "Renewal" } },
			new { name = "remove", title = "Revocation", tabs = new List<string>() { "Revocation" } },
			new { name = "qualityRole", title = "Quality Assurance Actions", tabs = new List<string>() { "QualityAssuranceAction" } },
            //new { name = "process", title = "Processes", tabs = new List<string>() { "CredentialProcess" } },
            //new { name = "earnings", title = "Earnings", tabs = new List<string>() { "Earnings" } },
            //new { name = "outcomes", title = "Outcomes and Statistics", tabs = new List<string>() { "EmploymentOutcome", "Holders" } },
	};

}

@Html.Partial( "~/Views/Shared/Management/_EditorCore.cshtml", null, new ViewDataDictionary() { { "editorTabs", tabs }, { "activeSection", activeSection } } )

@Scripts.Render( "~/bundles/jqueryui" )
<link href="~/Styles/jquery-ui.css" rel="stylesheet" />
<script type="text/javascript">
	//Hold data from server if there is any
	var starterData = @Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize( Model ) );
	var activeSection = "@ViewBag.ActiveSection";
    var mainObjectID = @Model.Id;
    var controller = "CredentialManagement";
    var objectType = "credential";
    var collectOnlyVisibleFields = true; //Only send back visible fields to the server
</script>

<script type="text/javascript">
	//Page Functions
	function preview() {
		if(formData.Id){
		    window.open("@Url.Content( "~/CredentialManagement/Detail2/" )" + formData.Id, "ctiCred");
		}
	}
</script>

<style type="text/css">
	#collectedData { position: fixed; top: 5%; bottom: 5%; left: 5%; right: 5%; padding: 5px; border: 1px solid #CCC; background-color: #FFF; box-shadow: 0 0 25px -2px rgba(0,0,0,0.8); }
	#collectedData h2 { margin: 0; }
	#collectedDataBox, #serverDataBox { position: absolute; top: 75px; bottom: 5px; left: 5px; right: 5px; }
	#collectedDataContent, #serverDataContent { background-color: #EEE; padding: 10px; font-family: Consolas, 'Courier New', monospace; white-space: pre-wrap; overflow: auto; font-size: 14px; tab-size: 4; position: absolute; top: 30px; left: 0; right: 0; bottom: 0; }
	#collectedDataBox { right: calc(50% + 2.5px); }
	#serverDataBox { left: calc(50% + 2.5px); }
	#collectedDataCloser { height: 30px; width: 30px; position: absolute; top: 5px; right: 5px; }
	
	/* Temporary */
	#utilityButtons { margin-bottom: 10px; }

</style>

<div id="serverMessage">@ViewBag.Message</div>

<h1>@Html.Raw( Model.Id > 0 ? "Editing Credential: " + Model.Name : "New Credential" )</h1>

<div id="tabs">
	@foreach ( var tab in tabs )
		{
			<input type="button" data-hasData="false" data-name="@tab.title" data-tabID="@tab.name" value="@tab.title" onclick="showTab('@tab.name');" />
		}
</div><!--
--><form id="editForm">
	<div id="identifier">Identifier: @Model.Id</div>
	
	<h2 id="tabTitle"></h2>

	<div class="field" data-property="Name">
		<h2>Credential Name <span class="required">(Required)</span></h2>
		<i>The official name of the credential.</i>
		<input type="text" data-property="Name" data-type="text" data-required="true" data-minLength="3" />
	</div>
       
	<div class="field" data-property="Description">
		<h2>Credential Description <span class="required">(Required)</span></h2>
		<i>A summary or description of the credential.</i>
		<textarea data-property="Description" data-type="text" data-required="true" data-minLength="10"></textarea>
	</div>
       <div class="field" data-property="AlternateName">
           <h2>Alternate Name</h2>
           <i>An alternate name of the credential.</i>
           <input type="text" data-property="AlternateName" data-type="text" data-required="true" data-minlength="3" />
       </div>
    <div class="field column2" data-property="CredentialType">
        <h2>Credential Type</h2>
        <i>Select the type that best describe the credential.<span class="required">(Required)</span></i>
        @Html.Partial( "~/Views/Shared/Management/_EnumerationEditor.cshtml", enumServices.GetCredentialType( EnumerationType.SINGLE_SELECT ) )
        <b>Other (enter type)</b>
        <input type="text" data-property="CredentialType" data-type="other" placeholder="If you selected &quot;other&quot;, explain here." />
    </div>
	<div class="field" data-property="Url">
		<h2>Credential URL</h2>
		<i>The URL of a page that lists information about the credential.</i>
		<input type="text" data-property="Url" data-type="url" placeholder="http://" />
	</div>

	<div class="field" data-property="CreatorOrganizationId">
		<h2>Creator Organization</h2>
		<i>Select the organization that originally created this credential.</i>
		<select data-type="select" data-property="CreatorOrganizationId" data-selectType="number">
			<option value="0" data-url="">Select an Organization</option>
			@foreach ( var org in allOrganizationsList )
			{
				<option value="@org.Id" data-url="@org.Url">@org.Name</option>
			}
		</select>
	</div>

	<div class="field" data-property="OwnerOrganizationId">
		<h2>Owner Organization</h2>
		<i>Select the organization that currently owns this credential.</i>
		<select data-type="select" data-property="OwnerOrganizationId" data-selectType="number">
			<option value="0" data-url="">Select an Organization</option>
			@foreach ( var org in allOrganizationsList )
			{
				<option value="@org.Id" data-url="@org.Url">@org.Name</option>
			}
		</select>
	</div>

	<div class="field" data-property="ImageUrl">
		<h2>Credential Image</h2>
		<i>The URL of the image or icon that represents the credential.</i>
		<input type="text" data-property="ImageUrl" data-type="url" placeholder="http://" />
	</div>

	<div class="field" data-property="DateEffective">
		<h2>Effective Date</h2>
		<i>The date that the credential was first officially recognized and earnable.</i>
		<input type="text" data-property="DateEffective" data-type="date" placeholder="MM/DD/YYYY" />
	</div>

	<div class="field" data-property="Version">
		<h2>Credential Version</h2>
		<i>The version number, code, catalog year, or other identifier for the specific version of the credential being described.</i>
		<input type="text" data-property="Version" data-type="text" maxlength="200" />
	</div>

	<div class="field" data-property="LatestVersionUrl">
		<h2>Latest Version URL</h2>
		<i>Provide a URL that will always lead to the latest version of the credential, even if the credential version changes.</i>
		<input type="text" data-property="LatestVersionUrl" data-type="url" placeholder="http://" />
	</div>

	<div class="field" data-property="ReplacesVersionUrl">
		<h2>Version Being Replaced</h2>
		<i>Provide a URL to the version of the credential that this credential version replaces.</i>
		<input type="text" data-property="ReplacesVersionUrl" data-type="url" placeholder="http://" />
	</div>


	<div class="field column2" data-property="Purpose">
		<h2>Purpose</h2>
		<i>The general purpose of the credential.</i>
		@Html.Partial( "~/Views/Shared/Management/_EnumerationEditor.cshtml", enumServices.GetCredentialPurpose( EnumerationType.MULTI_SELECT ) )
        <b>Other (enter type)</b>
		<input type="text" data-property="Purpose" data-type="other" placeholder="If you selected &quot;other&quot;, explain here." />
	</div>

	<div class="field column2" data-property="CredentialLevel">
		<h2>Credential Level</h2>
		<i>Select the level(s) that a person must have to access the credential. Check all that apply.</i>
		@Html.Partial( "~/Views/Shared/Management/_EnumerationEditor.cshtml", enumServices.GetCredentialLevel( EnumerationType.MULTI_SELECT ) )
        <b>Other (enter type)</b>
		<input type="text" data-property="CredentialLevel" data-type="other" placeholder="If you selected &quot;other&quot;, explain here." />
	</div>

	<div class="field repeating" data-property="EstimatedTimeToEarn">
		<h2>Estimated Time to Earn</h2>
		<i>Describe the estimated amount of time it would take to earn the credential normally, and for each applicable special circumstance.</i>
        <div class="repeaterItems" data-repeaterID="EstimatedTimeToEarn" data-title="Time To Earn Description"></div>
		<div class="repeater withItems" data-property="EstimatedTimeToEarn" id="EstimatedTimeToEarn" data-profile="DurationProfile"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('DurationProfile', 'EstimatedTimeToEarn');" value="Add Another Time to Earn Description" />
		</div>
	</div>
    @*
    <div class="field repeating" data-property="Region">
        <h2>Region</h2>
        <i>The geographic area that the credential is recognized in. For the whole world, use <strong>Earth</strong>.</i>
        <div class="repeaterItems" data-repeaterid="CredentialRegions" data-title="Region"></div>
        <div class="repeater withItems" data-property="Region" id="CredentialRegions" data-profile="GeoCoordinates"></div>
        <div class="buttons">
            <input type="button" onclick="addProfile('GeoCoordinates', 'CredentialRegions');" value="Add A Region" />
        </div>
    </div>
    *@
    <div class="field repeating" data-property="Jurisdiction">
        <h2>Jurisdiction</h2>
        <i>The geographic area that the credential is recognized in, sans exceptions.</i>
        <div class="repeaterItems" data-repeaterid="CredentialJurisdictions" data-title="Region"></div>
        <div class="repeater withItems" data-property="Jurisdiction" id="CredentialJurisdictions" data-profile="JurisdictionProfile" data-parentid="@Model.Id" data-parentType="Credential" data-parentGuid="@Model.RowId"></div>
        <div class="buttons">
            <input type="button" onclick="addProfile('JurisdictionProfile', 'CredentialJurisdictions');" value="Add A Jurisdiction" />
        </div>
    </div>

	<div class="field repeating" data-property="Requires">
		<i>Describe each set of requirements for attaining the credential.</i>
        <div class="repeaterItems" data-repeaterid="Requires" data-title="Requirements"></div>
        <div class="repeater withItems" data-property="Requires" id="Requires" data-profile="ConditionProfile" data-parentid="@Model.Id" data-parenttype="Credential" data-parentguid="@Model.RowId"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('ConditionProfile', 'Requires');" value="Add Requirements" />
		</div>
	</div>

	<div class="field repeating" data-property="Recommends">
		<i>Describe each set of recommended items that will help prepare someone to attain the credential.</i>
        <div class="repeaterItems" data-repeaterid="Recommends" data-title="Recommends"></div>
        <div class="repeater withItems" data-property="Recommends" id="Recommends" data-profile="ConditionProfile" data-parentid="@Model.Id" data-parenttype="Credential" data-parentguid="@Model.RowId"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('ConditionProfile', 'Recommends');" value="Add Recommendations" />
		</div>
	</div>

	<div class="field repeating" data-property="IsRequiredFor">
		<i>Describe each set of items that the credential is a known requirement for.</i>
        <div class="repeaterItems" data-repeaterid="IsRequiredFor" data-title="Required For"></div>
        <div class="repeater withItems" data-property="IsRequiredFor" id="IsRequiredFor" data-profile="ConditionProfile" data-parentid="@Model.Id" data-parenttype="Credential" data-parentguid="@Model.RowId"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('ConditionProfile', 'IsRequiredFor');" value="Add Requirements Description" />
		</div>
	</div>

	<div class="field repeating" data-property="IsRecommendedFor">
		<i>Describe each set of items that the credential will help someone prepare for.</i>
        <div class="repeaterItems" data-repeaterid="IsRecommendedFor" data-title="Recommended For"></div>
        <div class="repeater withItems" data-property="IsRecommendedFor" id="IsRecommendedFor" data-profile="ConditionProfile" data-parentid="@Model.Id" data-parenttype="Credential" data-parentguid="@Model.RowId"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('ConditionProfile', 'IsRecommendedFor');" value="Add Recommendations Description" />
		</div>
	</div>

    <div class="field repeating" data-property="OrganizationRole">
        <i>For each relationship the credential has to a unique organization, add a relationship here.</i>
        <div class="repeaterItems" data-repeaterid="OrganizationRoles" data-title="Organization Role"></div>
        <div class="repeater withItems" data-property="OrganizationRole" id="OrganizationRoles" data-profile="OrganizationRoleProfileInverse"></div>
        <div class="buttons">
            <input type="button" onclick="addProfile('OrganizationRoleProfileInverse', 'OrganizationRoles');" value="Add Organization Role" />
        </div>
    </div>

    <div class="field repeating" data-property="QualityAssuranceAction">
        <i>For each quality assurance issued to this credential, describe it here.</i>
        <div class="repeaterItems" data-repeaterid="QualityAssuranceActions" data-title="Relationship Description"></div>
        <div class="repeater withItems" data-property="QualityAssuranceAction" id="QualityAssuranceActions" data-profile="QualityAssuranceActionProfileInverse"></div>
        <div class="buttons">
            <input type="button" onclick="addProfile('QualityAssuranceActionProfileInverse', 'QualityAssuranceActions');" value="Add Quality Assurance Action" />
        </div>
    </div>

	<div class="field repeating" data-property="CredentialProcess">
        <p><b>This Property is for previewing and development only - it is not functional yet.</b></p>
		<i>Describe the processes used to select, develop, validate, or maintain the credential.</i>
        <div class="repeaterItems" data-repeaterid="CredentialProcesses" data-title="Process Description"></div>
		<div class="repeater withItems" data-property="CredentialProcess" id="CredentialProcesses" data-profile="ProcessProfile"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('ProcessProfile', 'CredentialProcesses');" value="Add Process Description" />
		</div>
	</div>

	<div class="field repeating" data-property="Earnings">
        <p><b>This Property is for previewing and development only - it is not functional yet.</b></p>
		<i>Describe the statistical information about earnings that holders of this credential are reported to have received.</i>
        <div class="repeaterItems" data-repeaterid="CredentialEarnings" data-title="Earnings"></div>
		<div class="repeater withItems" data-property="Earnings" id="CredentialEarnings" data-profile="EarningsProfile"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('EarningsProfile', 'CredentialEarnings');" value="Add Earnings Description" />
		</div>
	</div>
	
	<div class="field repeating" data-property="EmploymentOutcome">
        <h2>Employment Outcomes</h2>
        <p><b>This Property is for previewing and development only - it is not functional yet.</b></p>
		<i>Describe statistical employment outcome information about this credential.</i>
        <div class="repeaterItems" data-repeaterid="CredentialOutcomes" data-title="Employment Outcomes"></div>
		<div class="repeater withItems" data-property="EmploymentOutcome" id="CredentialOutcomes" data-profile="EmploymentOutcomeProfile"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('EmploymentOutcomeProfile', 'CredentialOutcomes');" value="Add Employment Outcome Description" />
		</div>
	</div>
	
	<div class="field repeating" data-property="Holders">
        <h2>Holder Statistics</h2>
        <p><b>This Property is for previewing and development only - it is not functional yet.</b></p>
		<i>Describe statistical information about those who received this credential.</i>
        <div class="repeaterItems" data-repeaterid="CredentialHolders" data-title="Credential Holders"></div>
		<div class="repeater withItems" data-property="Holders" id="CredentialHolders" data-profile="HoldersProfile"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('HoldersProfile', 'CredentialHolders');" value="Add Credential Holders Description" />
		</div>
	</div>
	
    <div class="field repeating" data-property="Renewal">
		<i>Describe the applicable conditions someone who previously attained this credential must meet in order to renew their status as a holder.</i>
        <div class="repeaterItems" data-repeaterid="CredentialRenewal" data-title="Credential Renewal"></div>
		<div class="repeater withItems" data-property="Renewal" id="CredentialRenewal" data-profile="ConditionProfile"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('ConditionProfile', 'CredentialRenewal');" value="Add Credential Renewal Description" />
		</div>
	</div>
	
	<div class="field repeating" data-property="Revocation">
        <p><b>This Property is for previewing and development only - it is not functional yet.</b></p>
		<i>Describe the action the credential conferrer or regulator may take to remove a credential from a credential holder due to some type of violation or misconduct.</i>
        <div class="repeaterItems" data-repeaterid="CredentialRevocation" data-title="Credential Revocation"></div>
		<div class="repeater withItems" data-property="Revocation" id="CredentialRevocation" data-profile="RevocationProfile"></div>
		<div class="buttons">
			<input type="button" onclick="addProfile('RevocationProfile', 'CredentialRevocation');" value="Add Credential Revocation Description" />
		</div>
	</div>

    <div class="field repeating" data-property="Industry" data-parentID="@Model.Id">
        <i>Identify the specific industries this credential applies to. We recommend using the <a href="http://www.naics.com/search/" target="_blank">NAICS codes</a>.<br />Select an Industry category and browse through codes or search by entering a keyword or parial NAICS code in the text box.</i>

        @{  var headerIdItems = new Dictionary<string, string>();
            headerIdItems.Add( "0", "Select an Industry" );
            var naicsCodes = EnumerationServices.NAICS_Categories_Enumeration();
            foreach ( var item in naicsCodes.Items )
            {
                headerIdItems.Add( item.Id.ToString(), item.Name );
            } 
        }
        @Html.Partial( "~/Views/Shared/Management/_MicroSearch.cshtml",
        new MicroSearchSettings() {
            ParentId = Model.Id.ToString(),
            ParentType = "Credential",
            Property = "Industry",
            SearchId = "IndustrySearch",
            SearchType = "IndustrySearch",
            ResultRenderMethod = "renderMicroSearchItems",
            SavedRenderMethod = "renderMicroSearchItems",
            ResultTemplate = "template_microSearchResult_CodeItem",
            SavedTemplate = "template_microSearchSaved_CodeItem",
            PageSize = 10,
            Attributes = new Dictionary<string, string>()
            {
                { "data-categoryID", naicsCodes.Id.ToString() }
            },
            SearchHeader = "Select new Industry",
            SavedItemsHeader = "Saved Industries",
            Filters = new List<MicroSearchSettings_Filter>()
            {
                new MicroSearchSettings_Filter() { FilterName = "HeaderId", Type = "select", Items = headerIdItems },
                new MicroSearchSettings_Filter() { FilterName = "Keywords", Type = "text", Placeholder = "Search by entering a full or partial NAICS code or a keyword" }
            }
        } )
        <style type="text/css">
            .microSearch[data-SearchID=IndustrySearch] .microSearchResult .description { display: none; }
        </style>
    </div>


    <div class="field repeating" data-property="Occupation" data-parentid="@Model.Id">
        <i>Identify the specific occupations this credential applies to. We recommend using the <a href="http://www.bls.gov/soc/" target="_blank">SOC codes</a>.<br />Select an Occupation category and browse through codes or search by entering a keyword or parial SOC code in the text box.</i>

        @{  headerIdItems = new Dictionary<string, string>();
            headerIdItems.Add( "0", "Select an Occupation" );
            var socCodes = EnumerationServices.SOC_Categories_Enumeration();
            foreach ( var item in socCodes.Items )
            {
                headerIdItems.Add( item.Id.ToString(), item.Name );
            }
        }
        @Html.Partial( "~/Views/Shared/Management/_MicroSearch.cshtml",
        new MicroSearchSettings()
        {
            ParentId = Model.Id.ToString(),
            ParentType = "Credential",
            Property = "Occupation",
            SearchId = "OccupationSearch",
            SearchType = "OccupationSearch",
            ResultRenderMethod = "renderMicroSearchItems",
            SavedRenderMethod = "renderMicroSearchItems",
            ResultTemplate = "template_microSearchResult_CodeItem",
            SavedTemplate = "template_microSearchSaved_CodeItem",
            PageSize = 10,
            Attributes = new Dictionary<string, string>()
            {
                { "data-categoryID", socCodes.Id.ToString() }
            },
            SearchHeader = "Select new Occupation",
            SavedItemsHeader = "Saved Occupations",
            Filters = new List<MicroSearchSettings_Filter>()
            {
                new MicroSearchSettings_Filter() { FilterName = "HeaderId", Type = "select", Items = headerIdItems },
                new MicroSearchSettings_Filter() { FilterName = "Keywords", Type = "text", Placeholder = "Search by entering a full or partial SOC code or a keyword" }
            }
        } )
    </div>


</form>
<div id="actionButtons">
	<div id="status"></div>
    <input type="button" id="btnSaveData" value="Save Data" onclick="updateData('credentialmanagement', 'update', this);" />
    <input type="button" id="btnPreview" class="actionButton" value="Preview" onclick="preview();" />
    <input type="button" id="btnDelete" class="actionButton redButton" value="Delete" onclick="deleteData('credentialmanagement', 'delete', this);" />

</div>

<div id="collectedData" style="display:none;">
	<h2>Collected Data</h2>
	<div>The data below is based on the current status of the form.</div>
	<div id="collectedDataBox">
		<p>Data collected from form</p>
		<div id="collectedDataContent"></div>
	</div>
	<div id="serverDataBox">
		<p>Data recognized by server</p>
		<div id="serverDataContent"></div>
	</div>
	<input type="button" onclick="hideCollectedData()" value="X" id="collectedDataCloser" />
</div>

