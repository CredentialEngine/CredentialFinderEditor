@model Models.Node.Interface.EditorSettings
@using Models.Node.Interface;
@using Models.Common;
@using Models;
@{
	ViewBag.Title = "Profile Manager V2";

	var enumServices = new EnumerationServices();
	var isUserAdmin = AccountServices.IsUserSiteStaff();
	var registryURL = ServiceHelper.GetAppKeyValue( "credentialRegistryGet" );
	var registryResourceUrl = ServiceHelper.GetAppKeyValue( "credRegistryResourceUrl" );

	var userOrgs = Model.UserOrganizations;

	//need to distinguish from original top level parent
	var mainProfileType = "";

	//??????????????????????
	var mainParentRequest = Model.ParentRequestType ?? "";
	var parentProfileType = Model.LastProfileType ?? "";
	var parentProfileRowId = Model.LastProfileRowId ?? "";
	var currentPageIdentifier = Guid.NewGuid();
	var parentPageIdentifier = Request.Params[ "parentPage" ];
	var pageRequestQueryString = Request.QueryString.ToString();

	var roles = new Enumeration();
	var offeredRoles = new Enumeration();
	var qaRoles = new Enumeration();
	var cpCredentials = new Enumeration();
	var cpLearningOpps = new Enumeration();
	var cpAsmts = new Enumeration();
	var jurisdictionsAssertions = new Enumeration();

	switch ( Model.Editor )
	{
		case EditorSettings.EditorType.CREDENTIAL:
			mainProfileType = "Credential";
			roles = enumServices.GetEntityQARoles( EnumerationType.CUSTOM );
			offeredRoles = enumServices.GetEntityOfferedByRoles( EnumerationType.CUSTOM );
			qaRoles = enumServices.GetCredentialAgentQAActions( EnumerationType.CUSTOM, "Credential" );

			jurisdictionsAssertions = enumServices.GetJurisdictionAssertions( "cred" );
			break;

		case EditorSettings.EditorType.ORGANIZATION:
			mainProfileType = "Organization";
			roles = enumServices.GetAllAgentReverseRoles( EnumerationType.CUSTOM );
			qaRoles = enumServices.GetCredentialAgentQAActions( EnumerationType.CUSTOM, "Organization" );
			jurisdictionsAssertions = enumServices.GetJurisdictionAssertions( "org" );
			break;
		case EditorSettings.EditorType.QA_ORGANIZATION:
			mainProfileType = "QAOrganization";
			roles = enumServices.GetAllAgentReverseRoles( EnumerationType.CUSTOM );
			qaRoles = enumServices.GetCredentialAgentQAActions( EnumerationType.CUSTOM, "Organization" );
			jurisdictionsAssertions = enumServices.GetJurisdictionAssertions( "org" );
			break;
		case EditorSettings.EditorType.LEARNINGOPPORTUNITY:
			mainProfileType = "LearningOpportunity";
			roles = enumServices.GetLearningOppAgentRoles( EnumerationType.CUSTOM );
			qaRoles = enumServices.GetCredentialAgentQAActions( EnumerationType.CUSTOM, "LearningOpportunity" );
			jurisdictionsAssertions = enumServices.GetJurisdictionAssertions( "lopp" );
			break;
		case EditorSettings.EditorType.ASSESSMENT:
			mainProfileType = "Assessment";
			roles = enumServices.GetAssessmentAgentRoles( EnumerationType.CUSTOM );
			qaRoles = enumServices.GetCredentialAgentQAActions( EnumerationType.CUSTOM, "Assessment" );
			jurisdictionsAssertions = enumServices.GetJurisdictionAssertions( "asmt" );
			break;
		default:
			break;
	};


	var industryHeaders = new Dictionary<string, string>() { { "0", "Select an Industry" } };
	EnumerationServices.NAICS_Categories_Enumeration().Items.ForEach( m => industryHeaders.Add( m.CodeId.ToString(), m.Name ) );

	var orgSelectGuidance = "Select the organization that 'owns' this credential. Use the custom filter of 'My Associated Organizations' to filter to only organizations with which you are associated.";
	var orgSearchFilters = new Dictionary<string, string>() { { "0", "Select an optional Custom Filter" }, { "myOrgs", "My Associated Organizations" } };
	var orgFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() { FilterName = "OrgFilters", Type = "select", Items = orgSearchFilters }};
	if ( Model.UserOrganizations == null || Model.UserOrganizations.Count < 1 )
	{
		orgFilters = null;
		orgSelectGuidance = "Select the organization that 'owns' this credential.";
	}

	var occupationHeaders = new Dictionary<string, string>() { { "0", "Select an Occupation" } };
	EnumerationServices.SOC_Categories_Enumeration().Items.ForEach( m => occupationHeaders.Add( m.CodeId.ToString(), m.Name ) );

	var cipHeaders = new Dictionary<string, string>() { { "0", "Select a Classification" } };
	EnumerationServices.CIPS_Categories_Enumeration().Items.ForEach( m => cipHeaders.Add( m.CodeId.ToString(), m.Name ) );

	//var queryParams = Request.QueryString.Keys.Cast<string>().ToDictionary( k => k, v => Request.QueryString[ v ] );

	var ctid = GetPropertyString( "CTID", Model.Data );
	var credentialRegistryID = GetPropertyString( "CredentialRegistryId", Model.Data );
	var isPublished = !string.IsNullOrWhiteSpace( credentialRegistryID );
	var registryURLFormatted = string.Format( registryURL, credentialRegistryID );
}
@functions {
	public string GetPropertyString( string propertyName, object source )
	{
		try
		{
			return source.GetType().GetProperties().FirstOrDefault( m => m.Name == propertyName ).GetValue( source ) as string;
		}
		catch
		{
			return "";
		}
	}
}
@helper RenderTextInput( TextInputSettings settings )
{
	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", settings )
}
@helper RenderTextInput( string property, string label, TextInputSettings.InputType type, string guidance, bool isRequired = false, int minimumLength = 0 )
{
	@RenderTextInput( new TextInputSettings()
{
	Property = property,
	Label = label,
	Type = type,
	Guidance = guidance,
	RequireValue = isRequired,
	MinimumLength = minimumLength
} )
}
@helper RenderListInput( ListInputSettings settings )
{
	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", settings )
}
@helper RenderListInput( string property, string label, ListInputSettings.InterfaceType type, string guidance, List<EnumeratedItem> enumItems, List<CodeItem> codeItems = null, bool useSmallLabel = true, bool hasOtherBox = false, int preSelectedItem = -1, bool isRequired = false )
{
	@RenderListInput( new ListInputSettings()
{
	Property = property,
	Label = label,
	Type = type,
	Guidance = guidance,
	EnumItems = enumItems == null ? new List<EnumeratedItem>() : enumItems,
	CodeItems = codeItems == null ? new List<CodeItem>() : codeItems,
	HasOtherBox = hasOtherBox,
	UseSmallLabel = useSmallLabel,
	PreSelectedItem = preSelectedItem
} )
}
@helper RenderTextValueInput( TextValueEditorSettings settings )
{
	@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", settings )
}
@helper RenderTextValueInput( string property, string label, TextInputSettings.InputType type, string guidance, string addText, string valuePlaceholder, string parentRepeaterId = "{repeaterID}", bool useSmallLabel = true, bool isRequired = false )
{
	@RenderTextValueInput( new TextValueEditorSettings()
{
	Property = property,
	Label = label,
	ValueType = type,
	Guidance = guidance,
	AddText = addText,
	ValuePlaceholder = valuePlaceholder,
	ParentRepeaterId = parentRepeaterId,
	UseSmallLabel = useSmallLabel,
	RequireValue = isRequired
} )
}
@helper RenderProfileInput( ProfileSettings settings )
{
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", settings )
}
@helper RenderProfileInput( string property, string label, string profileName, string guidance, string addText, string parentRepeaterId = "{repeaterID}", bool useSmallLabel = true, bool isRequired = false )
{
	@RenderProfileInput( new ProfileSettings()
{
	Property = property,
	Label = label,
	Profile = profileName,
	Guidance = guidance,
	AddText = addText,
	ParentRepeaterId = parentRepeaterId,
	UseSmallLabel = useSmallLabel,
	RequireValue = isRequired
} )
}
@helper RenderMicroSearchInput( MicroSearchSettings settings )
{
	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", settings )
}

@helper SectionButton( string title, string detailName, int profileId = 0, int count = 0 )
{

	<button class="blackOutlineButton" id="btn_@detailName" data-detailname="@detailName"> @title  <i class="fa fa-caret-down"></i><i class="fa fa-caret-right"></i></button>
}

@helper SectionButton2( string title, string detailName, int profileId = 0, int count = 0 )
{
if ( profileId > 0 )
{
		<button class="blackOutlineButton" id="btn_@detailName" data-detailname="@detailName"> @title  <i class="fa fa-caret-down"></i><i class="fa fa-caret-right"></i></button>
}
	@*@if ( count > 0 ) {<i class="fa fa-check-square"></i>}*@
	@*<i class="fa fa-check-square" style="display:none;color:green"></i>*@
}
@helper RenderRegistrySection( int mainProfileID, bool isPublished, string ctid, string registryResourceURL, string registryEnvelopeURL )
{
	@SectionButton( "Credential Registry", "registry", mainProfileID )
	<div class="detailTab" data-detailname="registry">
		<h2 class="detailTabHeader">Credential Registry</h2>
		<div>
			<div id="registryPublishingStatus"><b>Registry Status:</b> @( isPublished ? "Published" : "Not Published" )</div>
			<div id="registryCTID"><b>CTID:</b> @( isPublished ? ctid : "Not Available" )</div>
			@if ( isPublished )
			{
				<div id="registryURL">@( isPublished ? registryResourceURL + ctid : "" )</div>
				<div id="registryEnvelope"><a href="@registryEnvelopeURL" target="detailWindow">View in Registry</a></div>
			}
		</div>
	</div>
}
@helper RenderCassBrowser( Models.Helpers.Cass.CassBrowserV1Config config )
{
	<h2 class="profileLabel">Competencies</h2>
	@Html.Partial( "~/Views/V2/CASS/CassSearchWidgetV1.cshtml", config )
}
@helper RenderCassBrowser( string propertyName, string onSaveCompetency, string onSaveCompetencyList, string onRemoveCompetency, string parentRepeaterID )
{
	var config = new Models.Helpers.Cass.CassBrowserV1Config()
	{
		OnSelectCompetency = onSaveCompetency,
		OnSelectCompetencyList = onSaveCompetencyList,
		OnUnselectCompetency = onRemoveCompetency,
		Attributes = new Dictionary<string, string>()
		{
			{ "data-property", propertyName },
			{ "data-parentRepeaterID", parentRepeaterID },
		}
	};
	@RenderCassBrowser( config )
}
<script type="text/javascript">
	/* Server and global variables */
	var initialData = @Html.Raw(  Newtonsoft.Json.JsonConvert.SerializeObject( Model.Data ) );
	var mainProfileType = "@mainProfileType";
	var mainProfileId = @Model.MainProfile.Id;

	var globalParentPageIdentifier = "@parentPageIdentifier";
	var globalCurrentPageIdentifier = "@currentPageIdentifier";

	$('#currentMainProfileId').val(mainProfileId);

	var mainProfileRowId="@Model.MainProfile.RowId";
	var parentProfileRowId="@parentProfileRowId";
	var profileParents = [];
	var requestQueryString="@pageRequestQueryString";

	var repeaterID = 1;
	var editZIndex = 100;


</script>
<script type="text/javascript">
	/* Initialization */
	$(document).ready(function() {
		doInitialLoad();
		initializeProfiles();
		loadLinkedTab();
		setupSections();

		//initialize. then push and pop as needed
		//only pertinent to current, not a parent frame
		//NOTE need logic to ensure never empty?


		if (window.self !== window.top) {
			$('#mainSiteHeader').css({"display":"none"});
			//or just hide
			$('#globalButtons').hide();
			//$('#globalButtons').css({"display":"none"});

			//get a parent???
		}

		if (@Model.MainProfile.Id == 0 ) {
			addCurrentProfile("@mainProfileType" + ";" + "00000000-0000-0000-0000-000000000000")
			storageSetItem("lastProfile", mainProfileType);

			if (mainProfileType == "Credential") {
				firstSection(true);
				//$('.entityOtherSections').css({"display":"none"});
				$('.entityOtherSections').hide();

			} else {
				$("#editor .detailTab[data-detailName=entity_basic]").show()
				$('.entityOtherSections').hide();
			}
		} else {
			@*storageSetItem("lastProfileRowId", "@Model.MainProfile.RowId");
            storageSetItem("lastProfile", "@mainProfileType");*@
			addCurrentProfile("@mainProfileType" + ";" + "@Model.MainProfile.RowId")

			storageSetItem("MainProfile.RowId" + mainProfileType, "@Model.MainProfile.RowId");
			if (window.self == window.top) {
				storageSetItem("topLevel_" + mainProfileType, "@Model.MainProfile.RowId");
			}
			@*if (mainProfileType == "Credential") {
                //set top level credential
                //do we first want to clear relevent storage items. There could be confusion if many entity pa ges are requested for the same session
                storageSetItem("topLevel_Credential", "@Model.MainProfile.RowId");
            }*@

			if ( (initialData.CredentialRegistryId || "").length == 36 )
				$('.btnUnregister').show();
			else
				$('.btnUnregister').hide();

			handleSectionDisplay();
		}
		if (mainProfileType == "Organization") {
			$('.qaOrganizationOnly').hide();

		} else if (mainProfileType == "QAOrganization") {
			$('.qaOrganizationOnly').show();
			$('.organizationOnly').hide();
		}

		setupStickyHeader();
		setupTooltips();

	});  //ready

	// manage the current profile - may want to include the id?
	function addCurrentProfile(profileName) {
		profileParents.push(profileName);
	}
	//function getCurrentProfile() {
	//    if (profileParents.length > 0)
	//        return profileParents[profileParents.length-1];
	//    else
	//        return "";
	//}
	function getCurrentProfileName() {
		if (profileParents.length > 0) {
			var item = profileParents[profileParents.length-1];
			var name = item.split(";");
			return name[0];
		}
		else
			return "";
	}
	function getCurrentProfileRowId() {
		if (profileParents.length > 0) {
			var item = profileParents[profileParents.length-1];
			var res = item.split(";");
			return res[1];
		}
		else
			return "";
	}
	function removeCurrentProfile() {
		if (profileParents.length > 1)
			profileParents.pop();
	}
	function setupStickyHeader(){
		//Toggle sticky header on scroll
		var jqWindow = $(window); //Don't recreate the $(window) object every single time the user scrolls, instead just create it here
		var sticky = $(".editorHeader"); //This would be the part you want to make sticky
		$(jqWindow).on("scroll", function () { //On scroll..
			if (jqWindow.scrollTop() > 100) { //If the window is scrolled past 0 (or whatever value)…
				sticky.addClass("stickyHeader"); //Add a class to the div
			}
			else { //Otherwise…
				sticky.removeClass("stickyHeader"); //Remove the class
			}
		});
	} //

	function setupTooltips() {
		//jquery-ui
		//['[title !=""]']
		$( function() {
			var tooltips = $( ".jqTooltip" ).tooltip({
				position: {
					my: "left top",
					at: "right+5 top-5",
					collision: "none"
				}
			});
		} );

		// Grab elements with a title attribute that isn't blank.
		// use for local content, not populated via a web service
		//$('[title !=""]').qtip();
		var toolTipTemplate = "<p><b>{name}</b></p><p>{description}</p><hr>{usage}{comment}<i>{term}</i>";
		var usageTemplate = "<p>Usage: {usageData}</p><hr>";
		var commentTemplate = "<p>Comment: {commentData}</p><hr>";
		/* qTip2 call below will grab this JSON and use the firstName as the content */
		$('.hasToolTip').qtip({
			content: {
				text: function(event, api) {
					$.ajax({
						url: "@Url.Content( "~/ajax/GetToolTipTermData")" , // URL to the JSON file
						type: 'GET', // POST or GET
						dataType: 'json', // Tell it we're retrieving JSON
						data: {
							// term: "ceterms:Credential" // Pass through the term of the current element matched by '.selector'
							term: $(this).attr('title')
						},
					})
                    .then(function(data) {
                    	/* Process the retrieved JSON object
                         *    Retrieve a specific attribute from our parsed
                         *    JSON string and set the tooltip content.
                         */
                    	var usage = data.data.UsageNote.length == 0 ? "" : usageTemplate.replace(/{usageData}/g,data.data.UsageNote);
                    	var comment = data.data.Comment.length == 0 ? "" : commentTemplate.replace(/{commentData}/g,data.data.Comment);
                    	var content = toolTipTemplate
                                    .replace(/{name}/g,data.data.Name)
                                    .replace(/{description}/g,data.data.Definition)
                                    .replace(/{usage}/g,usage)
                                    .replace(/{comment}/g,comment)
                                    .replace(/{term}/g,data.data.Term)
                    	console.log("term", content);
                    	// Now we set the content manually (required!)
                    	api.set('content.text', content);
                    }, function(xhr, status, error) {
                    	// Upon failure... set the tooltip content to the status and error value
                    	api.set('content.text', status + ': ' + error);
                    });

					return 'Loading...' // Set some initial loading text
				}
			}
		});

		$('.hasVocabTooltip').qtip({
			content: {
				text: function(event, api) {
					$.ajax({
						url: "@Url.Content( "~/ajax/GetToolTipTermData")" , // URL to the JSON file
						type: 'GET', // POST or GET
						dataType: 'json', // Tell it we're retrieving JSON
						data: {
							// term: "ceterms:Credential" // Pass through the term of the current element matched by '.selector'
							vocabulary: $(this).attr('data-vocabulary'),
							term: $(this).attr('data-term')
						},
					})
                          .then(function(data) {
                          	/* Process the retrieved JSON object
							 *    Retrieve a specific attribute from our parsed
							 *    JSON string and set the tooltip content.
							 */
                          	var usage = data.data.UsageNote.length == 0 ? "" : usageTemplate.replace(/{usageData}/g,data.data.UsageNote);
                          	var comment = data.data.Comment.length == 0 ? "" : commentTemplate.replace(/{comment}/g,data.data.Comment);
                          	var content = toolTipTemplate
										.replace(/{name}/g,data.data.Name)
										.replace(/{description}/g,data.data.Definition)
										.replace(/{usage}/g,usage)
										.replace(/{comment}/g,comment)
										.replace(/{term}/g,data.data.Term)
                          	console.log("term", content);
                          	// Now we set the content manually (required!)
                          	api.set('content.text', content);
                          }, function(xhr, status, error) {
                          	// Upon failure... set the tooltip content to the status and error value
                          	api.set('content.text', status + ': ' + error);
                          });

					return 'Loading...' // Set some initial loading text
				}
			}
		});

		// Grab all elements with the class "hasTooltip", and show tip from next div
		/*
        <div class="hasTooltip">Hover me to see a tooltip</div>
        <div class="hidden"> <!-- This class should hide the element, change it if needed -->
            <p><b>Complex HTML</b> for your tooltip <i>here</i>!</p>
        </div>
        */
		$('.hasDivTooltip').each(function() { // Notice the .each() loop, discussed below
			$(this).qtip({
				content: {
					text: $(this).next('div') // Use the "div" element next to this for the content
				}
			});
		});

	} //

	//Load initial data
	function doInitialLoad(){
		console.log( initialData );
		//injectProfile();
		writeProfile($(".mainProfile"), initialData);
	}

	//Called every time a new profile is added
	function initializeProfiles() {
		//tabs are not used, but need to eliminate dependencies before removing
		setupTabs();
		setupRadioSelectors();
	}
	//

	//If a particular profile was linked to, attempt to display it
	function loadLinkedTab() {
		var tab = "@Request.QueryString[ "tab" ]";

		if(tab != ""){
			$(".mainProfile > .tabs input[data-properties*=" + tab + "]").first().trigger("click");
		}
	}
	//

	//Setup tabs
	function setupTabs(){
		$(".hasTabs").not(".hasTabsInitialized").each(function() {
			var box = $(this);
			box.addClass("hasTabsInitialized");
			var buttons = box.find(".tabs input");
			var items = box.find(".tabItem");
			buttons.each(function() {
				var button = $(this);
				button.on("click", function() {
					buttons.removeClass("selected");
					button.addClass("selected");
					var targets = button.attr("data-properties").split(",");
					items.removeClass("selected");
					for(var i in targets){
						items.filter("[data-property=" + targets[i] + "]").addClass("selected");
					}
				})
			});
			buttons.first().trigger("click");
		});
	}
	//

	//
	function setupRadioSelectors(){
		$(".radioSelector").not(".radioSelectorInitialized").each(function(){
			var selector = $(this);
			selector.addClass("radioSelectorInitialized");
			var sections = selector.find(".radioSection");
			sections.each(function() {
				var section = $(this);
				section.find(".radioButton input[type=radio]").on("change", function() {
					sections.removeClass("selected");
					section.addClass("selected");
				});
			});
		});
	}
	//

	function setCurrentMainProfileId(value) {
		$('#currentMainProfileId').val(value);
	}
	function hasProfileId() {
		if ($('#currentMainProfileId').val() > 0)
			return true;
		else
			return false;
	}

</script>

<script type="text/javascript">
	//Setup sections buttons
	function setupSections() {
		var buttons = $("#editor button[data-detailName]");
		var tabs = $("#editor .detailTab");
		tabs.hide();
		buttons.each(function() {
			var button = $(this);
			button.on("click", function() {
				button.toggleClass("selected");
				var tab = $("#editor .detailTab[data-detailName=" + button.attr("data-detailName") + "]");
				if(button.hasClass("selected")){
					tab.addClass("selected").slideDown();
				}
				else {
					tab.removeClass("selected").slideUp();
				}

			});
		});

	}
	//
	//show first section
	function firstSection(hiding) {

		var section = $("#editor .detailTab[data-detailName=entity_basic]");
		var btn = $("#btn_entity_basic");
		if (hiding) {
			section.show();
			btn.html("Getting Started");
			btn.unbind('click');
			//hide properties not meant for an add
			$(".updateOnly").hide()
			$(".entityOtherSections").hide()
		} else  {
			//??? section.show();
			btn.html("Common Information");
			btn.bind('click');

			$(".updateOnly").show()
			$(".entityOtherSections").show()

		}
	}
</script>
<script type="text/javascript">
	function handleSectionDisplay() {
		//show remaining
		//$('.entityOtherSections').css({"display":"block"});

		$(".updateOnly").show()
		$('.entityOtherSections').show();

		if (mainProfileType == "Credential") {
			handleCredentialData();
		} else if (mainProfileType == "Organization") {
			handleOrganizationData();
		} else if (mainProfileType == "QAOrganization") {
			handleOrganizationData();
		} else if (mainProfileType == "Assessment") {
			handleAssessmentData();
		}  else if (mainProfileType == "LearningOpportunity") {
			handleLearningOppData();
		}
	}
	//credential specific handling
	function handleCredentialData() {

		var featuringAssessments = false;
		var featuringAssessmentsAfterUpdate = false;
		$('#credType').html(initialData.CredentialTypeDisplay);

		//this is the state at load - could compare to current state after update
		//if ( initialData.FeatureAssessments ==  true)
		//    featuringAssessments = true;
		//if (initialData.FeatureLearningOpportunities ==  true)
		//    featuringLearningOpportunities = true;

		//
		if ($('input[data-property=FeatureLearningOpportunities]').prop('checked')) {
			featuringLearningOpportunities = true;
		} else
			featuringLearningOpportunities = false;

		if ($('input[data-property=FeatureAssessments]').prop('checked')) {
			featuringAssessments = true;
		} else
			featuringAssessments = false;
		//now issue will be determining if order has changed at all


		if (featuringAssessments) {
			//show asmt main
			//updates:
			//- if featured at load, then content is in visible section
			//check length, if non-zero should be populated
			if ($('#cr_assessments').html().length == 0) {
				//previously hidden, now copy and show
				$('#btn_cr_assessments').show();
				//may want to show before copy?
				$('#cr_assessments').show();
				$('#cr_assessments2').show();
				$('#cr_assessments').html($('#cr_assessments2').html());
				$('#cr_assessments').hide();

				$('#btn_cr_assessments2').hide();
				$('#cr_assessments2').hide();
				$("#editor .detailTab[data-detailName=cr_assessments2]").html("");
			}

		} else {
			//remove from main
			if ($('#cr_assessments').html().length > 0) {
				$('#cr_assessments2').show();
				$('#cr_assessments2').html($('#cr_assessments').html());
				$('#cr_assessments2').hide();
			}
			$('#btn_cr_assessments').hide();
			$('#cr_assessments').hide();

			$("#editor .detailTab[data-detailName=cr_assessments]").html("");
			//show in extra
			$('#btn_cr_assessments2').show();
		}

		//if (initialData.EarningCredentialPrimaryMethodId ==  24) {
		if (featuringLearningOpportunities) {
			//default is to show learning opps
			if ($('#cr_learningOpps').html().length == 0) {
				$('#btn_cr_learningOpps').show();
				//may want to show before copy?
				$('#cr_learningOpps').show();
				$('#cr_learningOpps2').show();
				$('#cr_learningOpps').html($('#cr_learningOpps2').html());
				$('#cr_learningOpps').hide();

				$('#btn_cr_learningOpps2').hide();
				$('#cr_learningOpps2').hide();
				$("#editor .detailTab[data-detailName=cr_learningOpps2]").html("");
			}

		} else {
			//remove from main
			if ($('#cr_learningOpps').html().length > 0) {
				$('#cr_learningOpps2').show();
				$('#cr_learningOpps2').html($('#cr_learningOpps').html());
				$('#cr_learningOpps2').hide();
			}
			$('#btn_cr_learningOpps').hide();
			$('#cr_learningOpps').hide();
			$("#editor .detailTab[data-detailName=cr_learningOpps]").html("");

			//show in extra
			$('#btn_cr_learningOpps2').show();

		}

		var orgName = "";
		if (initialData.OwningOrganization != null && initialData.DisplayOwningOrganization.Id > 0) {
			orgName = initialData.OwningOrgDisplay;
			var orgLink = "<a href='/editor/organization/{orgId}' target='credOrg'>{orgName}</a>"
                    .replace(/{orgId}/g, initialData.DisplayOwningOrganization.Id)
                    .replace(/{orgName}/g, orgName);

			$('#entityOwningOrg').html(orgLink);

			// $('#enterOwningOrg').css({"display":"none"});
			//  $('#existingOwningOrg').css({"display":"block"});
		} else {

			$('#enterOwningOrg').css({"display":"block"});
			$('#existingOwningOrg').css({"display":"none"});
		}

		$('#btn_entity_basic').css({"background-color":"#94CD89"});
		if ((initialData.Occupation != null && initialData.Occupation.length > 0)
            || (initialData.Industry != null && initialData.Industry.length > 0)) {
			$('#btn_cr_occupations').css({"background-color":"#94CD89"});
			// $('#btn_cr_occupations fa-check-square').css({"display":"block"});
		}
		if (initialData.CredentialConnections != null && initialData.CredentialConnections.length > 0) {
			showIfListHasData( initialData.CredentialConnections, "cr_connections");
			// $('#btn_cr_connections').css({"background-color":"#94CD89"});
		}
		if (initialData.EmbeddedCredentials != null && initialData.EmbeddedCredentials.length > 0) {
			showIfListHasData( initialData.EmbeddedCredentials, "cr_includedCredentials");
			//  $('#btn_cr_includedCredentials').css({"background-color":"#94CD89"});
		}

		//this will be an issue with currently displayed or under extra
		if (initialData.TargetLearningOpportunity != null && initialData.TargetLearningOpportunity.length > 0) {

			if (featuringLearningOpportunities) {
				showIfListHasData( initialData.TargetLearningOpportunity, "cr_learningOpps");
				// $('#btn_cr_learningOpps').css({"background-color":"#94CD89"});
			}
			else {
				showIfListHasData( initialData.TargetLearningOpportunity, "cr_learningOpps2");
				showIfListHasData( initialData.TargetLearningOpportunity, "cr_extra");
				//$('#btn_cr_learningOpps2').css({"background-color":"#94CD89"});
			}

		}
		if (initialData.TargetAssessment != null && initialData.TargetAssessment.length > 0) {

			if (featuringAssessments) {
				showIfListHasData( initialData.TargetAssessment, "cr_assessments");
				//$('#btn_cr_assessments').css({"background-color":"#94CD89"});
			}
			else {
				showIfListHasData( initialData.TargetAssessment, "cr_assessments2");
				showIfListHasData( initialData.TargetAssessment, "cr_extra");
				// $('#btn_cr_assessments2').css({"background-color":"#94CD89"});
			}
		}
		//if ((initialData.Requires != null && initialData.Requires.length > 0)
		//    || (initialData.Recommends != null && initialData.Recommends.length > 0)) {
		//    $('#btn_cr_Conditions').css({"background-color":"#94CD89"});
		//}
		//if ((initialData.EstimatedCosts != null && initialData.EstimatedCosts.length > 0)) {
		//    $('#btn_cr_Costs').css({"background-color":"#94CD89"});
		//}
		//if ((initialData.AgentRole_Recipient != null && initialData.AgentRole_Recipient.length > 0)) {
		//    $('#btn_cr_QAAgentRoles').css({"background-color":"#94CD89"});
		//}
		showIfListHasData( initialData.Requires, "cr_Conditions");
		showIfListHasData( initialData.Recommends, "cr_Conditions");
		showIfListHasData( initialData.Corequisite, "cr_Conditions");
		showIfListHasData( initialData.CommonConditions, "cr_Conditions");

		showIfListHasData( initialData.CommonCosts, "cr_Costs");
		showIfListHasData( initialData.EstimatedCosts, "cr_Costs");
		//showIfListHasData( initialData.AssessmentEstimatedCosts, "cr_Costs");
		//showIfListHasData( initialData.LearningOpportunityEstimatedCosts, "cr_Costs");

		if ( initialData.AssessmentEstimatedCosts != null && initialData.AssessmentEstimatedCosts.length > 0  )
		{
			//$('#cr_asmtCosts').show();
		}

		if ( initialData.LearningOpportunityEstimatedCosts != null && initialData.LearningOpportunityEstimatedCosts.length > 0 )
		{
			// $('#cr_loppCosts').show();
		}

		showIfListHasData( initialData.FinancialAssistance, "cr_financialAlignment");
		showIfListHasData( initialData.OfferedByOrganization, "cr_offeredByRoles");
		showIfListHasData( initialData.AgentRole_Recipient, "cr_QAAgentRoles");
		//showIfListHasData( initialData.Region, "cr_region");
		showIfListHasData( initialData.JurisdictionAssertions, "cr_jurisdiction");

		showIfListHasData( initialData.AdministrationProcess, "cr_credentialProcess");
		showIfListHasData( initialData.DevelopmentProcess, "cr_credentialProcess");
		showIfListHasData( initialData.MaintenanceProcess, "cr_credentialProcess");
		showIfListHasData( initialData.AppealProcess, "cr_credentialProcess");
		showIfListHasData( initialData.ComplaintProcess, "cr_credentialProcess");
		showIfListHasData( initialData.ReviewProcess, "cr_credentialProcess");
		showIfListHasData( initialData.RevocationProcess, "cr_credentialProcess");


		showIfListHasData( initialData.AdministrationProcess, "cr_extra");
		showIfListHasData( initialData.DevelopmentProcess, "cr_extra");
		showIfListHasData( initialData.MaintenanceProcess, "cr_extra");

		showIfListHasData( initialData.Renewal, "cr_CredentialRenewal");
		showIfListHasData( initialData.Renewal, "cr_extra");
		showIfListHasData( initialData.Revocation, "cr_Revocation");
		showIfListHasData( initialData.Revocation, "cr_extra");
	}



	//org specific handling
	function handleOrganizationData()
	{
		$('.credentialOnly').hide();

		$('#btn_entity_basic').css({"background-color":"#94CD89"});
		showIfListHasData( initialData.Address, "org_location");
		showIfListHasData( initialData.ContactPoint, "org_location");

		showIfListHasData( initialData.SocialMediaPages, "org_location");
		showIfListHasData( initialData.PhoneNumbers, "org_location");
		showIfListHasData( initialData.Emails, "org_location");

		showIfListHasData( initialData.Industry, "org_industries");
		showIfListHasData( initialData.OtherIndustries, "org_industries");

		//showIfListHasData( initialData.Contacts, "org_Contacts");

		if (initialData.AgentRole_Recipient != null && initialData.AgentRole_Recipient.length > 0) {
			showIfListHasData( initialData.AgentRole_Recipient, "org_roles_recipient");
		}
		//if (initialData.QualityAssuranceAction_Recipient != null && initialData.QualityAssuranceAction_Recipient.length > 0) {
		//    showIfListHasData( initialData.QualityAssuranceAction_Recipient, "org_qaReceived");
		//}

		if ((initialData.VerificationService != null && initialData.VerificationService.length > 0)) {
			showIfListHasData( initialData.VerificationService, "org_verification");
		}
		if ((initialData.QACredentials != null && initialData.AgentRole_Recipient.length > 0)) {
			showIfListHasData( initialData.QACredentials, "org_QAIinformation");
		}

		//??org_Requirements
		//if ((initialData.AgentRole_Recipient != null && initialData.AgentRole_Recipient.length > 0)) {
		//    showIfListHasData( initialData.AgentRole_Recipient, "org_Requirements");
		//}

		if ((initialData.Department != null && initialData.Department.length > 0)) {
			showIfListHasData( initialData.Department, "org_dept");
		}
		if ((initialData.Subsidiary != null && initialData.Subsidiary.length > 0)) {
			showIfListHasData( initialData.Subsidiary, "org_dept");
			//showIfListHasData( initialData.Subsidiary, "org_Subsiduaries");
		}

		showIfListHasData( initialData.JurisdictionAssertions, "org_jurisdiction");
		showIfListHasData( initialData.CreatedCredentials, "org_credentials");
		showIfListHasData( initialData.HasConditionManifest, "org_ConditionManifest");
		showIfListHasData( initialData.HasCostManifest, "org_CostManifest");

		showIfListHasData( initialData.AdministrationProcess, "org_Processes");
		showIfListHasData( initialData.DevelopmentProcess, "org_Processes");
		showIfListHasData( initialData.MaintenanceProcess, "org_Processes");

		if ((initialData.ReviewProcess != null && initialData.ReviewProcess.length > 0)) {
			showIfListHasData( initialData.ReviewProcess, "org_reviewProcess");
		}

		if ((initialData.CriteriaProcess != null && initialData.CriteriaProcess.length > 0))
			showIfListHasData( initialData.CriteriaProcess, "org_devProcess");

		if ((initialData.RevocationProcess != null && initialData.RevocationProcess.length > 0))
			showIfListHasData( initialData.RevocationProcess, "org_RevocationProcess");

		if ((initialData.AppealProcess != null && initialData.AppealProcess.length > 0))
			showIfListHasData( initialData.AppealProcess, "org_appealProcess");

		if ((initialData.ComplaintProcess != null && initialData.ComplaintProcess.length > 0))
			showIfListHasData( initialData.ComplaintProcess, "org_complaintProcess");


		if ((initialData.VerificationStatus != null && initialData.VerificationStatus.length > 0))
			showIfListHasData( initialData.VerificationStatus, "org_verificationStatus");

		if ((initialData.VerificationService != null && initialData.VerificationService.length > 0))
			showIfListHasData( initialData.VerificationService, "org_verification");


		if ((initialData.Revocation != null && initialData.Revocation.length > 0))
			showIfListHasData( initialData.Revocation, "org_Revocation");
	}
	//
	function handleAssessmentData()
	{
		$('#btn_entity_basic').css({"background-color":"#94CD89"});
		showIfListHasData( initialData.RequiresCompetenciesFrameworks, "asmt_Competencies");
		showIfListHasData( initialData.AssessesCompetenciesFrameworks, "asmt_Competencies");
		showIfListHasData( initialData.AgentRole_Recipient, "asmt_roles");
		//showIfListHasData( initialData.QualityAssuranceAction_Recipient, "asmt_qaAction");
		showIfListHasData( initialData.CipCode, "asmt_cips");

		showIfListHasData( initialData.AssessmentConnections, "asmt_connections");

		showIfListHasData( initialData.Cost, "asmt_costs");
		showIfListHasData( initialData.CommonCosts, "asmt_Costs");

		showIfListHasData( initialData.Requires, "asmt_Conditions");
		showIfListHasData( initialData.Recommends, "asmt_Conditions");
		showIfListHasData( initialData.Corequisite, "asmt_Conditions");
		showIfListHasData( initialData.EntryCondition, "asmt_Conditions");
		showIfListHasData( initialData.CommonConditions, "asmt_Conditions");


		//showIfListHasData( initialData.AssessmentProcess, "asmt_processes");
		showIfListHasData( initialData.FinancialAssistance, "asmt_financialAlignment");

		showIfListHasData( initialData.AdministrationProcess, "asmt_process");
		showIfListHasData( initialData.DevelopmentProcess, "asmt_process");
		showIfListHasData( initialData.MaintenanceProcess, "asmt_process");
		showIfListHasData( initialData.AdministrationProcess, "asmt_extra");
		showIfListHasData( initialData.DevelopmentProcess, "asmt_extra");
		showIfListHasData( initialData.MaintenanceProcess, "asmt_extra");

		showIfListHasData( initialData.JurisdictionAssertions, "asmt_jurisdiction");
		showIfListHasData( initialData.IsPartOfCredential, "asmt_credentials");

		var orgName = "";
		if (initialData.OwningOrganization != null && initialData.DisplayOwningOrganization.Id > 0) {
			orgName = initialData.DisplayOwningOrganization.Name;
			var orgLink = "<a href='/editor/organization/{orgId}' target='credOrg'>{orgName}</a>"
                    .replace(/{orgId}/g, initialData.DisplayOwningOrganization.Id)
                    .replace(/{orgName}/g, orgName);

			$('#entityOwningOrg').html(orgLink);
		}
	}

	function handleLearningOppData()
	{
		$('#btn_entity_basic').css({"background-color":"#94CD89"});

		showIfListHasData( initialData.RequiresCompetenciesFrameworks, "lopp_Competencies");
		showIfListHasData( initialData.TeachesCompetenciesFrameworks, "lopp_Competencies");

		showIfListHasData( initialData.CipCode, "lopp_cips");

		showIfListHasData( initialData.AgentRole_Recipient, "lopp_roles");
		//showIfListHasData( initialData.QualityAssuranceAction_Recipient, "lopp_QAaction");
		showIfListHasData( initialData.Cost, "lopp_Costs");
		showIfListHasData( initialData.CommonCosts, "lopp_Costs");

		showIfListHasData( initialData.LearningOppConnections, "lopp_connections");

		showIfListHasData( initialData.Requires, "lopp_Conditions");
		showIfListHasData( initialData.Recommends, "lopp_Conditions");
		showIfListHasData( initialData.Corequisite, "lopp_Conditions");
		showIfListHasData( initialData.EntryCondition, "lopp_Conditions");

		showIfListHasData( initialData.CommonConditions, "lopp_Conditions");


		showIfListHasData( initialData.FinancialAssistance, "lopp_financialAlignment");
		showIfListHasData( initialData.JurisdictionAssertions, "lopp_jurisdiction");
		showIfListHasData( initialData.EmbeddedLearningOpportunity, "lopp_hasParts");
		//showIfListHasData( initialData.EmbeddedAssessment, "lopp_Assessments");
		showIfListHasData( initialData.IsPartOfCredential, "lopp_credentials");

		var orgName = "";
		if (initialData.OwningOrganization != null && initialData.DisplayOwningOrganization.Id > 0) {
			orgName = initialData.DisplayOwningOrganization.Name;
			var orgLink = "<a href='/editor/organization/{orgId}' target='credOrg'>{orgName}</a>"
                    .replace(/{orgId}/g, initialData.DisplayOwningOrganization.Id)
                    .replace(/{orgName}/g, orgName);

			$('#entityOwningOrg').html(orgLink);
		}
	}
	//check for content
	function showIfListHasData( list, section){

		if (list != null && list.length > 0) {
			//$('#btn_' + section).css({"background-color":"#94CD89"});
			$('#btn_' + section).addClass("sectionHasData");
			//show check mark??
			//$('#btn_' + section + '.fa-check-square').show();
		}
	}


</script>

<script type="text/javascript">
	//
	function registerEntity() {
		modal.confirm(
            "Register This Data",
            "Are you sure that you want to register this entity?",
            function () {
            	var context = {
            		IsTopLevel: true,
            		Profile: { Id: @Model.MainProfile.Id, RowId: "@Model.MainProfile.RowId", TypeName: "@mainProfileType" }
            	};
            	doAjax("Editor", "Register", context, success_Publish, null, null, true);
            },
            function() {}
        );
	}
	//
	function success_Publish(message, result){
		if(message.valid){
			consoleMessage.addSuccessMessage("Register was successful", "", 2000);
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 0);
		}
	}
	//
	function unRegisterEntity() {
		modal.confirm(
            "Un-Register from the Credential Registry",
            "Are you sure that you want to remove this entity from the Credential Registry?",
            function () {
            	var context = {
            		IsTopLevel: true,
            		Profile: { Id: @Model.MainProfile.Id, RowId: "@Model.MainProfile.RowId", TypeName: "@mainProfileType" }
            	};

            	doAjax("Editor", "Unregister", context, success_unRegister, null, null, true);
            },
            function() {}
        );
	}
	//
	function success_unRegister(message, result){
		if(message.valid){
			consoleMessage.addSuccessMessage("Remove was successful", "", 2000);
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 0);
		}
	}
</script>

<script type="text/javascript">
	/* Functions that vary based on the main object */
	function doGlobalSave(button){

		var profileData = readProperties($(".mainProfile"));

		profileData.LinkTest = { Test: "Success" };

		//Assemble object to send to the server
		var data = {
			Context: getProfileContext(0),
			Profile: JSON.stringify(profileData)
		};

		//Do save
		doAjax("Editor", "SaveProfile", data, success_doGlobalSave, $(button), null, true);
	}
	//

	function doGlobalPreview(){
		window.open("@Url.Content( "~/detail/" )" + mainProfileType + "/" + mainProfileId);
		@*
        switch(mainProfileType){
            case "Credential":
            case "Organization":
                window.open("@Url.Content( "~/" )" + mainProfileType + "management/detail2/" + mainProfileId);
                break;
            case "Assessment":
            case "LearningOpportunity":
                window.open("@Url.Content( "~/profile/" )" + mainProfileType + "/" + mainProfileId );
                break;
            default: break;
        }
        *@
	}
	//

	function doGlobalDelete(button){
		$(".mainProfile").addClass("aboutToDelete");
		modal.confirm("Delete All Data", "Are you sure you want to delete <b>all</b> data about @( string.IsNullOrWhiteSpace( Model.MainProfile.Name ) ? "this " + Model.MainProfile.TypeName : Model.MainProfile.Name )? This action cannot be undone!",
            function() {
            	var context = getProfileContext(0);
            	doAjax("Editor", "DeleteProfile", context, success_doGlobalDelete, $(button), null, true);
            },
            function() {
            	$(".mainProfile").removeClass("aboutToDelete");
            }
        );
	}
	//
	function validateUrl(textval)   // return true or false.
	{
		var urlregex = new RegExp(
              "^(http:\/\/www.|https:\/\/www.|ftp:\/\/www.|www.){1}([0-9A-Za-z]+\.)");
		return urlregex.test(textval);
	}
</script>
<script type="text/javascript">
	/* Profile functions */
	//Select a profile box via what is effectively a concatenated ID
	function getProfileBox(editorRepeaterID, profileProperty){
		var profile = getProfile(editorRepeaterID);
		return profile.find(".profileBox[data-property=" + profileProperty + "]");
	}
	//

	function getProfile(targetRepeaterID){
		return $(".profile[data-repeaterID=" + targetRepeaterID + "]");
	}
	//

	function getProfileContext(targetRepeaterID){
		var profile = getProfile(targetRepeaterID);
		var parentEditor = getProfile(profile.attr("data-parentRepeaterID"));
		return {
			IsTopLevel: profile.hasClass("mainProfile"),
			Main: { Id: mainProfileId, RowId: mainProfileRowId, TypeName: mainProfileType },
			Parent: { Id: parseInt(parentEditor.attr("data-recordID")), RowId: parentEditor.attr("data-recordRowID"), TypeName: parentEditor.attr("data-profile") },
			Profile: { Id: parseInt(profile.attr("data-recordID")), RowId: profile.attr("data-recordRowID"), TypeName: profile.attr("data-profile"), Property: profile.attr("data-property") }
		};
	}
	//

	function getProfileListItem(targetRepeaterID){
		return $(".profileList .profileItem[data-repeaterID=" + targetRepeaterID + "]");
	}
	//

	//Add a new profile
	function addNewProfile(parentRepeaterID, property, button){
		var profileBox = getProfileBox(parentRepeaterID, property);

		//Don't add to an unsaved profile
		var parentEditor = getProfile(parentRepeaterID);
		if(parentEditor.attr("data-recordID") == "0"){
			consoleMessage.addErrorMessage("You must save the profile before adding or editing this item.");
			return;
		}

		var profile = addProfile(parentRepeaterID, property, 0, "@Guid.Empty.ToString()", "New Unsaved Profile");
		consoleMessage.addSuccessMessage("Creating new profile...", "", 1000);
		editProfile(profile.attr("data-repeaterID"), button);

		return profile;
	}
	//

	//Add a new profile
	function addNewChildProfile(parentRepeaterID, property, button){
		var profileBox = getProfileBox(parentRepeaterID, property);

		//Don't add to an unsaved profile
		//will only be exposed under existing parent, but will this get an id??
		var parentEditor = getProfile(parentRepeaterID);
		//if(parentEditor.attr("data-recordID") == "0"){
		//    consoleMessage.addErrorMessage("You must save the profile before adding or editing this item.");
		//    return;
		//}

		var profile = addProfile(parentRepeaterID, property, 0, "@Guid.Empty.ToString()", "New Unsaved Profile");
		consoleMessage.addSuccessMessage("Creating new profile...", "", 1000);
		editProfile(profile.attr("data-repeaterID"), button);

		return profile;
	}
	//

	//Add a profile (new or existing) via parameters
	function addProfile(editorRepeaterID, profileProperty, profileRecordID, profileRecordRowID, profileName ){
		try {
			var box = getProfileBox(editorRepeaterID, profileProperty);
			var profileType = box.attr("data-profile");
			var list = box.find(".profileList"); //List of references to existing profiles
			var profiles = $("#profiles"); //Global list of profile editors
			var editorTemplate = $("#template_" + profileType).html();
			var listTemplate = $("#template_profileListItem").html();
			//hack to just get basics working
			if ((profileProperty == "Requires" || profileProperty == "Recommends")
                && profileName.toLowerCase().indexOf("alternativecondition") == -1)
				listTemplate = $("#template_profileChildListItem").html();

			//Add the editor to the profiles list
			var profile = $(editorTemplate
                .replace(/{parentRepeaterID}/g, editorRepeaterID)
                .replace(/{Property}/g, profileProperty)
                .replace(/{RecordId}/g, profileRecordID)
                .replace(/{RecordRowId}/g, profileRecordRowID)
                .replace(/{parentEditorName}/g, box.attr("data-parentEditor"))
                .replace(/{editorName}/g, box.attr("data-property") + "_" + repeaterID)
                .replace(/{repeaterID}/g, repeaterID)
                .replace(/{profileTitle}/g, box.attr("data-profileTitle"))
            ).appendTo(profiles);

			//Add a reference to the references list
			list.append(listTemplate
                .replace(/{Name}/g, profileName)
                .replace(/{repeaterID}/g, repeaterID)
                .replace(/{RecordId}/g, profileRecordID)
                .replace(/{RecordRowId}/g, profileRecordRowID)
            );

			//Update repeater ID
			repeaterID++;

			//Do basic initialization
			initializeProfiles();
			profile.find(".microSearchBox").each(function() {
				initializeMicroSearch($(this));
			});

			//Return the profile
			return profile;
		}
		catch(e){
			console.log("Failed to add profile!", e);
		}
	}
	//

	function editProfile(targetRepeaterID, button){
		//Identify the target
		var context = getProfileContext(targetRepeaterID);

		//Don't allow saving a profile if the parent isn't saved yet
		if(context.Parent.Id == 0){
			consoleMessage.addErrorMessage("You must save the profile before adding or editing this item.");
			return;
		}
		var lastRequest =JSON.stringify( context.Profile );
		var profileEntryTemplate = "{profileName};{rowId}"
                    .replace(/{profileName}/g, context.Profile.TypeName)
                    .replace(/{rowId}/g, context.Profile.RowId);
		addCurrentProfile( profileEntryTemplate );

		storageSetItem("lastProfile", context.Profile.TypeName);
		storageSetItem("lastProfileRowId", context.Profile.RowId);
		//Get the data - server handles immediate saves of certain new profiles
		doAjax("Editor", "GetProfile", context, success_getProfile, $(button), targetRepeaterID, true);

	}
	//

	//Show a profile editor
	function showProfile(targetRepeaterID){
		var profiles = $("#profiles");
		var profile = profiles.find(".profile[data-repeaterID=" + targetRepeaterID + "]");
		$("#overlay").attr("data-visible", "true");
		profile.attr("data-visible", "true").css("z-index", editZIndex);
		editZIndex++;
		if(editZIndex > 9000){
			editZIndex = 100;
			profiles.find(".profile").each(function() {
				$(this).css("z-index", 100);
			});
		}

		//Ensure tooltips are initialized
		setupTooltips();
	}
	//

	//Save changes to a profile
	function saveProfile(targetRepeaterID, button, postAutoSaveFunction, closeProfile, addAnother){
		var editor = getProfile(targetRepeaterID);
		var profileData = readProperties(editor);

		//Assemble object to send to the server
		var data = {
			Context: getProfileContext(targetRepeaterID),
			Profile: JSON.stringify(profileData)
		};

		//Do save
		doAjax("Editor", "SaveProfile", data, success_saveProfile, $(button), { targetRepeaterID: targetRepeaterID, postAutoSaveFunction: postAutoSaveFunction, closeProfile: closeProfile, addAnother: addAnother }, true);
	}
	//

	//Cancel editing a profile
	function cancelProfile(targetRepeaterID){
		modal.confirm("Cancel Changes", "Really cancel changes? You will lose any unsaved data!",
            function() {
            	var profiles = $("#profiles");
            	var profile = profiles.find(".profile[data-repeaterID=" + targetRepeaterID + "]");

            	//Remove the profile if its ID was zero
            	if(profile.attr("data-recordID") == "0"){
            		profile.remove();
            		$(".profileList .profileItem[data-repeaterID=" + targetRepeaterID + "]").remove();
            	}

            	closeProfile(targetRepeaterID, true);

            	//TODO: re-render this profile from loaded data

            }
            ,
            function() {
            	return;
            }
        );
	}

	//Cancel editing a profile
	function confirmCloseProfile(targetRepeaterID){
		modal.confirm("Close Window", "Confirm that you wish to close this window? Make sure that you have saved your data!",
            function() {
            	var profiles = $("#profiles");
            	var profile = profiles.find(".profile[data-repeaterID=" + targetRepeaterID + "]");

            	//Remove the profile if its ID was zero
            	if(profile.attr("data-recordID") == "0"){
            		profile.remove();
            		$(".profileList .profileItem[data-repeaterID=" + targetRepeaterID + "]").remove();
            	}

            	//this needs to be handled differently. The following 'pops' the current profile - don't want to when closing a popup
            	closeProfile(targetRepeaterID, false);

            	//TODO: re-render this profile from loaded data

            }
            ,
            function() {
            	return;
            }
        );
	}
	//

	//Close an open profile after saving or cancelling
	function closeProfile(targetRepeaterID, removingCurrentProfile){
		var profiles = $("#profiles");
		var profile = profiles.find(".profile[data-repeaterID=" + targetRepeaterID + "]");

		//Hide the profile
		profile.attr("data-visible", "false");
		// remove (pop) as current parent profile
		if (removingCurrentProfile)
			removeCurrentProfile();

		//Hide the overlay if no more profiles are being edited
		var stillEditing = false;
		profiles.find(".profile").each(function() {
			if($(this).attr("data-visible") == "true"){
				stillEditing = true;
			}
		});
		if(!stillEditing){
			$("#overlay").attr("data-visible", "false");
		}

	}
	//

	//Delete a profile
	function deleteProfile(targetRepeaterID, button){
		var profile = $("#profiles .profile[data-repeaterID=" + targetRepeaterID + "]");
		var listItem = getProfileListItem(targetRepeaterID);
		profile.addClass("aboutToDelete");
		listItem.addClass("aboutToDelete");
		modal.confirm("Delete Profile", "Really delete " + listItem.find(".name").text() + "? This cannot be undone!",
            function() {
            	//Get context
            	var context = getProfileContext(targetRepeaterID);

            	//Do the delete
            	doAjax("Editor", "DeleteProfile", context, success_deleteProfile, $(button), targetRepeaterID, true);
            }
            ,
            function() {
            	profile.removeClass("aboutToDelete");
            	listItem.removeClass("aboutToDelete");
            }
        );
	}
	//
</script>
<script type="text/javascript">
	/* AJAX Functions */

	function showSpinner(){
		$("#waitWrapper").stop().fadeIn(250);
	}
	//

	function hideSpinner() {
		$("#waitWrapper").stop().fadeOut(250);
	}
	//

	function doAjax(controller, method, data, success, button, passThrough, useSpinner) {
		//Disable the button
		if(button){
			button.attr("data-originalValue", button.attr("value")).attr("value", "Working...").prop("disabled", true);
		}

		//Show spinner if appropriate
		if(useSpinner){
			showSpinner();
		}

		//Make the request
		$.ajax({
			url: "@Url.Content( "~/" )" + controller + "/" + method,
			async: true,
			headers: { "Accept": "application/json", "Content-type": "application/json; charset=utf-8" },
			dataType: "json",
			type: "POST",
			data: JSON.stringify(data),
			success: function (message) {
				console.log("Response: ", message);
				if (typeof (success) == "function") {
					success(message, passThrough);
				}
			}
		}).always(function() {
			//Reenable the button
			if(button){
				button.attr("value", button.attr("data-originalValue")).prop("disabled", false);
			}
			hideSpinner();
		});
	}
	//

	function success_doGlobalSave(message, passThrough){
		if(message.valid){
			//Update Editor
			mainProfileId = message.extra.Id;
			//isThisNew will be false if there is no currentMainProfileId
			var isThisNew = !hasProfileId();

			$('#currentMainProfileId').val(mainProfileId);
			if (hasProfileId()) {
				handleSectionDisplay();
			}

			mainProfileRowId = message.extra.RowId;
			var editor = $("#editor .mainProfile");
			editor.attr("data-recordID", message.extra.Id);
			editor.attr("data-recordRowID", message.extra.RowId);
			writeProfile(editor, message.data);

			//Inform user
			consoleMessage.addSuccessMessage("Save successful", "", 2000);

			//Update progress

			updateProgress();
			//check if in iframe
			//note on multiple saves, MainProfileId is still zero
			//@Model.MainProfile.Id
			if (isThisNew && window.self !== window.top ) {
				console.log("IFRAME: added child entity: ", mainProfileType);
				console.log("     Model.ParentRequestType: ", "@Model.ParentRequestType");
				handlePopupRequest();

			}
			//not really useful??
			//storageSetCurrentMainProfileRowId(mainProfileType, message.extra.RowId);
			//enable redirect???
			//==> NEED TO CHANGE AWAY FROM THIS APPROACH, AS SLOW
			//      problem is the need to rearrange panels, etc.
			if (@Model.MainProfile.Id == 0 && mainProfileType == "Credential") {
				//alert("Added Credential - doing redirect!");
				//on redirect, need to retain parameters

				window.location.href = '/editor/Credential/' + mainProfileId + "?" + requestQueryString;
			}
			@*   if (@Model.MainProfile.Id == 0 && mainProfileType == "Organization") {
                window.location.href = '/editor/Organization/' + mainProfileId + '?V2=true';
            } else if (@Model.MainProfile.Id == 0 && mainProfileType == "Assessment") {
                window.location.href = '/editor/Assessment/' + mainProfileId + '?V2=true';
            } else if (@Model.MainProfile.Id == 0 && mainProfileType == "LearningOpportunity") {
                window.location.href = '/editor/learningopportunity/' + mainProfileId + '?V2=true';
            }*@
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 0);
		}
	}
	//

	function handlePopupRequest()
	{
		if ("@Model.ParentRequestType".length > 1) {
			//not any distinct differences on type of request yet
			storageItemAppend("@Model.ParentRequestType", mainProfileId, mainProfileRowId);

			@*if (mainProfileType == "Credential") {
                //only one source? condition profile? id or rowId??
                storageItemAppend("@Model.ParentRequestType", mainProfileId, mainProfileRowId);

            } else if (mainProfileType == "Organization") {
                storageItemAppend("@Model.ParentRequestType", mainProfileId, mainProfileRowId);
            } else if (mainProfileType == "Assessment") {
                storageItemAppend("@Model.ParentRequestType", mainProfileId, mainProfileRowId);
            } else if (mainProfileType == "LearningOpportunity") {

                storageItemAppend("@Model.ParentRequestType", mainProfileId, mainProfileRowId);
            }*@
		}

	}
	//

	function success_doGlobalDelete(message, passThrough){
		if(message.valid){
			consoleMessage.addSuccessMessage("This data has been deleted");
			setTimeout(function() {
				window.location.href = "@Url.Content("~/Search")";
			}, 2000);
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 0);
		}
	}
	//

	function success_getProfile(message, passThrough){
		if(message.valid){
			var profile = getProfile(passThrough);

			try {
				writeProfile(profile, message.data);
			}
			catch(e){
				console.log("Error injecting data into profile!", e);
				consoleMessage.addErrorMessage("Error getting profile data.", 0);
			}

			showProfile(passThrough);
		}
		else{
			consoleMessage.addErrorMessage(message.status, "", 0);
		}
	}
	//

	function success_saveProfile(message, passThrough){
		if(message.valid){
			//Update Editor
			var editor = getProfile(passThrough.targetRepeaterID);
			editor.attr("data-recordID", message.extra.Id);
			editor.attr("data-recordRowID", message.extra.RowId);

			//Write data to the profile
			writeProfile(editor, message.data, true);

			//Update list item
			var listItem = getProfileListItem(passThrough.targetRepeaterID);
			//listItem.find(".name").text(message.extra.Name);
			listItem.find(".name").html(message.extra.Name);

			//If the save was the result of an auto save, perform the next action
			if(passThrough.postAutoSaveFunction){
				passThrough.postAutoSaveFunction();
			}
				//Otherwise...
			else {
				//Inform user
				consoleMessage.addSuccessMessage("Save successful", "", 2000);
			}


			//Optionally, close the editor
			if(passThrough.closeProfile){
				closeProfile(passThrough.targetRepeaterID, true);
			}

			//Optionally, add another immediately
			if(passThrough.addAnother){
				addNewProfile(editor.attr("data-parentRepeaterID"), editor.attr("data-property"), null);
			}

			//Update progress
			updateProgress();
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 0);
		}
	}
	//

	function success_deleteProfile(message, passThrough){
		if(message.valid){
			var editor = getProfile(passThrough);
			var listItem = getProfileListItem(passThrough);

			//Inform user
			consoleMessage.addSuccessMessage("Delete successful", "", 2000);

			//Close the editor if it's open
			closeProfile(passThrough, true);

			//Remove the HTML
			editor.remove();
			listItem.remove();
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 0);
		}
	}
	//

	function success_addInitialMicrosearchResults(message, passThrough){
		if(message.valid){
			renderMicroSearchResults(message.data, passThrough, true, true);
		}
		else {
			console.log("Error updating micro search: ", message.status)
		}
	}
	//

	function success_addInitialCassResults(message, passThrough){
		if(message.valid){
			var browser = cass.getBrowser(passThrough.browserID);
			for(var i in message.data){
				cass.renderSelectedCompetency(browser, browser.existingItemsBox, data[i]);
			}
		}
		else{
			console.log("Error updating CASS Browser: ", message.status)
		}
	}
	//
</script>
<script type="text/javascript">
	/* Read functions */
	function readProperties(profile){
		//Get properties
		var properties = profile.find(".propertyInput");
		var data = {
			Id: parseInt(profile.attr("data-recordID")),
			RowId: profile.attr("data-recordRowID")
		};
		properties.each(function() {
			var property = $(this);
			data[property.attr("data-property")] = readProperty(property);
		});
		console.log("Data", data);

		//Get "other" boxes
		var others = profile.find(".otherInput");
		var otherData = {};
		var hasOtherData = false;
		others.each(function(){
			var other = $(this);
			otherData[other.attr("data-otherproperty")] = other.val();
			hasOtherData = true;
		});
		if(hasOtherData){
			data.Other = otherData;
		}

		//Get MicroSearches that don't do immediate saves
		var searches = profile.find(".microSearchBox[data-doAjaxSave=false]").each(function() {
			var search = $(this);
			data[search.attr("data-property")] = readMicroSearch(search.attr("data-microsearchname"));
		});

		//Handle CASS Browsers
		var cassBrowsers = profile.find(".cassBrowser").each(function() {
			var browser = $(this);
			data[browser.attr("data-property")] = cassReadBrowser(browser);
		});

		//Special handling for TextValueProfiles
		var textValues = profile.find(".textValueBox").each(function() {
			var textValue = $(this);
			data[textValue.attr("data-property")] = readTextValues(textValue.attr("data-textValueName"));
		});

		//Special handling for selectors (used with durations)
		var selectors = profile.find(".radioSelector");
		selectors.each(function() {
			var selector = $(this);
			data[selector.attr("data-sectionProperty")] = selector.find(".radioSection [data-sectionValue]:checked").attr("data-sectionValue");
		});

		//Return data
		return data;
	}
	//

	function readProperty(property){
		switch(property.attr("data-type")){
			case "text":
			case "url":
			case "date":
				return property.val();
			case "number":
				return readNumber(property.val());
			case "boolean":
				return property.prop("checked");
			case "select":
				return readSelect(property);
			case "checkboxlist":
				return readCheckboxlist(property);
			case "radiolist":
				return readRadioButtonlist(property);
			case "duration":
				return readDuration(property);
			case "nullable_boolean":
				var value = property.find(":checked").attr("value"); //true, false, or null
				return value == "true" ? true : value == "false" ? false : null;
			default:
				console.log("Unable to read property: ", property);
				return null;
		}
	}
	//

	function readNumber(text){
		try {
			//Strip all non-numeric characters
			var numbers = "1234567890.";
			var cleaned = [];
			for(var i in text){
				if(numbers.indexOf(text[i]) > -1){
					cleaned.push(text[i]);
				}
			}
			text = cleaned.join("");
			//Parse the value and return it
			var data = parseFloat(text);
			if(isNaN(data)){
				return 0;
			}
			return data;
		}
		catch (e) {
			return 0;
		}
	}
	//

	function readSelect(property){
		var value = property.find("option:selected").attr("value");
		if(property.attr("data-valuetype") == "number"){
			return readNumber(value);
		}
		else {
			return value;
		}
	}
	//

	function readCheckboxlist(property, single){
		var items = [];
		property.find("input[type=checkbox]:checked,input[type=radio]:checked").each(function(){
			switch(property.attr("data-valuetype")){
				case "number":
					items.push(parseInt($(this).val()));
					break;
				default:
					items.push($(this).val());
					break;
			}
		});
		if (single && items.length > 0)
			return items[0];
		else
			return items;
	}
	//

	function readRadioButtonlist(property){
		var items = [];
		property.find("input[type=radio]:checked").each(function(){
			switch(property.attr("data-valuetype")){
				case "number":
					items.push(parseInt($(this).val()));
					break;
				default:
					items.push($(this).val());
					break;
			}
		});
		if (items.length > 0)
			return items[0];
		else
			return "";
	}
	//
	function readDuration(property){
		var data = {};
		property.find("[data-subproperty]").each(function() {
			var subproperty = $(this);
			var value = subproperty.val().trim();
			data[subproperty.attr("data-subproperty")] = value.length == 0 ? 0 : isNaN(parseInt(value)) ? 0 : parseInt(value);
		});
		return data;
	}
	//

</script>
<script type="text/javascript">
	/* Write functions */
	function writeProfile(editor, properties, skipTextValues){
		//Write attributes
		editor.attr("data-RecordID", properties.Id);
		editor.attr("data-RecordRowID", properties.RowId);
		//Write properties
		writeProperties(editor, properties);
		//Write profile links
		writeProfileLinks(editor, properties);
		//Write MicroSearches
		writeMicroProfiles(editor, properties);
		//Write CASS Browsers
		writeCassBrowsers(editor, properties);
		//Handle TextValueProfiles
		writeTextValues(editor, properties);
		//Handle special conditions
		writeProfileConditions(editor, properties);
		//Handle last updated date
		writeProfileUpdate(editor, properties);
	}
	//

	//write out the profile links
	function writeProfileLinks(editor, properties){
		var profiles = editor.find(".profileBox");
		profiles.each(function() {
			var profile = $(this);

			//Remove existing html
			var existing = profile.find(".profileItem");
			existing.each(function() {
				var exist = $(this);
				getProfile(exist.attr("data-repeaterID")).remove();
				exist.remove();
			});

			//Replace with new html
			var matchingData = properties[profile.attr("data-property")];
			if(typeof(matchingData) != "undefined" && matchingData != null){
				for(var i in matchingData){
					addProfile(editor.attr("data-repeaterID"), profile.attr("data-property"), matchingData[i].Id, matchingData[i].RowId, matchingData[i].Name );
				}
			}
		});
	}
	//

	function writeProperties(editor, properties){
		//Write inputs
		var inputs = editor.find(".propertyInput");
		inputs.each(function() {
			var input = $(this);
			var matchingData = properties[input.attr("data-property")];
			if(typeof(matchingData) != "undefined" && matchingData != null){
				writeProperty(input, matchingData);
			}
			else {
				//Clear input
				try { input.prop("checked", false); } catch(e){}
				try { input.val("").trigger("change"); } catch(e){}
				try { input.find("option[value=0]").prop("selected",true).parent().trigger("change"); } catch(e){}
				try { input.find("input[type=checkbox]").prop("checked", false); } catch(e){}
			}
		});

		//Write "other" fields
		var others = editor.find(".otherInput");
		others.each(function() {
			var other = $(this);
			try {
				other.val(properties.Other[other.attr("data-otherproperty")]);
			}
			catch(e) {
				console.log("Unable to write \"Other\" property:");
				console.log("Input:", other);
				console.log("Data:", properties);
			}
		});


		//Write "label/header" fields
		var headers = editor.find(".viewHeader");
		headers.each(function() {
			var header = $(this);
			var matchingHdr = properties[header.attr("data-property")];
			if(typeof(matchingHdr) != "undefined" && matchingHdr != null){
				header.html(matchingHdr);
			}

		});
	}
	//

	function writeProperty(input, data){
		switch(input.attr("data-type")){
			case "text":
			case "url":
			case "date":
				input.val(data);
				break;
			case "label":
				input.html(data);
				break;
			case "number":
				if(data != 0 && data != "0") {
					input.val(data);
				}
				break;
			case "boolean":
				input.prop("checked", data);
				if(data && input.attr("data-enableuncheck") == "false"){
					input.prop("disabled", true);
				}
				break;
			case "select":
				input.find("option[value=" + data + "]").prop("selected", true);
				break;
			case "checkboxlist":
				writeCheckboxlist(input, data);
				break;
			case "radiolist":
				writeRadioList(input, data);
				break;
			case "duration":
				writeDuration(input, data);
				break;
			case "nullable_boolean":
				console.log(input);
				input.find("[value=" + ( data == true ? "true" : data == false ? "false" : "null" ) + "]").prop("checked", true);
				break;
			default:
				console.log("Unable to write property:");
				console.log("Input:", input);
				console.log("Data:", data);
				break;
		}
	}
	//

	function writeCheckboxlist(input, data){
		for(var i in data){
			input.find("input[type=checkbox][value=" + data[i] + "]").prop("checked", true);
		}
	}
	//

	function writeRadioList(input, data){
		if (data != undefined || data != "")
			input.find("input[type=radio][value=" + data + "]").prop("checked", true);

	}
	function writeDuration(input, data){
		for(var i in data){
			input.find("[data-subproperty=" + i + "]").val(data[i]);
		}

	}
	//

	function refreshMicroProfilesForProperty(propertyNameList){
		for(var i in propertyNameList){
			var searches = $(".microSearchBox[data-property='" + propertyNameList[i] + "']");
			searches.each(function() {
				var box = $(this);
				var parentRepeaterID = parseInt(box.attr("data-parentRepeaterID"));
				var searchType = box.attr("data-searchType");
				var data = {
					context: getProfileContext(parentRepeaterID),
					searchType: searchType,
					propertyName: propertyNameList[i]
				};
				//Get the data
				doAjax("Editor", "RefreshMicroProfiles", data, success_addInitialMicrosearchResults, null, box.attr("data-microsearchName"), false);
			});
		}
	}
	//

	function writeMicroProfiles(editor, properties){
		var searches = editor.find(".microSearchBox");
		searches.each(function() {
			var box = $(this);
			//Initialize the search if it isn't already
			initializeMicroSearch(box);
			//Continue
			var matchingData = properties[box.attr("data-property")];
			if(typeof(matchingData) == "object"){
				//Ensure data is an array
				matchingData = typeof(matchingData.length) == "undefined" ? [matchingData] : matchingData;
				if(matchingData.length > 0){
					//Filter out any empty objects
					var finalData = [];
					for(var i in matchingData){
						if(matchingData[i].Id != 0 || matchingData[i].RowId != "@Guid.Empty.ToString()"){
							finalData.push(matchingData[i]);
						}
					}
					//If there are any legitimate objects, continue
					if(finalData.length > 0){
						//Setup the context
						var data = {
							context: getProfileContext(editor.attr("data-repeaterID")),
							searchType: box.attr("data-searchType"),
							items: finalData
						};
						//Get the data
						doAjax("Editor", "GetMicroProfiles", data, success_addInitialMicrosearchResults, null, box.attr("data-microsearchName"), false);
					}
				}
			}
		});
	}
	//

	function writeCassBrowsers(editor, properties){
		var cassBrowsers = editor.find(".cassBrowser");
		//Initialize CASS browsers (will auto-skip browsers that are already initialized)
		cass.initialize();
		cassBrowsers.each(function() {
			var box = $(this);
			var matchingData = properties[box.attr("data-property")];
			if(typeof(matchingData) == "object"){
				//Ensure the data is an array
				if(Array.isArray(matchingData) && matchingData.length > 0){
					//Setup the context
					var data = {
						context: getProfileContext(editor.attr("data-repeaterID")),
						items: matchingData
					};
					//Get the data
					doAjax("Editor", "GetCASSCompetencies", data, success_addInitialCassResults, null, { browserID: box.attr("data-browserID") }, false);
				}
			}
		});
	}
	//

	function writeProfileConditions(editor, properties){
		switch(editor.attr("data-profile")){
			case "DurationProfile":
				editor.find("[data-sectionProperty=IsRange] [data-sectionValue=" + properties.IsRange + "]").prop("checked", true).trigger("change");
				break;
			default: break;
		}
	}
	//

	function writeProfileUpdate(editor, properties){
		var historyBox;
		if(editor.hasClass("mainProfile")){
			historyBox = $("#globalButtons .profileHistory");
		}
		else {
			historyBox = editor.find(".profileHistory");
		}
		try {
			if(historyBox.length > 0 && properties.LastUpdatedUserName != ""){
				historyBox.attr("data-hasUpdate", "true");
				historyBox.find(".profileHistoryUser").html(properties.LastUpdatedUserName);
				historyBox.find(".profileHistoryTimestamp").html(properties.LastUpdatedTimestamp);
			}
		}
		catch (e) {}
	}
	//
</script>
<script type="text/javascript">
	/* Page functions */

	//Update the progress gauge
	function updateProgress(){
		//Detect profile progress

		//Update gauge

	}
	//

</script>
<script type="text/javascript">
	/* Rendering functions */
</script>
<script type="text/javascript">
	/* MicroSearch V2 Functions */
	var microSearchTimeouts = [];
	/* global variable for results of microsearches*/
	var resultID = 0;

	//Initialize MicroSearch
	function initializeMicroSearch(box){
		if(!box.hasClass("microSearchInitialized")){
			box.addClass("microSearchInitialized");

			box.find(".microSearchFilter").not("[type=text]").on("change", function() {
				updateMicroSearch(box.attr("data-microSearchName"), null);
			})
			box.find(".microSearchFilter[data-type=text]").on("keyup", function(e){
				updateMicroSearch(box.attr("data-microSearchName"), e);
			});
		}
	}
	//

	//Reset timeout
	function updateMicroSearch(name, event){
		clearTimeout(microSearchTimeouts[name]);
		microSearchTimeouts[name] = setTimeout(function() {
			doMicroSearch(name);
		}, 800);
	}
	//

	//Get a MicroSearch Box
	function getMicroSearchBox(name){
		return $(".microSearchBox[data-microsearchname='" + name + "']");
	}
	//

	//Set a MicroSearch status
	function setMicroSearchStatus(name, message, status){
		getMicroSearchBox(name).find(".microSearchStatus").attr("data-status", status).html(message);
	}
	//

	//Do a MicroSearch
	function doMicroSearch(name, isPaging){
		var box = getMicroSearchBox(name);
		var searchType = box.attr("data-searchType");
		var context = getProfileContext(box.attr("data-parentRepeaterID"));

		var filters = [];

		//Get filters
		box.find(".microSearchFilter").each(function() {
			var filter = $(this);
			var item = { Name: filter.attr("data-filterName") };
			switch(filter.attr("data-type")){
				case "text":
					item.Value = filter.val().trim();
					break;
				case "select":
					item.Value = filter.find("option:selected").attr("value");
					break;
				default: break;
			}

			filters.push(item);
		});

		//Reset paging unless the search is happening because another page was selected
		var pageNumber = isPaging ? parseInt(box.attr("data-pageNumber")) : 1;

		//Construct the query
		var query = { SearchType: searchType, Filters: filters, PageNumber: pageNumber, pageSize: parseInt(box.attr("data-pageSize")), PageContext: "MainSiteEditor" };

		//Check for identical query to avoid duplicate searches
		var stringified = JSON.stringify(query);
		if(stringified == box.attr("data-previous")){
			console.log("Skipping identical MicroSearch:", query);
			return;
		}

		//Update previous query data
		box.attr("data-previous, stringified");

		//Update paging in the box if it was reset
		if(!isPaging){
			box.attr("data-pageNumber", pageNumber);
		}

		//Do the search
		console.log("Doing MicroSearch:", query);
		setMicroSearchStatus(name, "Searching...", "searching");
		doAjax("Editor", "DoMicroSearch", query, success_doMicroSearch, null, name, false);
	}
	//

	//Successfully complete a MicroSearch
	function success_doMicroSearch(message, name){
		console.log("MicroSearch complete:", message);
		if(message.valid){
			renderMicroSearchResults(message.data, name, false, true);
			renderMicroSearchPaging(name, message.extra);
			setMicroSearchStatus(name, "Found " + message.extra + " Results", "success");
		}
		else {
			consoleMessage.addErrorMessage("Error performing Search: " + message.status, "", 10000);
			setMicroSearchStatus(name, "Error: " + message.status, "error");
		}
	}
	//

	//Render MicroSearch results
	function renderMicroSearchResults(data, name, isSaved, isOverwrite){
		var box = getMicroSearchBox(name);

		//Get the template and the box it goes in
		var templateName = box.attr("data-profileTemplate");
		if (templateName == undefined)
			return;

		var template = $("#template_MicroProfile_" + templateName).html();
		var resultsBox = box.find(".microSearchResults");
		var savedBox = box.find(".microSearchSavedItemsList");

		var targetBox = isSaved ? savedBox : resultsBox;

		//Empty the template if necessary
		if(isOverwrite){
			targetBox.html("");
		}

		//Render the properties
		for(var i in data){
			var item = data[i];
			var heading2 = (item.Heading2 || "").replace("null","");
			var desc = (item.Description || "").replace("null","");
			var html = template
                .replace(/{rawData}/g, JSON.stringify(item))
                .replace(/{resultID}/g, resultID)
                .replace(/{Selectors}/g, JSON.stringify(item.Selectors))
                .replace(/{Id}/g, item.Id)
                .replace(/{Name}/g, item.Name)
                .replace(/{Heading2}/g, heading2)
                .replace(/{Description}/g, desc.toLowerCase() == (item.Name || "").toLowerCase() ? "" : desc)
                .replace(/{microSearchName}/g, box.attr("data-microsearchName"))
                .replace(/{profileType}/g, box.attr("data-profileType"))
                .replace(/{Properties}/g, renderMicrosearchProperties(item.Properties))
                .replace(/{rawProperties}/g, JSON.stringify(item.Properties));

			for(var j in item.Properties){
				html = html.replace(new RegExp("{" + j + "}", "g"), item.Properties[j]);
			}

			//Update the box
			targetBox.append(html);

			//Show/hide the "no saved items" message
			if(isSaved){
				if(targetBox.find(".microProfile").length > 0){
					box.find(".microSearchNoItems").hide();
				}
				else {
					box.find(".microSearchNoItems").show();
				}
			}

			//Update the result ID
			resultID++;
		}
	}
	//

	//Render MicroSearch Paging
	function renderMicroSearchPaging(name, totalResults){
		console.log(totalResults);
		var box = getMicroSearchBox(name);
		var pagingBox = box.find(".microSearchPaging");
		var pageButtonTemplate = $("#template_MicroSearch_PageButton").html();
		var pageSize = parseInt(box.attr("data-pageSize"));
		var currentPage = parseInt(box.attr("data-pageNumber"));
		var totalPages = totalResults == 0 ? 0 : Math.ceil(totalResults / pageSize);
		var skips = [1, 5, 10, 20, 30, 40, 50, 75, 100, 1000, totalPages];
		var minRange = currentPage - 2;
		var maxRange = currentPage + 2;

		pagingBox.html("");
		for(var i = 1; i <= totalPages; i++){
			if(skips.indexOf(i) > -1 || (i >= minRange && i <= maxRange)){
				pagingBox.append(pageButtonTemplate
                    .replace(/{microSearchName}/g, name)
                    .replace(/{pageNumber}/g, i)
                    .replace(/{current}/g, i == currentPage ? "current" : "")
                );
			}
		}
	}
	//

	//Set MicroSearch Page
	function setMicroSearchPage(name, pageNumber){
		var box = getMicroSearchBox(name);
		box.attr("data-pageNumber", pageNumber);
		doMicroSearch(name, true);
	}
	//

	//Render MicroSearch properties
	function renderMicrosearchProperties(properties){
		var result = "";
		for(var i in properties){
			result = result + "<div data-microproperty=\"" + i + "\">" + (properties[i] || "") + "</div>";
		}
		return result;
	}
	//

	//Get selected items from a MicroSearch
	function readMicroSearch(name){
		var box = getMicroSearchBox(name);
		var results = box.find(".microSearchSavedItems .microProfile");
		var staticValues = JSON.parse(box.find(".staticSelectorValues").text());
		var multiple = box.attr("allowMultipleSavedItems") == "true";
		var data = [];

		results.each(function() {
			var selectors = JSON.parse( $(this).find(".selectors").text());

			//Add/overwrite static values
			for(var i in staticValues){
				selectors[i] = staticValues[i];
			}

			data.push(selectors);
		});

		if(multiple){
			return data;
		}
		else {
			return data[0];
		}
	}
	//

	//Copy a MicroSearch Result to the parent profile's fields
	function copyMicroProfile(name, resultID){
		var box = getMicroSearchBox(name);
		var result = box.find("[data-resultID=" + resultID + "]");
		var data = JSON.parse(result.find(".rawProperties").text());
		var profile = getProfile(box.attr("data-parentRepeaterID"));
		writeProfile(profile, data, false);
	}
	//

	//Save a MicroSearch Result
	function saveMicroProfile(name, resultID, button){
		var box = getMicroSearchBox(name);
		var result = box.find("[data-resultID=" + resultID + "]");
		var selectors = JSON.parse(result.find(".selectors").text());
		var staticValues = JSON.parse(box.find(".staticSelectorValues").text());
		var context = getProfileContext(box.attr("data-parentRepeaterID"));
		var searchType = box.attr("data-searchType");
		var property = box.attr("data-property");
		var allowMultipleSavedItems = box.attr("data-allowMultipleSavedItems") == "true";

		//Only continue if immediate save is enabled
		if(box.attr("data-doAjaxSave") != "true"){
			var rawData = JSON.parse(result.find(".rawData").text());
			renderMicroSearchResults([rawData], name, true, !allowMultipleSavedItems);
			return;
		}

		//Add/overwrite static values
		for(var i in staticValues){
			selectors[i] = staticValues[i];
		}

		if(context.Profile.Id == 0 && box.attr("data-autoSaveNewParentProfile") == "true"){
			console.log("Auto-saving parent profile");
			saveProfile(box.attr("data-parentRepeaterID"), button, function() {
				saveMicroProfile(name, resultID, button);
			}, false);
		}
		else {
			doAjax("Editor", "SaveMicroProfile", { context: context, selectors: selectors, searchType: searchType, property: property, allowMultiple: allowMultipleSavedItems }, success_saveMicroProfile, button, { name: name, resultID: resultID }, false);
		}

	}
	//

	//Successfully save a MicroSearch Result
	function success_saveMicroProfile(message, passThrough){
		var box = getMicroSearchBox(passThrough.name);
		var result = box.find("[data-resultID=" + resultID + "]");
		console.log(message);

		if(message.valid){
			consoleMessage.addSuccessMessage("Selection saved", "", 2000);
			renderMicroSearchResults([message.data], passThrough.name, true, box.attr("data-allowmultiplesaveditems") != "true");
			if(box.attr("data-autoPropertyRefresh").length > 0){
				refreshMicroProfilesForProperty(box.attr("data-autoPropertyRefresh").split(","));
			}
		}
		else {
			consoleMessage.addErrorMessage(message.status, 0);
		}

	}
	//

	//Delete a MicroSearch Result
	function deleteMicroProfile(name, resultID, button){
		var box = getMicroSearchBox(name);
		var result = box.find("[data-resultID=" + resultID + "]");
		var selectors = JSON.parse(result.find(".selectors").text());
		var staticValues = JSON.parse(box.find(".staticSelectorValues").text());
		var context = getProfileContext(box.attr("data-parentRepeaterID"));
		var searchType = box.attr("data-searchType");
		var property = box.attr("data-property");

		//Add/overwrite static values
		for(var i in staticValues){
			selectors[i] = staticValues[i];
		}

		result.addClass("aboutToDelete");
		modal.confirm("Delete Selection", "Really remove this item?",
            function() {
            	doAjax("Editor", "DeleteMicroProfile", { context: context, selectors: selectors, searchType: searchType, property: property }, success_deleteMicroProfile, button, { name: name, resultID: resultID }, false);
            },
            function() {
            	result.removeClass("aboutToDelete");
            }
        );
	}
	//

	//Successfully delete a MicroSearch Result
	function success_deleteMicroProfile(message, passThrough){
		var box = getMicroSearchBox(passThrough.name);
		var result = box.find("[data-resultID=" + passThrough.resultID + "]");
		console.log(message);

		if(message.valid){
			//check for additional message in status
			if (message.status.length > 5)
				consoleMessage.addSuccessMessage("Item removed<br/>" + message.status, "", 5000);
			else
				consoleMessage.addSuccessMessage("Item deleted", "", 2000);
			result.remove();
			if(box.attr("data-autoPropertyRefresh").length > 0){
				refreshMicroProfilesForProperty(box.attr("data-autoPropertyRefresh").split(","));
			}
		}
		else {
			consoleMessage.addErrorMessage(message.status, 0);
		}
	}
	//

	//Reset a MicroSearch query, results, and paging
	function resetMicroSearch(name){
		var box = getMicroSearchBox(name);
		box.find(".microSearchFilter:not(.offscreen)").each(function() {
			try { $(this).val(""); } catch(e) { }
			try { $(this).find("option").first().prop("selected", true); } catch (e) { }
		});
		box.find(".microSearchResults").html("");
		box.find(".microSearchPaging").html("");
		box.attr("data-pageNumber", "1");
		box.attr("data-previous", "");

		setMicroSearchStatus(name, "", "");
	}
	//
</script>
<script type="text/javascript">
	//Create a starter profile and immediately associate it as a result
	function createStarterProfile(name, allowEmptyParent){
		var box = getMicroSearchBox(name);
		var parentRepeaterID = box.attr("data-parentRepeaterID");
		//??
		var parentEditor = getProfile(parentRepeaterID);
		if(parentEditor.attr("data-recordID") == "0" && allowEmptyParent == false){
			consoleMessage.addErrorMessage("You must save the profile before adding or editing this item.", 5000);
			return;
		}

		var property = box.attr("data-property");
		var profileTitle = box.attr("data-createProfileTitle");
		var profileType = box.attr("data-profileType");
		var editorTemplate = $("#template_StarterProfile").html();
		var profiles = $("#profiles");
		var searchType = box.attr("data-searchType");

		var profile = $(editorTemplate
            .replace(/{parentRepeaterID}/g, parentRepeaterID)
            .replace(/{Property}/g, property)
            .replace(/{repeaterID}/g, repeaterID)
            .replace(/{RecordId}/g, 0)
            .replace(/{RecordRowId}/g, "@Guid.Empty")
            .replace(/{profileTitle}/g, profileTitle)
            .replace(/{profileType}/g, profileType)
            .replace(/saveProfile/g, "saveStarterProfile")
        ).appendTo(profiles);

		if(box.attr("data-allowMultipleSavedItems") == "true"){
			profile.addClass("allowMultipleSavedItems");
		}

		repeaterID++;

		profile.find("[data-property=ProfileType]").val(profileType);
		profile.find("[data-property=SearchType]").val(searchType);

		showProfile(profile.attr("data-repeaterID"));
	}
	//

	//Save a starter profile
	function saveStarterProfile(targetRepeaterID, button, postAutoSaveFunction, closeProfile){
		var profile = getProfile(targetRepeaterID);
		var context = getProfileContext(targetRepeaterID);
		var data = readProperties(profile);
		var allowMultipleSavedItems = profile.hasClass("allowMultipleSavedItems");
		console.log(data);

		doAjax("Editor", "SaveStarterProfile", { context: context, profile: data, allowMultiple: allowMultipleSavedItems }, success_saveStarterProfile, $(button), {targetRepeaterID: targetRepeaterID, property: profile.attr("data-property")}, true);
	}
	//

	//Successfully saved a starter profile
	function success_saveStarterProfile(message, passThrough){
		if(message.valid){
			var profile = getProfile(passThrough.targetRepeaterID);
			var parentEditor = getProfile(profile.attr("data-parentRepeaterID"))
			var parentSearch = parentEditor.find(".microSearchBox[data-property=" + passThrough.property + "]");

			var data = {};
			data[passThrough.property] = message.data;

			renderMicroSearchResults(data, parentSearch.attr("data-microSearchName"), true, parentSearch.attr("data-allowmultiplesaveditems") == "false");

			closeProfile(passThrough.targetRepeaterID, true);
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 5000);
		}
	}
</script>
<script type="text/javascript">
	//Create a profile for cost profile search
	function createCostSearchBox(name, allowEmptyParent){
		var box = getMicroSearchBox(name);
		var parentRepeaterID = box.attr("data-parentRepeaterID");
		//??
		var parentEditor = getProfile(parentRepeaterID);
		if(parentEditor.attr("data-recordID") == "0" && allowEmptyParent == false){
			consoleMessage.addErrorMessage("You must save the profile before adding or editing this item.", 5000);
			return;
		}

		var property = box.attr("data-property");
		var profileTitle = box.attr("data-createProfileTitle");
		var profileType = box.attr("data-profileType");
		var editorTemplate = $("#template_CostProfileSearch").html();
		var profiles = $("#profiles");
		var searchType = box.attr("data-searchType");

		var profile = $(editorTemplate
            .replace(/{parentRepeaterID}/g, parentRepeaterID)
            .replace(/{Property}/g, property)
            .replace(/{repeaterID}/g, repeaterID)
            .replace(/{RecordId}/g, 0)
            .replace(/{RecordRowId}/g, "@Guid.Empty")
            .replace(/{profileTitle}/g, profileTitle)
            .replace(/{profileType}/g, profileType)
            .replace(/saveProfile/g, "copyCostProfile")
        ).appendTo(profiles);

		if(box.attr("data-allowMultipleSavedItems") == "true"){
			profile.addClass("allowMultipleSavedItems");
		}

		repeaterID++;

		profile.find("[data-property=ProfileType]").val(profileType);
		profile.find("[data-property=SearchType]").val(searchType);

		showProfile(profile.attr("data-repeaterID"));
	}
	//

	//Save a starter profile
	function copyCostProfile(targetRepeaterID, button, postAutoSaveFunction, closeProfile){
		var profile = getProfile(targetRepeaterID);
		var context = getProfileContext(targetRepeaterID);
		var data = readProperties(profile);
		var allowMultipleSavedItems = profile.hasClass("allowMultipleSavedItems");
		console.log(data);

		doAjax("Editor", "CopyCostProfile", { context: context, profile: data, allowMultiple: allowMultipleSavedItems }, success_copyCostProfile, $(button), {targetRepeaterID: targetRepeaterID, property: profile.attr("data-property")}, true);
	}
	//

	//Successfully copied a cost profile
	function success_copyCostProfile(message, passThrough){
		if(message.valid){
			var profile = getProfile(passThrough.targetRepeaterID);
			var parentEditor = getProfile(profile.attr("data-parentRepeaterID"))
			var parentSearch = parentEditor.find(".microSearchBox[data-property=" + passThrough.property + "]");

			var data = {};
			data[passThrough.property] = message.data;

			renderMicroSearchResults(data, parentSearch.attr("data-microSearchName"), true, parentSearch.attr("data-allowmultiplesaveditems") == "false");

			closeProfile(passThrough.targetRepeaterID, true);
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 5000);
		}
	}
	//

</script>
<script type="text/javascript">
	//Create a iframe profile
	function createPopupProfile(name, allowEmptyParent){
		var box = getMicroSearchBox(name);
		var parentRepeaterID = box.attr("data-parentRepeaterID");
		//??
		var parentEditor = getProfile(parentRepeaterID);
		if(parentEditor.attr("data-recordID") == "0" && allowEmptyParent == false){
			consoleMessage.addErrorMessage("You must save the profile before adding or editing this item.", 5000);
			return;
		}
		//so we should have a rowId now
		var parentEditorRowId = parentEditor.attr("data-recordrowid");

		var property = box.attr("data-property");
		var profileTitle = box.attr("data-createProfileTitle");
		var profileType = box.attr("data-profileType");
		var editorTemplate = $("#template_PopupProfile").html();
		var profiles = $("#profiles");
		var searchType = box.attr("data-searchType");

		var lastProfileType = getCurrentProfileName();
		if (lastProfileType == "")
			lastProfileType = "Credential";
		//NOTE - blank if new credential!
		var lastProfileRowId = getCurrentProfileRowId();
		if (parentEditorRowId != lastProfileRowId) {
			//could have just added a condition profile, and lastProfileRowId was zero when created
			//remove current parent, and add with the rowId
			removeCurrentProfile();

			var profileEntryTemplate = "{profileName};{rowId}"
                    .replace(/{profileName}/g, lastProfileType)
                    .replace(/{rowId}/g, parentEditorRowId);
			addCurrentProfile( profileEntryTemplate );
		}

		var parentRequestType = lastProfileType + "_add_" + property ;
		var microSearchName = parentRepeaterID.toString() + "_" + property;



		var profile = $(editorTemplate
            .replace(/{parentRepeaterID}/g, parentRepeaterID)
            .replace(/{Property}/g, property)
            .replace(/{repeaterID}/g, repeaterID)
            .replace(/{RecordId}/g, 0)
            .replace(/{RecordRowId}/g, "@Guid.Empty")
            .replace(/{profileTitle}/g, profileTitle)
            .replace(/{profileType}/g, profileType)
            .replace(/{ParentRequestType}/g, parentRequestType)
        .replace(/{lastProfileType}/g, lastProfileType)
        .replace(/{lastProfileRowId}/g, lastProfileRowId)
        .replace(/{parentPage}/g, globalCurrentPageIdentifier)
            .replace(/saveProfile/g, "savePopupProfile")
        ).appendTo(profiles);

		var allowMultipleSaves = "false";
		if(box.attr("data-allowMultipleSavedItems") == "true"){
			profile.addClass("allowMultipleSavedItems");
			allowMultipleSaves = "true";
		}

		profile.find("[data-property=ProfileType]").val(profileType);
		profile.find("[data-property=SearchType]").val(searchType);

		//????This doesn't help, just gets top level(ex credential)
		//var context = getProfileContext(repeaterID);
		//TODO - determine if a skeleton create is done now!!!

		//
		var popupRequestDataTemplate = "{ \"parentRequestType\": \"{parentRequestType}\", \"parentProfile\": \"{parentProfile}\", \"parentRowId\": \"{parentRowId}\", \"parentRepeaterID\": {parentRepeaterID}, \"targetRepeaterID\": {targetRepeaterID},\"property\": \"{property}\", \"profileType\": \"{profileType}\", \"searchType\": \"{searchType}\", \"allowEmptyParent\": {allowEmptyParent}, \"allowMultipleSaves\": {allowMultipleSaves}, \"microSearchName\": \"{microSearchName}\", \"newId\": \"{newId}\", \"newRowId\": \"{newRowId}\" }";
		var request = popupRequestDataTemplate
            .replace(/{parentRequestType}/g, parentRequestType)
            .replace(/{parentRepeaterID}/g, parentRepeaterID)
            .replace(/{targetRepeaterID}/g, repeaterID)
            .replace(/{property}/g, property)
            .replace(/{profileType}/g, profileType)
            .replace(/{searchType}/g, searchType)
             .replace(/{parentProfile}/g, lastProfileType)
            .replace(/{parentRowId}/g, lastProfileRowId)
            .replace(/{microSearchName}/g, microSearchName)
            .replace(/{allowEmptyParent}/g, allowEmptyParent)
            .replace(/{allowMultipleSaves}/g, allowMultipleSaves);
		//
		//save request
		storageSetItem(parentRequestType, request);
		//may be better to use the current profile, or global
		storageSetItem(globalCurrentPageIdentifier, request);

		//TODO - this should be after assigning the request
		repeaterID++;

		showProfile(profile.attr("data-repeaterID"));
	}


	//Successfully saved a starter profile
	function success_savePopupProfile(message, passThrough){
		if(message.valid){
			var profile = getProfile(passThrough.targetRepeaterID);
			var parentEditor = getProfile(profile.attr("data-parentRepeaterID"))
			var parentSearch = parentEditor.find(".microSearchBox[data-property=" + passThrough.property + "]");
			var microSearchName = passThrough.microSearchName;
			var allowMultipleSaves = passThrough.allowMultipleSaves;
			var data = {};
			data[passThrough.property] = message.data;

			//renderMicroSearchResults 4th parm is isOverwrite. Should be true to overwrite; false to append. So need to essentially send the opposite of allowMultipleSaves
			renderMicroSearchResults(data, microSearchName, true, allowMultipleSaves == false);
			//renderMicroSearchResults(data, parentSearch.attr("data-microSearchName"), true, parentSearch.attr("data-allowmultiplesaveditems") == "false");

		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 5000);
		}
	}
	//
</script>



<script type="text/javascript">
	//http://tutorials.jenkov.com/html5/local-storage.html
	//sessionStorage will be used as it relates to the current browser window and iframes. localStorage is available from all windows, even after all browsers have been closed. The latter could cause a problem, hence going with sessionStorage.
	/*
    StorageEvent {
    key;          // name of the property set, changed etc.
    oldValue;     // old value of property before change
    newValue;     // new value of property after change
    url;          // url of page that made the change
    storageArea;  // localStorage or sessionStorage,
                  // depending on where the change happened.
}
    */
	window.addEventListener('storage', onStorageEvent, false);

	function onStorageEvent(storageEvent){
		if (storageEvent.key.indexOf("fa-cdn") > -1)
			return;

		console.log("storageEvent", storageEvent);
		//alert("storage event. " + storageEvent.storageArea);\
		//note need to have different events for where immediate saves are done, and just updating selection

		if (storageEvent.key.length > 1 && storageEvent.key.indexOf("_add_") > 1) {
			var requestString = storageGetItem(storageEvent.key);
			console.log("storageEvent.key", storageEvent.key);
			console.log("requestString", requestString);
			var request = JSON.parse(requestString);

			var id = request.newId;
			console.log("newId", id);
			//so far all events are the same
			if (storageEvent.key == "Credential_add_OwningOrganization") {
				//probably need different options for add from credential

				handleSavingChildProfile(request)

			} else {
				handleSavingChildProfile(request)
			}
			//if (storageEvent.key == "Assessment_add_Assessment") {
			//    handleSavingChildProfile(request);

			//} else  if (storageEvent.key == "Credential_add_Credential") { //this is conditon profile!
			//    //might be generic??
			//    handleSavingChildProfile(request)
			//}  else  if (storageEvent.key == "LearningOpportunity_add_LearningOpportunity") {
			//    console.log("storageEvent.key", storageEvent.key);
			//    handleSavingChildProfile(request)

			//} else  if (storageEvent.key == "OwningOrganization_add_Organization") {
			//    console.log("OwningOrganization_add_Organization");
			//    //probably need different options for add from credential

			//    handleSavingChildProfile(request)

			//} else  if (storageEvent.key == "actor_add_Organization") {
			//    console.log("actor_add_Organization");
			//    //probably need different options for add from credential
			//    //OfferedByAgentUid_add_Organization
			//    handleSavingChildProfile(request)
			//} else {
			//    handleSavingChildProfile(request)
			//}

		} else if (storageEvent.key.length > 1 && storageEvent.key.indexOf("_saveChild") > 0) {

			//request from parent for child to do a save
			//need to ensure the correct child responds
			var requestedByIdentifier = storageGetItem(storageEvent.key);

			//check for request by parent (and not current identifier)
			if (requestedByIdentifier != ""
                && requestedByIdentifier == globalParentPageIdentifier
                && globalCurrentPageIdentifier != globalParentPageIdentifier ) {
				//alert("Handle request to do a global save");
				doGlobalSave(null);
				//delete the key
				console.log("onStorageEvent removing key: ", storageEvent.key);
				sessionStorage.removeItem(storageEvent.key)
			}
		}
	} //==============================

	function handleSavingChildProfile(request) {

		//var request = JSON.parse(requestString);

		var profile = getProfile(request.parentRepeaterID);
		//in this, the profile does have condition
		var context = getProfileContext(request.parentRepeaterID);

		if (context.Profile.Property == undefined)
			context.Profile.Property = request.property;

		//don't actually need data  or needs to be: BaseProfile
		//var data = readProperties(profile);
		var data = {
			Id: request.newId,
			RowId: request.newRowId,
			ProfileType: request.parentProfile,
			SearchType: request.searchType
		};

		//NOTE: setting useSpinner to false, so that we don't get two showing (one for the existing global save
		//NOTE2 - for adding org to credential, we want to update the repeater, but not the profile
		//      - it would seem generally, that that request.allowEmptyParent = true, then we don't want to do SaveChildProfileLink. We just want to populate the repeater with the results
		//ACTUALLY, HOLD OFF

		// if (request.allowEmptyParent == false) {
		doAjax("Editor", "SaveChildProfileLink",
				{ context: context, profile: data, allowMultiple: request.allowMultipleSaves }, success_savePopupProfile, null,
				{targetRepeaterID: request.targetRepeaterID, property: request.property, microSearchName: request.microSearchName, allowMultipleSaves: request.allowMultipleSaves},
				false);
		//} else {
		//    //tbd
		//    var profile = getProfile(request.targetRepeaterID);
		//    var parentEditor = getProfile(profile.attr("data-parentRepeaterID"))
		//    var parentSearch = parentEditor.find(".microSearchBox[data-property=" + request.property + "]");
		//    var microSearchName = request.microSearchName;
		//    var allowMultipleSaves = request.allowMultipleSaves;
		//    var data = {};
		//    data[request.property] = message.data;

		//    //renderMicroSearchResults 4th parm is isOverwrite. Should be true to overwrite; false to append. So need to essentially send the opposite of allowMultipleSaves
		//    renderMicroSearchResults(data, microSearchName, true, allowMultipleSaves == false);
		//    //renderMicroSearchResults(data, parentSearch.attr("data-microSearchName"), true, parentSearch.attr("data-allowmultiplesaveditems") == "false");
		//}
	}


	function SendGlobalSave() {

		console.log("SendGlobalSave request from globalCurrentPageIdentifier: ", globalCurrentPageIdentifier);
		//alert("SendGlobalSave for " + globalCurrentPageIdentifier);
		//may have to remove an existing one, as trigger doesn't respond if not changed?
		//now done after consuming
		var key2 = Math.floor(Math.random() * 99999) + 1 ;
		var key = globalCurrentPageIdentifier + "_saveChild_" + key2;
		sessionStorage.setItem(key, globalCurrentPageIdentifier);
	}

	function storageSetCurrentMainProfileRowId(type, identifier) {
		sessionStorage.setItem(type, identifier);
	}
	//
	function storageSetItem(type, identifier) {
		sessionStorage.setItem(type, identifier);
	}
	//
	function storageItemAppend(type, newId, newRowId) {
		var requestString = storageGetItem(type);
		requestString = requestString
                .replace(/{newId}/g, newId)
                .replace(/{newRowId}/g, newRowId)
		sessionStorage.setItem(type, requestString);
	}
	//
	//function storageGetCurrentParentType() {
	//    var type = "CurrentParentType";
	//    if(!sessionStorage.getItem(type)) {
	//        console.log("no local storage for type: " + type);
	//        return "";
	//    } else {
	//        var identifier = sessionStorage.getItem(type);
	//        return identifier;
	//    }

	//}
	function storageGetItem(item) {
		if(!sessionStorage.getItem(item)) {
			console.log("no local storage for type: " + item);
			return "";
		} else {
			var identifier = sessionStorage.getItem(item);
			return identifier;
		}

	}

	function storageAvailable(type) {
		try {
			var storage = window[type],
                x = '__storage_test__';
			storage.setItem(x, x);
			storage.removeItem(x);
			return true;
		}
		catch(e) {
			return false;
		}
	}

	//
	//The sessionStorage.length property returns the number of properties stored in the sessionStorage object.
	/*
    *
    */
	function storageList() {
		for(var i=0; i < sessionStorage.length; i++){

			var propertyName = sessionStorage.key(i);

			console.log(  i.toString() + " : " + propertyName + " = " +
                    sessionStorage.getItem(propertyName));
		}
	}
</script>

<script type="text/javascript">
	/* Text Value Functions */
	var textValueID = 0;

	function getTextValueBox(textValueName){
		return $(".textValueBox[data-textValueName=" + textValueName + "]");
	}
	//

	function addTextValueProfile(textValueName, button){
		var newItem = {
			CodeId: 0,
			CodeOther: "",
			Value: "",
			Id: 0,
			RowId: "@Guid.Empty.ToString()"
		};
		renderTextValueProfiles(textValueName, [newItem], false);
	}
	//

	function readTextValues(textValueName){
		var box = getTextValueBox(textValueName);
		var items = box.find(".textValueProfile");
		var hasSelector = box.attr("data-hasSelector") == "true";
		var hasOther = box.attr("data-hasOther") == "true";
		var requireValue = box.attr("data-requireValue") == "true";
		var requireOther = box.attr("data-requireOther") == "true";
		var data = [];

		items.each(function() {
			var item = $(this);
			var value = item.find(".textValueValue").val().trim();
			var other = hasOther ? item.find(".textValueOther").val().trim() : "";

			var valid = (requireValue ? value.length > 0 : true) && (requireOther ? other.length > 0 : true) && (value.length > 0 || other.length > 0);

			if(valid){
				data.push({
					Id: parseInt(item.attr("data-recordID")),
					RowId: item.attr("data-rowID"),
					CategoryId: parseInt(box.attr("data-categoryID")),
					CodeId: hasSelector ? parseInt(item.find(".textValueSelector option:selected").attr("value")) : 0,
					CodeOther: other,
					Value: value
				});
			}
		});

		return data;
	}
	//

	function writeTextValues(editor, properties) {
		var profiles = editor.find(".textValueBox");
		profiles.each(function() {
			var box = $(this);
			var matchingData = properties[box.attr("data-property")];

			//If a match is found, wipe the box and rewrite it
			if(typeof(matchingData) != "undefined"){
				if(matchingData == null){
					matchingData = [];
				}
				renderTextValueProfiles(box.attr("data-textValueName"), matchingData, true);
			}
		});
	}
	//

	function renderTextValueProfiles(textValueName, items, overwrite){
		var box = getTextValueBox(textValueName);
		var hasSelector = box.attr("data-hasSelector");
		var hasOther = box.attr("data-hasOther");
		var valueType = box.attr("data-valueType");
		var valuePlaceholder = box.attr("data-valuePlaceholder");
		var otherPlaceholder = box.attr("data-otherPlaceholder");
		var template = $("#template_TextValueProfile").html();
		var list = box.find(".textValueList");
		var requireValue = box.attr("data-requireValue");
		var requireOther = box.attr("data-requireOther");

		if(overwrite){
			list.html("");
		}

		for(var i in items){
			var item = items[i];
			var profile = $(template
                    .replace(/{textValueName}/g, textValueName)
                    .replace(/{textValueID}/g, textValueID)
                    .replace(/{HasSelector}/g, hasSelector)
                    .replace(/{HasOther}/g, hasOther)
                    .replace(/{ValueType}/g, valueType)
                    .replace(/{ValuePlaceholder}/g, valuePlaceholder)
                    .replace(/{OtherPlaceholder}/g, otherPlaceholder)
                    .replace(/{RequireValue}/g, requireValue)
                    .replace(/{RequireOther}/g, requireOther)
                    .replace(/{RecordId}/g, item.Id)
                    .replace(/{RowId}/g, item.RowId)
                ).appendTo(box.find(".textValueList"));

			if(hasSelector){
				var selectorData = JSON.parse(box.find(".codeValues").text());
				var selector = profile.find(".textValueSelector");
				for(var j in selectorData){
					selector.append("<option value=\"" + j + "\">" + selectorData[j] + "</option>");
				}
				selector.find("option[value=" + item.CodeId + "]").prop("selected", true);
			}

			if(hasOther){
				profile.find(".textValueOther").val(item.CodeOther);
			}

			profile.find(".textValueValue").val(item.Value);

			textValueID++;
		}
	}
	//

	function deleteTextValueProfile(textValueName, textValueID, button) {
		var box = getTextValueBox(textValueName);
		var item = box.find("[data-textvalueid=" + textValueID + "]");
		var id = parseInt(item.attr("data-recordID"));
		var rowID = item.attr("data-rowID");
		if( id == 0 && rowID == "@Guid.Empty"){
			item.remove();
		}
		else {
			item.addClass("aboutToDelete");
			modal.confirm("Delete Item", "Really delete this item? This action cannot be undone!",
                function() {
                	var context = getProfileContext(box.attr("data-parentRepeaterID"));
                	context.Parent = context.Profile;
                	context.Profile = {
                		Id: id,
                		RowId: rowID,
                		TypeName: "TextValueProfile"
                	};
                	doAjax("Editor", "DeleteProfile", { context: context }, success_deleteTextValueProfile, $(button), { textValueName: textValueName, textValueID: textValueID }, true);
                },
                function() {
                	item.removeClass("aboutToDelete");
                }
            );
		}
	}
	//

	function success_deleteTextValueProfile(message, passThrough){
		if(message.valid){
			var box = getTextValueBox(passThrough.textValueName);
			var item = box.find("[data-textValueID=" + passThrough.textValueID + "]");
			item.remove();
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 5000);
		}
	}
	//
</script>

@Html.Partial( "~/Views/V2/CASS/CassSearchWidgetIncludeOnceV1.cshtml" )
<script type="text/javascript">
	/* CASS Functions - these can be assigned to individual CASS browsers.  The CASS browser JQuery object and relevant data are passed as arguments */

	//data = { searchBox, data, result } //the part of the CASS browser in which competencies are searched, the data for the competency, and the HTML result object
	function cassSaveCompetency(browser, data) {
		console.log("Saving CASS Competency for " + browser.attr("data-property") + " in browser:", browser);
		console.log(data);

	}
	//

	//data = { items } //an array of { data, result } //the data for the competency and the HTML result object
	function cassSaveCompetencyList(browser, data){
		console.log("Saving CASS Competency List for " + browser.attr("data-property") + " in browser:", browser);
		console.log(data);
		console.log(browser);

		var message = {
			Framework: {
				Name: browser.parts.selectedFramework.Name,
				Description: browser.parts.selectedFramework.Description,
				_Id: browser.parts.selectedFramework._Id,
				Url: browser.parts.selectedFramework.Url
			},
			Competencies: [],
			Context: getProfileContext(browser.attr("data-parentrepeaterid"))
		};
		for(var i in data.items){
			message.Competencies.push(data.items[i].data);
		}

		doAjax("Editor", "SaveCassCompetencyList", { data: message }, success_cassSaveCompetencyList, null, { browser: browser, competencies: data.items, context: message.Context }, false);
		console.log("Sending message:", message);
	}
	//
	//TODO - move this method to somewhere more appropriate
	function success_cassSaveCompetencyList(message, passThrough){
		console.log(message);
	}
	//

	//data = { searchBox, data, result } //the part of the CASS browser in which competencies are searched, the data for the competency, and the (detached) HTML result object
	function cassRemoveCompetency(browser, data){
		console.log("Removing CASS Competency from " + browser.attr("data-property") + " in browser:", browser);
		console.log(data);

	}
	//

	//Read browser data during a save
	function cassReadBrowser(browser){
		var items = browser.find(".selectedItems .cassResult");
		var data = [];
		items.each(function() {
			data.push(JSON.parse($(this).find(".rawData").html()));
		});
		return data;
	}
	//
</script>

<style type="text/css">
	/* credential header*/
	.editorHeader { background-color: #f5f5f5; margin: 8px 20px 5px 20px; }
	.stickyHeader { position: fixed; top: 1px; width: 90%; border: solid; background-color: rgb(186, 220, 163); z-index: 100; }
	.offscreen { position: absolute; left: -99999px; }
	.indentItem { margin-left: 25px; }
	.headerBox { padding: 5px 10px; display: inline-block; vertical-align: top; }
	.headerBox1 { font-size: 150%; width: 35%; color: #2D2C59; text-align: center; }
	.headerBox2 { font-size: 150%; color: #2D2C59; text-align: center; }
	.headerBox3 { font-size: 120%; width: 20%; margin-right: 25px; text-align: right; }
	.headerBoxa { font-size: 150%; width: 45%; color: #2D2C59; text-align: center; }
	.headerBoxb { font-size: 150%; width: 45%; color: #2D2C59; text-align: center; }
	.hasToolTip { z-index: 999999 !important; }
	.viewHeader { text-align: center; }
	.sectionHasData { background-color: #94CD89; }

	.alternativeCondition { margin: 0 5px 0px 250px; padding: 1px 3px; background-color: #BADCA3; color: white; }
	.additionalCondition { margin-left: 150px; background-color: #90EE90; color: white; }

	.sectionGroup { background-color: #f5f5f5; border-radius: 5px; border: solid black 1px; margin: 5px 0px 10px; padding: 5px; }

	/*#popupIframe {height: 100%; width: 100%;position:absolute; top: 0; left:0;}*/
	.hideCredentialOnly .credentialOnly { display: none; }

	.hideRemoveButtons .microSearchBox .microProfile .deleteButton { display: none; }

	/* Big Stuff */
	#content { padding-bottom: 100px; background-color: #f5f5f5; }

	#mainSiteFooter { display: none; }
	h1 { margin: 0; padding: 10px 5px 15px 5px; font-size: 32px; }
	h2 { margin: 0; padding: 0 5px 15px 5px; }
	.guidance { font-style: italic; opacity: 0.7; font-size: 16px; padding: 5px; }
	.guidance:empty { padding: 0; }
	input[type=text], select { padding: 0 5px; height: 25px; }
	#waitWrapper { position: fixed; top: 0; bottom: 0; left: 0; right: 0; background-color: rgba(0,0,0,0.5); z-index: 999999; transition: none; display: none; }
	#wait { width: 200px; margin: calc(50vh - 200px) auto; text-align: center; color: #FFF; }
	#waitSpinner { width: 100%; display: block; font-size: 100px; line-height: 100px; }
	#waitTitle { font-size: 26px; padding: 20px 5px 20px 20px; }

	/* Property Boxes */
	.propertyBox { margin-bottom: 15px; font-size: 0; border: 1px solid #000; border-radius: 8px; background-color: #fff; box-shadow: 5px 5px 5px #888888; padding: 8px; }
	.propertyBox input[type=text], .propertyBox select, .propertyBox textarea { display: block; width: 100%; }
	.propertyBox textarea { resize: vertical; min-height: 8em; max-height: 20em; }
	.propertyBox .label, .propertyBox .data { display: inline-block; vertical-align: top; color: #3D4443; }
	.propertyBox .label.isRequired, .propertyBox .isRequired, .microSearchLabel.isRequired { color: red; }
	.propertyBox .label { width: 175px; font-weight: bold; padding: 3px 10px 0 0; text-align: right; }
	.propertyBox .data { width: calc(100% - 175px); }
	.propertyBox .data .list label { display: inline-block; vertical-align: top; width: 100%; padding: 2px 5px 2px 22px; position: relative; }
	.propertyBox .data .list label input { position: absolute; top: 2px; left: 0; }
	.propertyBox .data .list label:hover, .propertyBox .data .list label:focus { background-color: #EEE; cursor: pointer; }
	.propertyBox.twoColumns .data .list { column-count: 2; }
	/* for embedded property boxes, make inner box plain*/
	.propertyBox .propertyBox { padding: 0px; border: none; box-shadow: none; border-radius: 0px; }
	.propertyBox .propertyBox .data { margin-top: -20px; }

	/* Profile Boxes */
	.profileBox { margin-bottom: 15px; }
	.profile:not(.mainProfile) .profileBox, .profileBox.smallLabel { font-size: 0; }
	.profile:not(.mainProfile) .profileBox .profileLabel, .profile:not(.mainProfile) .profileBox .profileData, .profileBox.smallLabel .profileLabel, .profileBox.smallLabel .profileData { display: inline-block; vertical-align: top; }
	.profile:not(.mainProfile) .profileBox .profileLabel, .profileBox.smallLabel .profileLabel { width: 175px; font-weight: bold; padding: 3px 10px 0 0; text-align: right; font-size: 16px; }
	.profile:not(.mainProfile) .profileBox .profileData, .profileBox.smallLabel .profileData { width: calc(100% - 175px); }
	.profileBox .profileGuidance { padding: 5px; }
	.profileBox .profileList { background-color: #EEE; padding: 5px; }
	.profileBox .profileButtons input { min-width: 300px; display: inline-block; }
	.profileBox .profileList .profileItem { background-color: #FFF; border: 1px solid #CCC; padding: 2px; margin-bottom: 5px; font-size: 0; }
	.profileBox .profileList .profileItem .name, .profileBox .profileList .profileItem .buttons { display: inline-block; vertical-align: top; }
	.profileBox .profileList .profileItem .name { width: calc(100% - 200px); padding: 2px 10px 2px 5px; }
	.profileBox .profileList .profileItem .buttons { width: 200px; font-size: 0; }
	.profileBox .profileList .profileItem .buttons input { display: inline-block; vertical-align: top; width: 96px; margin: 0 2px; }

	.profileBox .profileList .profileItem .buttons .showChildBtn { width: 194px; margin: 2px 2px; }

	.profileBox .profileList .profileItem:last-child { margin-bottom: 0; }
	.profileButtons { text-align: right; padding: 5px 0; }

	/* MicroSearch Boxes */
	.microSearchBox { margin-bottom: 15px; }
	.profile:not(.mainProfile) .microSearchBox, .microSearchBox.smallLabel { font-size: 0; }
	.profile:not(.mainProfile) .microSearchBox .microSearchLabel, .profile:not(.mainProfile) .microSearchBox .microSearchData, .microSearchBox.smallLabel .microSearchLabel, .microSearchBox.smallLabel .microSearchData { display: inline-block; vertical-align: top; }
	.profile:not(.mainProfile) .microSearchBox .microSearchLabel, .microSearchBox.smallLabel .microSearchLabel { width: 175px; font-weight: bold; padding: 3px 10px 0 0; text-align: right; font-size: 16px; }
	.profile:not(.mainProfile) .microSearchBox .microSearchData, .microSearchBox.smallLabel .microSearchData { width: calc(100% - 175px); }
	.microSearchBox .microSearchColumns { font-size: 0; }
	.microSearchBox .microSearchColumn { display: inline-block; vertical-align: top; width: 50%; }
	.microSearchBox .microSearchColumnWide { display: inline-block; vertical-align: top; width: 100%; }
	.microSearchBox .microSearchSearch { padding-right: 2.5px; }
	.microSearchBox .microSearchSaved { padding-left: 2.5px; }
	.microSearchBox .microSearchColumn h3 { margin: 0; padding: 5px; font-size: 18px; }
	.microSearchBox .microSearchFilters .microSearchFilter { display: block; width: 100%; margin-bottom: 2px; }
	.microSearchBox .microSearchFilters .microSearchKeywords { font-size: 0; }
	.microSearchBox .microSearchFilters .microSearchKeywords input { display: inline-block; vertical-align: top; }
	.microSearchBox .microSearchFilters .microSearchKeywords input[type=text] { width: calc(100% - 150px); }
	.microSearchBox .microSearchFilters .microSearchKeywords input[type=button] { width: 73px; margin-left: 2px; }
	.microSearchBox .microSearchSaved .microSearchSavedItems { padding: 5px; background-color: #EEE; }
	.microSearchBox .microSearchSaved .microSearchSavedItems p { text-align: center; margin: 0; padding: 5px; font-style: italic; }
	.microSearchBox .microProfile { padding: 5px; margin-bottom: 5px; background-color: #FFF; border: 1px solid #CCC; position: relative; }
	.microSearchBox .microProfile .microProfileButtons { position: absolute; top: 5px; right: 5px; width: 100px; }
	/*.microSearchBox .microProfile .microProfileButtons { position: absolute; top: 5px; right: 5px;  }*/
	.microSearchBox .microProfile input, .microSearchBox .microProfile .linkButton { display: inline-block; vertical-align: top; width: calc(100% - 1px); margin: 0 1px; }
	.microSearchBox .microProfile .title { font-weight: bold; min-height: 25px; padding: 0 115px 5px 0; display: block; }
	/*.microSearchBox .microProfile .title { font-weight: bold; min-height: 80px; padding: 0 115px 5px 0; display: block; }*/
	.microSearchBox .microProfile .description { padding: 5px; font-size: 14px; }
	.microSearchBox .microProfile .description:empty { padding: 0; }
	.microSearchBox .microProfile .selectors { display: none; }
	.microSearchBox .microProfile .rawData { display: none; }
	.microSearchBox .microProfile .rawProperties { display: none; }
	.microSearchBox .microSearchSaved .microProfile .showOnResult { display: none; }
	.microSearchBox .microSearchResults .microProfile .showOnSaved { display: none; }
	.microSearchBox .microSearchStatus { padding: 5px; text-align: center; }
	.microSearchBox .microSearchPaging { text-align: center; }
	.microSearchBox .microSearchPageButton { display: inline-block; min-width: 25px; }
	.microSearchBox .microSearchPageButton.current { background-color: #3D4443; color: #FFF; }
	.microSearchBox .microSearchButtons { text-align: right; padding: 5px; }
	.microSearchBox[data-hasEditProfile=false] .microProfile .editMicroProfile { display: none; }
	.microSearchBox[data-hasEditProfile=true] .microProfile .title { padding-right: 190px; }
	.microSearchBox[data-hasEditProfile=true] .microProfile .microProfileButtons { width: 175px; font-size: 0; }
	/*.microSearchBox[data-hasEditProfile=true] .microProfile .microProfileButtons { width: 100px; font-size: 0; }*/
	.microSearchBox[data-hasEditProfile=true] .microProfile .microProfileButtons input, .microSearchBox[data-hasEditProfile=true] .microProfile .microProfileButtons .linkButton { width: calc(50% - 2px); }
	/*.microSearchBox[data-hasEditProfile=true] .microProfile .microProfileButtons input, .microSearchBox[data-hasEditProfile=true] .microProfile .microProfileButtons .linkButton { width: 100px; margin-bottom: 2px; }*/
	.microSearchBox .microProfile .microProfileButtons .linkButton { font-size: 16px; text-align: center; }
	.microSearchBox[data-hasResultLink=false] .title.hasResultLink, .microSearchBox[data-hasResultLink=true] .title.noResultLink { display: none; }
</style>
<style type="text/css">
	/* Text Value Profile */
	.profile:not(.mainProfile) .textValueBox, .textValueBox .textValueValueBox, .textValueBox.smallLabel { font-size: 0; }
	.profile:not(.mainProfile) .textValueBox .textValueLabel, .profile:not(.mainProfile) .textValueBox .textValueData, .textValueBox.smallLabel .textValueLabel, .textValueBox.smallLabel .textValueData { display: inline-block; vertical-align: top; }
	.profile:not(.mainProfile) .textValueBox .textValueLabel, .textValueBox.smallLabel .textValueLabel { width: 175px; font-weight: bold; padding: 3px 10px 0 0; text-align: right; font-size: 16px; }
	.profile:not(.mainProfile) .textValueBox .textValueData, .textValueBox.smallLabel .textValueData { width: calc(100% - 175px); }
	.textValueBox .textValueList { background-color: #EEE; padding: 5px; }
	.textValueBox .profileButtons input { min-width: 300px; display: inline-block; }
	.textValueBox .textValueProfile { font-size: 0; padding: 5px; background-color: #FFF; margin-bottom: 5px; }
	.textValueBox .textValueProfile:last-child { margin-bottom: 0; }
	.textValueBox .textValueProfile .textValueValue { width: 100%; }
	.textValueBox .textValueProfile .textValueSelectorBox { font-size: 0; margin-bottom: 2px; }
	.textValueBox .textValueProfile .textValueSelectorBox *:not(option), .textValueBox .textValueProfile .textValueValueBox * { display: inline-block; vertical-align: top; }
	.textValueBox .textValueProfile .textValueSelectorBox *:not(option) { width: 50%; }
	.textValueBox .textValueProfile .textValueValue { width: calc(100% - 102px); }
	.textValueBox .textValueProfile .textValueDelete { width: 100px; margin-left: 2px; }
	.textValueBox[data-hasOther=false] .textValueProfile .textValueSelector { width: 100%; }
	.textValueBox[data-hasOther=false] .textValueProfile .textValueOther { display: none; }
	.textValueBox[data-hasSelector=false] .textValueProfile .textValueSelector { display: none; }
	.textValueBox[data-hasSelector=false] .textValueProfile .textValueOther { width: 100%; }
</style>
<style type="text/css">
	/* Tabs */
	.hasTabs .tabs { margin-bottom: 10px; font-size: 0; text-align: center; }
	.hasTabs .tabs input { margin: 1px; display: inline-block; vertical-align: top; min-width: 100px; }

	.hasTabs .tabs input.selected { background-color: #3D4443; color: #FFF; }
	.hasTabs .tabItems .tabItem:not(.selected) { display: none; }

	/* Profile Editors */
	#profiles { position: relative; z-index: 999999; }
	#profiles .profile { display: none; border: 1px solid #CCC; background-color: #FFF; }
	#profiles .profile[data-visible=true] { display: block; position: fixed; top: 6vh; left: 6vw; z-index: 100; height: 90vh; width: 90vw; }
	#profiles .profile .profileTitle { background-color: #EEE; padding: 5px; font-size: 20px; font-weight: bold; height: 35px; border-bottom: 1px solid #CCC; }
	#profiles .profile .profileBoxFooter { background-color: #EEE; padding: 2px; height: 30px; border-top: 1px solid #CCC; position: absolute; left: 0; bottom: 0; right: 0; font-size: 0; }
	#profiles .profile .profileBoxFooter .profileBoxHistory, #profiles .profile .profileBoxFooter .profileBoxButtons { display: inline-block; vertical-align: top; }
	#profiles .profile .profileBoxFooter .profileBoxHistory { width: calc(100% - 950px); padding: 2px 5px; }
	#profiles .profile .profileBoxFooter .profileBoxButtons { width: 950px; text-align: right; font-size: 0; }
	#profiles .profile .profileBoxFooter .profileBoxButtons .profileBoxButtonSet { display: inline-block; vertical-align: top; }
	#profiles .profile .profileBoxFooter input { width: 180px; display: inline-block; margin: 0 1px 2px 1px; }
	#profiles .profile .profileContent { overflow-y: auto; max-height: calc(90vh - 67px); padding: 5px; }
	#overlay[data-visible=true] { background-color: rgba(0,0,0,0.7); position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 99; }
	#profiles .profile .mainGuidance { font-style: italic; padding: 5px; background-color: #EEE; margin-bottom: 5px; }

	/* Special things */
	.profile[data-profile=DurationProfile] table { margin: 0; }
	.profile[data-profile=DurationProfile] table td { padding: 0; border: none; }
	.microSearchBox.hideSavedResults .microSearchSearch { width: 100%; }
	.microSearchBox.hideSavedResults .microSearchSaved { display: none; }
	.profileHistory { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; }
	.profileHistory[data-hasupdate=false] { opacity: 0; }

	/* Radio Selector */
	.radioSelector { }
	.radioSelector .radioSection { position: relative; font-size: 0; padding-left: 30px; }
	.radioSelector .radioSection .radioButton { position: absolute; left: 0; top: 0; bottom: 0; width: 30px; padding-top: 5px; text-align: center; }
	.radioSelector .radioSection .radioButton:hover, .radioSelector .radioSection .radioButton:focus { cursor: pointer; background-color: #47CEC7; }
	.radioSelector .radioSection.selected .radioButton { background-color: #3D4443; }
	.radioSelector .radioSection:not(.selected) .radioCover { position: absolute; top: 0; bottom: 0; left: 30px; right: 0; background-color: rgba(255,255,255,0.7); }

	/* Global Buttons */
	#globalButtons { position: fixed; bottom: 0; left: 0; right: 0; height: 30px; background-color: #555; border-top: 1px solid #333; padding: 2px 10px; z-index: 50; font-size: 0; }
	#globalButtons #globalInputs, #globalButtons #history { display: inline-block; vertical-align: top; white-space: nowrap; }
	#globalButtons #globalInputs { float: right; text-align: right; }
	#globalButtons #history { color: #FFF; font-size: 14px; padding: 3px 0; overflow: hidden; text-overflow: ellipsis; }
	#globalButtons input { display: inline-block; vertical-align: top; min-width: 100px; height: 24px; font-weight: bold; }
</style>
<style type="text/css">
	@@media (max-width: 1600px) {
		#profiles .profile .profileBoxFooter { height: 55px; }
		#profiles .profile .profileBoxFooter .profileBoxHistory, #profiles .profile .profileBoxFooter .profileBoxButtons { display: block; width: 100%; text-align: right; }
		#profiles .profile .profileBoxFooter .profileBoxButtons { padding: 0 5px; }
	}

	@@media (max-width: 1100px) {
		#profiles .profile .profileBoxFooter { height: 100px; }
		#profiles .profile .profileBoxFooter .profileBoxButtons .profileBoxButtonSet { display: inline-block; width: 180px; margin-left: 5px; }
		#profiles .profile .profileBoxFooter .profileBoxButtons .profileBoxButtonSet input { display: block; font-size: 14px; }
	}

	@@media (max-width: 900px) {
		#globalButtons { height: 55px; }
		#globalButtons #globalInputs, #globalButtons #history { text-align: right; width: 100%; }
	}

	@@media (max-width: 450px) {
		#profiles .profile .profileBoxFooter { height: 150px; text-align: right; }
		#profiles .profile .profileBoxFooter .profileBoxButtons { display: inline-block; width: 180px; }
		#profiles .profile .profileBoxFooter input { width: 100%; }
		#profiles .profile .profileBoxFooter .profileBoxButtons .profileBoxButtonSet { display: block; margin-left: 0; width: 100%; }
	}
</style>
<style type="text/css">
	#editor button:not(.selected) .fa-caret-down { display: none; }
	#editor button.selected .fa-caret-right { display: none; }
	#editor button .fa { margin: 0 10px; }

	/*#detailContent .detailTab:not(.selected) { display: none; }*/
	#editor .detailTab { padding-bottom: 25px; margin-left: 25px; }
	#editor .detailTab .detailTabHeader { margin: 0 0 10px 0; }
	/* Details (accordion) */
	#editor button[data-detailName] { margin: 0 50px 10px 20px; width: 98%; padding: 8px 20px; font-size: 20px; display: block; text-align: left; font-weight: bold; }
	#editor .detailTabHeader { display: none; }
</style>

<div id="editor">
	@Html.Hidden( "currentMainProfileId", 0 )

	<div class="profile mainProfile hasTabs " data-editorName="MainProfile" data-profile="@mainProfileType" data-recordID="@Model.MainProfile.Id" data-recordRowId="@Model.MainProfile.RowId" data-owningOrgRowID="@Model.MainProfile." data-repeaterID="0">

		@switch ( Model.Editor )
		{

			case EditorSettings.EditorType.CREDENTIAL:
				{
					if ( Model.MainProfile.Id == 0 )
					{
						<h1>New Credential</h1>
					}
					else
					{
						<h1 class="offscreen">@Model.MainProfile.Name</h1>
						<div class="editorHeader">
							<div class="headerBox headerBox1">@Model.MainProfile.Name</div>
							<div class="headerBox headerBox2" id="entityOwningOrg"></div>
							<div class="headerBox headerBox3" id="credType"></div>
						</div>
					}

					<div class="editorSection">

						@SectionButton( "Credential", "entity_basic", 1, 1 )
						<div class="detailTab" data-detailname="entity_basic">
							<h2 class="detailTabHeader">Basic Information</h2>

							@* Basic Info *@
							<div>
								@RenderTextInput( "Name", "Credential Name", TextInputSettings.InputType.TEXT, "The official name of the credential.", true, 5 )
								<div class="updateOnly">
									@RenderTextInput( "AlternateName", "Alternate Name", TextInputSettings.InputType.TEXT, "An alternate name or acronym for the credential.", false, 3 )
								</div>

								@RenderTextInput( "Description", "Credential Description", TextInputSettings.InputType.TEXTAREA, "A summary or description of the credential.", true, 15 )

								@*//probably can get rid of CredentialOrganizationTypeId, just hide while testing*@
								@*<div class="offscreen">
										   @RenderListInput( new ListInputSettings()
									{
										Property = "CredentialOrganizationTypeId",
										Label = "Type of Owning Organization",
										Type = ListInputSettings.InterfaceType.RADIO_LIST,
										Guidance = "Select the type of Owning Organization.",
										EnumItems = enumServices.GetEnumerationForRadioButtons( "owningOrgType", 1 ).Items,
										UseSmallLabel = false,
										PreSelectedItem = 0,
										RequireValue = true, PropertySchema="{none}"
									} )
									  </div>*@
							</div>

							<div>
								<div id="enterOwningOrg" class="propertyBox tabItem ">
									@*@if (Model.MainProfile.Id == 0) {*@

									@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
							   {
								   Property = "OwningOrganization",
								   SearchType = "OrganizationSearch",
								   Label = "Owning Organization",
								   Guidance = orgSelectGuidance,
								   SavedItemsHeader = "Owning Organization",
								   PageSize = 5,
								   AllowMultipleSavedItems = false,
								   ParentRepeaterId = "0",
								   DoAjaxSave = false,
								   RequireValue = true,
								   AllowCreateWithoutParentExisting = true,
								   AllowingStarterCreate = false,
								   HasEditProfile = true,
								   HasCreateProfile = true,
								   CreateProfileTitle = "Organization",
								   ProfileType = "Organization",
								   Filters = orgFilters,
								   PropertySchema = "CredentialOrganization"
							   } )
								</div>
								@RenderListInput( new ListInputSettings()
						   {
							   Property = "RoleTypeIds",
							   Label = "Roles for Owning Organization",
							   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
							   Guidance = "Select the type(s) of relationship the owning organization has to this Credential. <br/>Check OWNED BY, and all others that apply.",
							   EnumItems = enumServices.GetCredentialOwnerAgentRoles( EnumerationType.CUSTOM ).Items,
							   UseSmallLabel = false,
							   PreSelectedItem = 0, //preselect first option
							   RequireValue = true,
							   PropertySchema = "{none}"
						   } )

								<div id="existingOwningOrg" style="display:none;" class="propertyBox tabItem ">
									<div class="label   isRequired">Owning Organization</div>
									<div class="data">
										@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "OwnerOrganizationRoles",
									   Label = "",
									   Profile = "AgentRoleProfile_Recipient",
									   Guidance = orgSelectGuidance,
									   AddText = "",
									   ParentRepeaterId = "0",
									   UseSmallLabel = true,
									   RequireValue = true
								   } )

									</div>
								</div>

								@RenderListInput( new ListInputSettings()
						   {
							   Property = "CredentialType",
							   Label = "Credential Type",
							   Type = ListInputSettings.InterfaceType.RADIO_LIST,
							   Guidance = "Select the type that best describes the credential.",
							   EnumItems = enumServices.GetCredentialType( EnumerationType.CUSTOM ).Items,
							   ExtraClasses = new List<string>() { "twoColumns" },
							   RequireValue = true
						   } )
								@RenderTextInput( new TextInputSettings()
						   {
							   Property = "SubjectWebpage",
							   Label = "Subject Webpage",
							   Type = TextInputSettings.InputType.URL,
							   Guidance = "Provide a URL to the web page where the subject of the resource being described is located. </br>The value of subjectWebpage is an authoritative location for information about the subject and should not assumed to be a persistent identifier of the subject.",
							   PropertySchema = "SubjectWebpage",
							   RequireValue = true
						   } )

								@RenderTextInput( new TextInputSettings()
						   {
							   Property = "ImageUrl",
							   Label = "Credential Image",
							   Type = TextInputSettings.InputType.URL,
							   Guidance = "The image or icon that represents the resource.",
							   PropertySchema = "Image"
						   } )

								<div class="propertyBox">
									<div class="labelX">Primary Method(s) to Earn the Credential</div>
									@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
							   {
								   Property = "FeatureLearningOpportunities",
								   Label = "",
								   IncludeDefaultItem = false,
								   PropertySchema = "{none}",
								   Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST,
								   StringItems = new Dictionary<string, string>() {
								{ "FeatureLearningOpportunities", "Feature Learning Opportunities" }
							}
							   } )
									@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
							   {
								   Property = "",
								   Label = "",
								   IncludeDefaultItem = false,
								   PropertySchema = "{none}",
								   Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST,
								   StringItems = new Dictionary<string, string>() {
								{ "FeatureAssessments", "Feature Assessments" }
							}
							   } )


									@*@RenderListInput( new ListInputSettings()
										{
											Property = "EarningCredentialPrimaryMethodId",
											Label = "Primary Method to Earn the Credential",
											Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
											Guidance = "Select the primary method to earn the Credential.",
											EnumItems = enumServices.GetEnumerationForRadioButtons( "primaryEarnMethod", 1 ).Items,
											UseSmallLabel = false,
											PreSelectedItem = -1,
											RequireValue = true, PropertySchema="{none}"
										} )*@
								</div>

								@if ( Model.MainProfile.Id > 0 )
								{
									<div>

										@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "InLanguageId", Label = "Language", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "The primary language used in or by the resource being described.", EnumItems = enumServices.GetLanguages( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )

										@RenderListInput( new ListInputSettings()
								   {
									   Property = "CredentialStatusType",
									   Label = "Credential Status",
									   Type = ListInputSettings.InterfaceType.RADIO_LIST,
									   Guidance = "Select the status for this credential.",
									   EnumItems = enumServices.GetEnumeration( "credentialStatusType", EnumerationType.SINGLE_SELECT, false ).Items,
									   UseSmallLabel = false,
									   PreSelectedItem = 0, //preselect first option
									   AddNoneOption = true
								   } )

										@RenderTextInput( "AvailableOnlineAt", "Available Online At", TextInputSettings.InputType.URL, "Provide a URL to where this credential is available online." )
										@RenderTextInput( "AvailabilityListing", "Availability Listing", TextInputSettings.InputType.URL, "Provide a URL to a page that lists physical and/or online locations where this credential is available." )

										@*@RenderTextInput( "Url", "Url", TextInputSettings.InputType.URL, "URL of the resource being described." )*@


										@RenderTextInput( "CredentialId", "Credential Identifier", TextInputSettings.InputType.TEXT, "Optionally provide a globally unique identifier for this credential." )
										@RenderTextInput( "CodedNotation", "Notation Code", TextInputSettings.InputType.TEXT, "Optionally provide a notation code for this credential. For example this could be a class code." )

										<div class="sectionGroup">
											@RenderTextInput( new TextInputSettings()
									   {
										   Property = "VersionIdentifier",
										   Label = "Version Identifier",
										   Type = TextInputSettings.InputType.TEXT,
										   Guidance = "An alphanumeric identifier of a version of the resource being described that is unique within the organizational context.",
										   PropertySchema = "versionIdentifier"
									   } )

											@RenderTextInput( new TextInputSettings()
									   {
										   Property = "LatestVersionUrl",
										   Label = "Latest Version URL",
										   Type = TextInputSettings.InputType.URL,
										   Guidance = "The latest version of the credential being described.",
										   PropertySchema = "latestVersion"
									   } )


											@RenderTextInput( "PreviousVersion", "Previous Version", TextInputSettings.InputType.URL, "Provide a URL to the The version of the credential that immediately precedes the credential being described." )

										</div>
										@*<hr />
											@RenderListInput( "CredentialPurposeType", "Credential Purpose", ListInputSettings.InterfaceType.CHECKBOX_LIST, "The general purpose of the credential.", enumServices.GetCredentialPurpose( EnumerationType.CUSTOM ).Items )*@


										@RenderListInput( new ListInputSettings()
								   {
									   Property = "AudienceLevelType",
									   Label = "Audience Level Type",
									   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
									   Guidance = "A point in a progression through an educational or training context, for which the described resource is intended.",
									   EnumItems = enumServices.GetAudienceLevel( EnumerationType.CUSTOM ).Items,
									   ExtraClasses = new List<string>() { "twoColumns" }
								   } )

										@RenderTextInput( "DateEffective", "Effective Date", TextInputSettings.InputType.DATE, "The date that the credential was first officially recognized and earnable." )

										@*@SectionButton( "Degree Concentration, Majors, Minors", "cr_degreeStuff", @Model.MainProfile.Id )
											<div id="cr_degreeStuff" class="detailTab" data-detailname="cr_degreeStuff">

											</div>*@
										@RenderTextValueInput( new TextValueEditorSettings()
								   {
									   Property = "DegreeConcentration",
									   Label = "Degree Concentrations",
									   ValueType = TextInputSettings.InputType.TEXT,
									   Guidance = "Enter Degree Concentration(s) for this Credential.",
									   AddText = "Add a Degree Concentration",
									   ValuePlaceholder = "Degree Concentration",
									   ParentRepeaterId = "0"
								   } )

										@RenderTextValueInput( new TextValueEditorSettings()
								   {
									   Property = "DegreeMajor",
									   Label = "Degree Major",
									   ValueType = TextInputSettings.InputType.TEXT,
									   Guidance = "Enter Degree Major(s) for this Credential.",
									   AddText = "Add a Degree Major",
									   ValuePlaceholder = "Degree Major",
									   ParentRepeaterId = "0"
								   } )

										@RenderTextValueInput( new TextValueEditorSettings()
								   {
									   Property = "DegreeMinor",
									   Label = "Degree Minor",
									   ValueType = TextInputSettings.InputType.TEXT,
									   Guidance = "Enter Degree Minor(s) for this Credential.",
									   AddText = "Add a Degree Minor",
									   ValuePlaceholder = "Degree Minor",
									   ParentRepeaterId = "0"
								   } )



										@RenderTextValueInput( new TextValueEditorSettings()
								   {
									   Property = "Subject",
									   Label = "Subjects",
									   ValueType = TextInputSettings.InputType.TEXT,
									   Guidance = "Enter subjects that describe this Credential.",
									   AddText = "Add a Subject",
									   ValuePlaceholder = "Subject (maximum of 200 characters)",
									   ParentRepeaterId = "0"
								   } )

										@RenderTextValueInput( "Keyword", "Keywords", TextInputSettings.InputType.TEXT, "Enter keywords that describe this Credential.", "Add a Keyword", "Add a Keyword (max length of 200 characters)", "0" )


										<div class="propertyBox tabItem ">

											@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
									   {
										   Property = "CopyrightHolder",
										   SearchType = "OrganizationSearch",
										   Label = "Copyright Holder",
										   Guidance = "The party holding the legal copyright to the CreativeWork.",
										   SavedItemsHeader = "Copyright Holder",
										   PageSize = 5,
										   AllowMultipleSavedItems = false,
										   ParentRepeaterId = "0",
										   DoAjaxSave = false,
										   RequireValue = false,
										   AllowCreateWithoutParentExisting = true,
										   HasEditProfile = true,
										   HasCreateProfile = false,
										   CreateProfileTitle = "Organization",
										   ProfileType = "Organization",
										   Filters = orgFilters,
										   PropertySchema = "ceterms:copyrightHolder"
						,
										   AllowingStarterCreate = false
									   } )
										</div>

										<div class="propertyBox tabItem ">
											@RenderProfileInput( new ProfileSettings()
									   {
										   Property = "DurationProfile",
										   Label = "Estimated Duration",
										   Profile = "DurationProfile",
										   Guidance = "Describe the estimated amount of time it would take to earn the credential normally, and for each applicable special circumstance.",
										   AddText = "Add new Time Estimate",
										   ParentRepeaterId = "0",
										   PropertySchema = "estimatedDuration"
									   } )
										</div>
										<div class="propertyBox tabItem ">
											@RenderProfileInput( new ProfileSettings()
									   {
										   Property = "Addresses",
										   Label = "Available at Addresses",
										   Profile = "AddressProfile",
										   Guidance = "Addresses at which the credential is available.",
										   AddText = "Add an Address",
										   ParentRepeaterId = "0",
										   PropertySchema = "AvailableAt"
									   } )

										</div>
										<div class="sectionGroup ">
											<div class="propertyBox tabItem ">
												@RenderProfileInput( "Jurisdiction", "Jurisdiction", "JurisdictionProfile", "Geo-political information about applicable geographic areas and their exceptions.", "Add new Jurisdiction", "0" )

											</div>
											@*<div class="propertyBox tabItem ">
												@RenderProfileInput( "Region", "Region", "JurisdictionProfile", "A geo-political area of the described resource", "Add new Region", "0" )

											</div>*@
										</div>
										<div class="sectionGroup ">
											@RenderTextInput( "ProcessStandards", "Process Standards", TextInputSettings.InputType.URL, "A resource describing the criteria, standards, and/or requirements used." )
											@RenderTextInput( "ProcessStandardsDescription", "Process Standards Description", TextInputSettings.InputType.TEXTAREA, "A description of the criteria, standards, and/or requirements used." )
										</div>



									</div>
								}
							</div>

						</div>

						<div class="entityOtherSections">

							@SectionButton( "Occupations and Industries", "cr_occupations", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="cr_occupations">
								<h2 class="tabItem" data-property="OccupationHeader">Occupations</h2>

								<div class="propertyBox tabItem ">
									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "Occupation",
								   SearchType = "OccupationSearch",
								   ProfileTemplate = "CodeItem",
								   SavedItemsHeader = "Saved Occupations",
								   ParentRepeaterId = "0",
								   Label = "Occupations",
								   Guidance = "Identify the specific occupations this credential applies to. We recommend using the <a href=\"http://www.bls.gov/soc/\" target=\"_blank\">SOC codes</a>. Select an Occupation category and browse through codes or search by entering a keyword or parial SOC code in the text box.",
								   ExtraClasses = new List<string>() { "tabItem" },
								   Filters = new List<MicroSearchFilter>() {
						new MicroSearchFilter() { FilterName = "HeaderId", Type = "select", Items = occupationHeaders }},
								   PropertySchema = "occupationType"
							   } )
								</div>
								@RenderTextValueInput( new TextValueEditorSettings()
						   {
							   Property = "OtherOccupations",
							   Label = "Other Occupations",
							   ValueType = TextInputSettings.InputType.TEXT,
							   Guidance = "Enter an occupation that does not exist via the search.",
							   AddText = "Add an Occupation",
							   ValuePlaceholder = "Add another Occupation (maximum of 100 characters)",
							   ParentRepeaterId = "0",
							   PropertySchema = "occupationType"
						   } )


								<h2 class="tabItem" data-property="IndustryHeader">Industries</h2>

								<div class="propertyBox tabItem ">
									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "Industry",
								   SearchType = "IndustrySearch",
								   ProfileTemplate = "CodeItem",
								   SavedItemsHeader = "Saved Industries",
								   ParentRepeaterId = "0",
								   Label = "Industry Codes",
								   Guidance = "Identify the specific industries this credential applies to. We recommend using the <a href=\"http://www.naics.com/search/\" target=\"_blank\">NAICS codes</a>. Select an Industry category and browse through codes or search by entering a keyword or parial NAICS code in the text box.",
								   ExtraClasses = new List<string>() { "tabItem" },
								   Filters = new List<MicroSearchFilter>() {
						new MicroSearchFilter() { FilterName = "HeaderId", Type = "select", Items = industryHeaders }
					},
								   PropertySchema = "IndustryType"
							   } )
								</div>

								@RenderTextValueInput( new TextValueEditorSettings()
						   {
							   Property = "OtherIndustries",
							   Label = "Other Industries",
							   ValueType = TextInputSettings.InputType.TEXT,
							   Guidance = "Enter an industry that does not exist via the search.",
							   AddText = "Add an Industry",
							   ValuePlaceholder = "Add another Industry  (maximum of 100 characters)",
							   ParentRepeaterId = "0",
							   PropertySchema = "IndustryType"
						   } )

							</div>
							@SectionButton( "Credential Connections", "cr_connections", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="cr_connections">
								<h2 class="detailTabHeader">cr_connections</h2>

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "CredentialConnections",
							   Label = "Credential Connections",
							   Profile = "CredentialsConditionProfile",
							   Guidance = "Add credentials Connections such as for advanced standing.",
							   AddText = "Add a new Connection",
							   ParentRepeaterId = "0",
							   PropertySchema = "targetCredential",
							   UseSmallLabel = false
						   } )

							</div>

							@SectionButton( "Included Credentials", "cr_includedCredentials", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="cr_includedCredentials">

								@RenderMicroSearchInput( new MicroSearchSettings()
						   {
							   Property = "EmbeddedCredentials",
							   SearchType = "CredentialSearch",
							   SavedItemsHeader = "Other Credentials Included with this Credential",
							   ProfileTemplate = "MicroProfile",
							   ParentRepeaterId = "0",
							   ProfileType = "Credential",
							   Label = "Included Credentials",
							   Guidance = "Identify any credentials that are a part of this credential. Such credentials are typically earned during the pursuit of this credential and/or upon attainment of it.",
							   ExtraClasses = new List<string>() { "tabItem" },
							   HasCreateProfile = true,
							   AllowingStarterCreate = false,
							   HasEditProfile = true,
							   HasResultLink = true,
							   UseSmallLabel = false,
							   PropertySchema = "HasPart"
						   } )
							</div>

							@SectionButton( "Learning Opportunity", "cr_learningOpps", @Model.MainProfile.Id )
							<div id="cr_learningOpps" class="detailTab" data-detailname="cr_learningOpps"></div>

							@SectionButton( "Assessments", "cr_assessments", @Model.MainProfile.Id )
							<div id="cr_assessments" class="detailTab" data-detailname="cr_assessments"></div>

							@SectionButton( "Conditions and Requirements", "cr_Conditions", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="cr_Conditions">

								<div class="propertyBox ">
									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "CommonConditions",
								   SearchType = "ConditionManifestSearch",
								   ProfileTemplate = "MicroProfile",
								   SavedItemsHeader = "Common Condition Manifest(s)",
								   Label = "Common condition manifest(s) for this resources",
								   Guidance = "Search for a common condition manifest for this resource. Only condition manifests for the owning organization will be displayed.",
								   PropertySchema = "{none}",
								   HasCreateProfile = false,
								   AllowMultipleSavedItems = true,
								   DoAjaxSave = true,
								   PageSize = 20,
								   HasKeywords = false,
								   ParentRepeaterId = "0",
								   HiddenFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() {
								FilterName = "ParentId",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.Id.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "OwningAgentUid",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.OwningAgentUid.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "TypeName",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.TypeName.ToString()),
							}

				   }
							   } )
								</div>

								<div>

									@RenderProfileInput( "Requires", "Requirements", "ConditionProfile", "Describe each set of requirements for attaining this credential.", "Add new Requirements", "0", false )
									@RenderProfileInput( "Recommends", "Recommendations", "ConditionProfile", "Describe each set of recommended items that will help prepare someone to attain the credential.", "Add new Recommendations", "0", false )


									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "Corequisite",
								   Label = "Corequisite Conditions",
								   Profile = "CorequisiteConditionProfile",
								   Guidance = "The resource being referenced must be pursued concurrently with the resource being described. Includes dual( double ) degrees that cannot be earned independently of each other.",
								   AddText = "Add a new Corequisite Condition",
								   ParentRepeaterId = "0",
								   UseSmallLabel = false
							   } )


									@*@RenderProfileInput( "IsRequiredFor", "Credential Required For", "ConditionProfile", "Describe each set of items that the credential is a known requirement for.", "Add new Connection", "0", false )
										@RenderProfileInput( "IsRecommendedFor", "Credential Recommended For", "ConditionProfile", "Describe each set of items that the credential will help someone prepare for.", "Add new Connection", "0", false )
										@RenderProfileInput( "AdvancedStandingFor", "Advanced Standing For", "ConditionProfile", "Describe each set of items that the credential will provide advanced standing for.", "Add new Connection", "0", false )
										@RenderProfileInput( "AdvancedStandingFrom", "Advanced Standing From", "ConditionProfile", "Describe each set of items that will provide advanced standing for the credential.", "Add new Connection", "0", false )
										@RenderProfileInput( "IsPreparationFor", "Preparation For", "ConditionProfile", "Describe each set of items that the credential will prepare someone for.", "Add new Connection", "0", false )
										@RenderProfileInput( "PreparationFrom", "Preparation From", "ConditionProfile", "Describe each set of items that will prepare someone for the credential.", "Add new Connection", "0", false )*@
								</div>
							</div>


							@SectionButton( "Costs", "cr_Costs", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="cr_Costs">
								<div class="propertyBox ">
									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "CommonCosts",
								   SearchType = "CostManifestSearch",
								   ProfileTemplate = "MicroProfile",
								   SavedItemsHeader = "Common Cost Manifest(s)",
								   Label = "Common cost manifest(s) for this resources",
								   Guidance = "Search for a common cost manifest for this resource. Only cost manifests for the owning organization will be displayed.",
								   PropertySchema = "{none}",
								   HasCreateProfile = false,
								   AllowMultipleSavedItems = true,
								   DoAjaxSave = true,
								   PageSize = 20,
								   HasKeywords = false,
								   ParentRepeaterId = "0",
								   HiddenFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() {
								FilterName = "ParentId",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.Id.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "TypeName",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.TypeName.ToString()),
							}

				   }
							   } )
								</div>

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "EstimatedCosts",
							   Label = "Estimated Costs",
							   Profile = "CostProfile",
							   Guidance = "Enter DIRECT costs associated with this credential, for example an aggregate cost. Costs related to Assessments, Learning Opportunities, or Conditions and Requirments, should be entered in the related page/view.",
							   AddText = "Add new Estimated Cost",
							   CopyText = "",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false,
							   PropertySchema = "EstimatedCost"
						   } )

								<div id="cr_asmtCosts" style="display:none;">
									<h3>Assessments</h3>
									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "AssessmentEstimatedCosts",
								   Label = "",
								   Profile = "CostProfile",
								   Guidance = "Costs associated with assessments for this credential, for example an aggregate cost.",
								   AddText = "",
								   CopyText = "",
								   ParentRepeaterId = "0",
								   PropertySchema = "EstimatedCost"
							   } )
								</div>

								<div id="cr_loppCosts" style="display:none;">
									<h3>Learning Opportunities</h3>
									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "LearningOpportunityEstimatedCosts",
								   Label = "",
								   Profile = "CostProfile",
								   Guidance = "Costs associated with Learning Opportunities for this credential, for example an aggregate cost.",
								   AddText = "",
								   CopyText = "",
								   ParentRepeaterId = "0",
								   PropertySchema = "EstimatedCost"
							   } )
								</div>

								@*Copy Existing Cost Profile*@

								@SectionButton( "Cost Profile Search/Copy", "cr_CostsSearch", @Model.MainProfile.Id )
								<div class="detailTab" data-detailname="cr_CostsSearch">
									<div class="propertyBox tabItem ">
										@RenderMicroSearchInput( new MicroSearchSettings()
								   {
									   Property = "CostProfileCopy",
									   SearchType = "CostProfileSearch",
									   ProfileTemplate = "MicroProfile",
									   SavedItemsHeader = "",
									   ParentRepeaterId = "0",
									   Label = "Search for Cost Profiles",
									   Guidance = "Copy a previously-saved cost profile.",
									   ExtraClasses = new List<string>() { "tabItem" },
									   PropertySchema = "{none}",
									   HasCreateProfile = false,
									   AllowMultipleSavedItems = false,
									   PageSize = 20,
									   HasKeywords = false,
									   HiddenFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() {
								FilterName = "Parent",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.RowId.ToString()),
							} }
								   } )


										@*,
											HiddenFilters = new List<microsearchfilter>
												() {
												new MicroSearchFilter() {
												FilterName = "Parent",
												Type = "select",
												Items = new Dictionary<string, string>
													()
													{
													{ "RowId", @Model.MainProfile.RowId.ToString() }
													},
													} }*@

									</div>

								</div>
							</div>



							@SectionButton( "Financial Assistance", "cr_financialAlignment", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="cr_financialAlignment">

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "FinancialAssistance",
							   Label = "Financial Assistance",
							   Profile = "FinancialAlignmentObject",
							   Guidance = "The types of financial assistance for which the resource being described qualifies.",
							   AddText = "Add new Financial Assistance Profile",
							   CopyText = "",
							   UseSmallLabel = false,
							   ParentRepeaterId = "0"
						   } )

							</div>




							@SectionButton( "Organizations that Offer this Credential", "cr_offeredByRoles", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="cr_offeredByRoles">

								@*<p>NOTE: there is only one role, so should only be one entry for each of credential, learning opp, and assessment.<br />So ensure code checks for unique assets</p>*@

								@*@RenderProfileInput( new ProfileSettings() { Property = "OfferedByOrganizationRole", Label = "Offering Organizations", Profile = "AgentRoleProfile_OfferedBy", Guidance = "Describe the relationships this credential has to one or more organizations.", AddText = "Add new Role", ParentRepeaterId = "0", UseSmallLabel = false, PropertySchema = "{none}" } )*@

								@RenderMicroSearchInput( new MicroSearchSettings()
						   {
							   Property = "OfferedByOrganization",
							   SearchType = "OrganizationSearch",
							   ParentRepeaterId = "0",
							   Label = "Offered By Organization",
							   Guidance = "Select the organization that offers this resource.",
							   SavedItemsHeader = "Offering Organization",
							   ProfileType = "Organization",
							   AllowMultipleSavedItems = true,
							   DoAjaxSave = true,
							   AllowCreateWithoutParentExisting = false,
							   RequireValue = false,
							   PageSize = 10,
							   HasEditProfile = true,
							   StaticSelectorValues = new Dictionary<string, object>()
					{
						{ "Property", "Actor" }
					},
							   HasCreateProfile = false,
							   CreateProfileTitle = "",
							   HasResultLink = true,
							   Filters = orgFilters,
							   AllowingStarterCreate = false,
							   PropertySchema = "CredentialOrganization"
						   } )
							</div>


							@SectionButton( "External Third Party Quality Assurance", "cr_QAAgentRoles", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="cr_QAAgentRoles" data-properties="AgentRole_Recipient">
								<h2 class="detailTabHeader">cr_QAAgentRoles</h2>

								@*@RenderProfileInput( new ProfileSettings() { Property = "QAOrganizationRole", Label = "Agent Roles", Profile = "AgentRoleProfile_Assets", Guidance = "Describe the relationships this credential has to one or more organizations.", AddText = "Add new Role", ParentRepeaterId = "0", UseSmallLabel = false, PropertySchema = "{none}" } )*@


								@RenderProfileInput( new ProfileSettings() { Property = "QAOrganizationRole", Label = "Agent Roles", Profile = "AgentRoleProfile_Recipient", Guidance = "Describe the relationships this credential has to one or more organizations.", AddText = "Add new Role", ParentRepeaterId = "0", UseSmallLabel = false, PropertySchema = "assertedBy" } )
							</div>


							@SectionButton( "Extra Information", "cr_extra", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="cr_extra">
								@SectionButton( "Learning Opportunity", "cr_learningOpps2", @Model.MainProfile.Id )
								<div id="cr_learningOpps2" class="detailTab" data-detailname="cr_learningOpps2">
									<div class="hideRemoveButtons">
										@*//could use this, if the search part is hidden?*@
										@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
								   {
									   Property = "TargetLearningOpportunity",
									   SearchType = "LearningOpportunitySearch",
									   ParentRepeaterId = "0",
									   Label = "Learning Opportunity",
									   SavedItemsHeader = "Credential Learning Opportunities",
									   Guidance = "Add any learning opportunity(ies) required or recommended for this credential.",
									   HasEditProfile = true,
									   HasCreateProfile = true,
									   CreateProfileTitle = "Learning Opportunity",
									   ProfileType = "LearningOpportunity",
									   AllowMultipleSavedItems = true,
									   AllowingSearch = true,
									   AllowingStarterCreate = false,
									   PropertySchema = "TargetLearningOpportunity",
									   AutoPropertyRefresh = new List<string>() { "TargetLearningOpportunity", "LearningOpportunity" }
								   } )
									</div>
								</div>
								@SectionButton( "Assessments", "cr_assessments2", @Model.MainProfile.Id )
								<div id="cr_assessments2" class="detailTab" data-detailname="cr_assessments2">

									<div class="hideRemoveButtons">
										@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
								   {
									   Property = "TargetAssessment",
									   SearchType = "AssessmentSearch",
									   ParentRepeaterId = "0",
									   Label = "Assessments",
									   SavedItemsHeader = "Credential Assessments",
									   Guidance = "Select or add assessment(s) required for this credential.",
									   HasEditProfile = true,
									   HasCreateProfile = true,
									   CreateProfileTitle = "Assessment",
									   ProfileType = "Assessment",
									   AllowMultipleSavedItems = true,
									   AllowingSearch = true,
									   AllowingStarterCreate = false,
									   PropertySchema = "TargetAssessment",
									   AutoPropertyRefresh = new List<string>() { "TargetAssessment", "Assessment" }
								   } )
									</div>
								</div>

								@SectionButton( "Process", "cr_credentialProcess", @Model.MainProfile.Id )
								<div class="detailTab" data-detailname="cr_credentialProcess">

									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "MaintenanceProcess",
								   Label = "Maintenance Processes",
								   Profile = "ProcessProfile",
								   Guidance = "Describe the processes used to maintain the credential.",
								   AddText = "Add new Maintenance Process",
								   ParentRepeaterId = "0",
								   UseSmallLabel = false,
								   PropertySchema = "MaintenanceProcess"
							   } )

									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "AdministrationProcess",
								   Label = "Administration Processes",
								   Profile = "ProcessProfile",
								   Guidance = "Describe the processes used to administer the credential.",
								   AddText = "Add new Administration Process",
								   ParentRepeaterId = "0",
								   UseSmallLabel = false,
								   PropertySchema = "AdministrationProcess"
							   } )

									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "DevelopmentProcess",
								   Label = "Development Processes",
								   Profile = "ProcessProfile",
								   Guidance = "Describe the processes used to develop the credential.",
								   AddText = "Add new Development Process",
								   ParentRepeaterId = "0",
								   UseSmallLabel = false,
								   PropertySchema = "DevelopmentProcess"
							   } )

									<div>


										@SectionButton( "Review Process", "cr_reviewProcess", @Model.MainProfile.Id )
										<div class="detailTab" data-detailname="cr_reviewProcess">


											@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "ReviewProcess",
									   Label = "Review Process",
									   Profile = "ProcessProfile",
									   Guidance = "Describe the processes used for reviews.",
									   AddText = "Add new Process Description",
									   ParentRepeaterId = "0",
									   UseSmallLabel = true,
									   ExtraClasses = new List<string>() { "hideCredentialOnly" }


								   } )
										</div>

										@SectionButton( "Revoke Process", "cr_RevocationProcess", @Model.MainProfile.Id )
										<div class="detailTab" data-detailname="cr_RevocationProcess">


											@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "RevocationProcess",
									   Label = "Revoke Process",
									   Profile = "ProcessProfile",
									   Guidance = "Describe the processes used for revocation.",
									   AddText = "Add new Process Description",
									   ParentRepeaterId = "0",
									   UseSmallLabel = true


								   } )
										</div>


										@SectionButton( "Appeal Process", "cr_appealProcess", @Model.MainProfile.Id )
										<div class="detailTab" data-detailname="cr_appealProcess">


											@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "AppealProcess",
									   Label = "Appeal Process",
									   Profile = "ProcessProfile",
									   Guidance = "Describe the processes used for appeals.",
									   AddText = "Add new Process Description",
									   ParentRepeaterId = "0",
									   UseSmallLabel = true


								   } )
										</div>



										@SectionButton( "Complaint Process", "cr_complaintProcess", @Model.MainProfile.Id )
										<div class="detailTab" data-detailname="cr_complaintProcess">


											@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "ComplaintProcess",
									   Label = "Complaint Process",
									   Profile = "ProcessProfile",
									   Guidance = "Describe the processes used for complaints.",
									   AddText = "Add new Process Description",
									   ParentRepeaterId = "0",
									   UseSmallLabel = true


								   } )
										</div>
									</div>

								</div>

								@if ( (@Model.Data.ProfileType ?? "") == "Certification" || (@Model.Data.ProfileType ?? "") == "License" )
								{
									@SectionButton( "Credential Renewal", "cr_CredentialRenewal", @Model.MainProfile.Id )
									<div class="detailTab" data-detailname="cr_CredentialRenewal">

										@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "Renewal",
									   Label = "Credential Renewal",
									   Profile = "ConditionProfile",
									   Guidance = "Describe the applicable conditions someone who previously attained this credential must meet in order to renew their status as a holder.",
									   AddText = "Add new Renewal Requirements",
									   ParentRepeaterId = "0",
									   PropertySchema = "ConditionProfile"
								   } )
									</div>
								}

								@*|| ( @Model.Data.ProfileType ?? "" ) == "Certificate"*@
								@if ( (@Model.Data.ProfileType ?? "") == "Certification"
|| (@Model.Data.ProfileType ?? "") == "License"
)
								{
									@SectionButton( "Revocation Terms", "cr_Revocation", @Model.MainProfile.Id )
									<div class="detailTab" data-detailname="cr_Revocation">
										<h2 class="detailTabHeader">cr_Revocation</h2>
										@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "Revocation",
									   Label = "Revocation Terms",
									   Profile = "RevocationProfile",
									   Guidance = "Describe the applicable conditions for removing this credential from someone that has previously attained it.",
									   AddText = "Add new Revocation Conditions",
									   ParentRepeaterId = "0",
									   UseSmallLabel = false,
									   PropertySchema = "RevocationProfile"
								   } )
									</div>
								}


								@SectionButton( "Credential Jurisdictions Assertions", "cr_jurisdiction", @Model.MainProfile.Id )
								<div class="detailTab" data-detailname="cr_jurisdiction">

									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "JurisdictionAssertions",
								   Profile = "JurisdictionProfile_QA",
								   ParentRepeaterId = "0",
								   Label = "Credential Jurisdiction Assertions",
								   AddText = "Add new Role",
								   Guidance = "The Credential being described is offered in the jurisdiction being referenced.",
								   PropertySchema = "{none}",
								   UseSmallLabel = true

							   } )

								</div>

							</div>



						</div>


						@if ( isUserAdmin )
						{
							@SectionButton( "Management", "cr_Management", 1 )
						}
						<div class="detailTab" data-detailname="cr_Management">
							<h2 class="tabItem" data-property="ManagementHeader">Management</h2>

							@RenderListInput( new ListInputSettings()
					   {
						   Property = "ManagingOrgId",
						   Label = "Managing Organization",
						   Type = ListInputSettings.InterfaceType.DROPDOWN_LIST,
						   Guidance = "Select the organization whose members can update this record.",
						   CodeItems = enumServices.GetOrganizationsAsCodes(),
						   PropertySchema = "{none}"
					   } )


						</div>

						@RenderRegistrySection( Model.MainProfile.Id, isPublished, ctid, registryResourceUrl, registryURLFormatted )


					</div>


				}
				break;


			case EditorSettings.EditorType.ORGANIZATION:
			case EditorSettings.EditorType.QA_ORGANIZATION:
				{
					if ( Model.MainProfile.Id == 0 )
					{
						if ( Model.Editor == EditorSettings.EditorType.QA_ORGANIZATION )
						{
							<h1>New Quality Assurance Organization</h1>
						}
						else
						{
							<h1>New Credentialing Organization</h1>
						}
					}
					else
					{
						<div class="editorHeader">
							<div class="headerBox headerBox2"><h1>@Model.MainProfile.Name</h1></div>
						</div>

					}
					<div class="editorSection">

						@SectionButton( "Organization", "entity_basic", 1 )
						<div class="detailTab" data-detailname="entity_basic">
							<h2 class="detailTabHeader">Basic Information</h2>

							@* Basic Info *@
							@RenderTextInput( "Name", "Organization Name", TextInputSettings.InputType.TEXT, "The official name of the organization.", true, 5 )

							<div class="offscreen">
								@if ( Model.Editor == EditorSettings.EditorType.QA_ORGANIZATION )
								{

									@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
							   {
								   Property = "",
								   Label = "Is a QA Organization",
								   IncludeDefaultItem = false,
								   Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST,
								   StringItems = new Dictionary<string, string>() {
						{ "ISQAOrganization", "Is this a QA Organization." }
					},
								   PreSelectedItem = 0,
								   RequireValue = true,
								   PropertySchema = "{none}"
							   } )

								}
								else
								{

									@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
							   {
								   Property = "",
								   Label = "Is a QA Organization",
								   IncludeDefaultItem = false,
								   Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST,
								   StringItems = new Dictionary<string, string>() {
						{ "ISQAOrganization", "Is this a QA Organization." }
					},
								   PreSelectedItem = -1,
								   RequireValue = true,
								   PropertySchema = "{none}"
							   } )

								}
							</div>

							@RenderTextInput( "Description", "Organization Description", TextInputSettings.InputType.TEXTAREA, "A summary or description of the organization.", true, 15 )


							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "SubjectWebpage",
						   Label = "Subject Webpage",
						   Type = TextInputSettings.InputType.URL,
						   Guidance = "The URL of a page that lists information about the organization.",
						   RequireValue = true
					   } )


							@RenderListInput( new ListInputSettings()
					   {
						   Property = "OrganizationTypeIds",
						   Label = "Organization Type",
						   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
						   Guidance = "Select the type(s) that best describe the organization. Check all that apply.",
						   EnumItems = enumServices.GetOrganizationType( EnumerationType.CUSTOM ).Items,
						   ExtraClasses = new List<string>() { "twoColumns" },
						   RequireValue = true,
						   PropertySchema = "OrganizationType"
					   } )

							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "AgentPurposeUrl",
						   Label = "Agent Purpose",
						   Type = TextInputSettings.InputType.URL,
						   Guidance = "A resource that describes the agent's primary purpose.",
						   PropertySchema = "AgentPurpose"
					   } )

							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "Purpose",
						   Label = "Agent Purpose Description",
						   Type = TextInputSettings.InputType.TEXTAREA,
						   Guidance = "A description of the primary purpose of the agent being referenced.",
						   PropertySchema = "AgentPurposeDescription"
					   } )

							@RenderTextInput( "MissionAndGoalsStatement", "Mission and Goals Statement", TextInputSettings.InputType.URL, " resource that defines or explains the mission and goals statement of the resource being described." )
							@RenderTextInput( "MissionAndGoalsStatementDescription", "Mission and Goals Statement Description", TextInputSettings.InputType.TEXTAREA, "The mission and goals statement of the described agent." )



							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "ImageUrl",
						   Label = "Organization Image",
						   Type = TextInputSettings.InputType.URL,
						   Guidance = "A publicly-accessible URL of the image or icon that represents the organization.",
						   PropertySchema = "Image"
					   } )


							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "FoundingDate",
						   Label = "Founding Date",
						   Type = TextInputSettings.InputType.TEXT,
						   Placeholder = "Date or patial date when organization was founded",
						   Guidance = "The year (yyyy) or year and month (yyyy-mm or June, 1926) or full date (yyyy-mm-dd, or January 17, 1923) the organization was founded.",
						   PropertySchema = "FoundingDate"
					   } )
							<div class="offscreen">
								@RenderTextInput( new TextInputSettings()
						   {
							   Property = "FoundingYear",
							   Label = "Founding Year",
							   Type = TextInputSettings.InputType.NUMBER,
							   Guidance = "The year the organization was founded.",
							   PropertySchema = "FoundingDate"
						   } )
								@RenderTextInput( new TextInputSettings()
						   {
							   Property = "FoundingMonth",
							   Label = "Founding Month",
							   Type = TextInputSettings.InputType.NUMBER,
							   Guidance = "The month the organization was founded.",
							   PropertySchema = "{none}"
						   } )
								@RenderTextInput( new TextInputSettings()
						   {
							   Property = "FoundingDay",
							   Label = "Founding Day",
							   Type = TextInputSettings.InputType.NUMBER,
							   Guidance = "The numeric/calendar day of the month the organization was founded.",
							   PropertySchema = "{none}"
						   } )
							</div>
							@*@RenderTextInput( "Versioning", "Versioning Information", TextInputSettings.InputType.TEXTAREA, "Describe how the organization manages changes in its credentials and credential-related processes." )

								CodeItems = enumServices.GetPropertiesList( "orgSectorType", false )*@

							@RenderListInput( new ListInputSettings()
					   {
						   Property = "OrganizationSectorTypeId",
						   Label = "Organization Sector Type",
						   Type = ListInputSettings.InterfaceType.RADIO_LIST,
						   Guidance = "Select the sector type that best describes the organization.",
						   EnumItems = enumServices.GetEnumeration( "orgSectorType", EnumerationType.SINGLE_SELECT, true ).Items,
						   PropertySchema = "agentSectorType",
						   AddNoneOption = true

					   } )

							@RenderListInput( new ListInputSettings()
					   {
						   Property = "OrganizationServiceTypeIds",
						   Label = "Organization Service Types",
						   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
						   Guidance = "The types of services offered by the organization.",
						   EnumItems = enumServices.GetOrganizationServices( EnumerationType.CUSTOM ).Items,
						   ExtraClasses = new List<string>() { "twoColumns" },
						   PropertySchema = "serviceType"
					   } )

							@RenderTextValueInput( new TextValueEditorSettings()
					   {
						   Property = "IdentificationCodes",
						   ParentRepeaterId = "0",
						   Label = "Organization Identification Codes",
						   AddText = "Add an Identification Code",
						   Guidance = "Codes that identify the organization within existing frameworks",
						   HasSelector = true,
						   HasOther = true,
						   CodeItems = new EnumerationServices().GetPropertiesList( "identityType", true ),
						   ValueType = TextInputSettings.InputType.TEXT,
						   PropertySchema = "{none}"
					   } )



							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "AlternativeIdentifier",
						   Label = "Alternative Identifier",
						   Type = TextInputSettings.InputType.TEXT,
						   Guidance = "An alternative, publicly available and globally unique agent identifier issued by an authoritative entity."
					   } )

							@RenderTextValueInput( "Keyword", "Keywords", TextInputSettings.InputType.TEXT, "Enter keywords that describe this organization.", "Add a Keyword", "Add a Keyword (max length of 200 characters)", "0" )

							@RenderProfileInput( "Jurisdiction", "Jurisdiction", "JurisdictionProfile", "Geo-political information about applicable geographic areas and their exceptions.", "Add new Jurisdiction", "0", false )


						</div>

						<div class="entityOtherSections">
							@SectionButton( "Location and Contact Information", "org_location", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="org_location">
								<h2 class="detailTabHeader">Contact Information</h2>

								@RenderTextInput( "AvailabilityListing", "Availability Listing", TextInputSettings.InputType.URL, "Provide a URL to a page that lists physical and/or online locations where this organization is located." )


								@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "ContactPoint", Profile = "ContactPoint", Label = "Contact Points", AddText = "Add new Contact Point", Guidance = "A means of contacting a resource or its representative(s).", ParentRepeaterId = "0", UseSmallLabel = true } )



								<div class="sectionGroup">

									@RenderTextValueInput( new TextValueEditorSettings()
							   {
								   Property = "SocialMediaPages",
								   Label = "Organization Social Media Pages",
								   ValueType = TextInputSettings.InputType.URL,
								   Guidance = "Social Media Pages that represent the organization directly.",
								   AddText = "Add a Social Media Page",
								   ValuePlaceholder = "http://",
								   ParentRepeaterId = "0",
								   UseSmallLabel = true,
								   RequireValue = false,
								   PropertySchema = "SocialMedia"
							   } )



									@RenderTextValueInput( new TextValueEditorSettings()
							   {
								   Property = "PhoneNumbers",
								   ParentRepeaterId = "0",
								   Label = "Organization Phone/Fax Numbers",
								   AddText = "Add a Phone/Fax Number",
								   Guidance = "Phone numbers for contacting the organization directly.",
								   HasSelector = true,
								   HasOther = true,
								   OtherPlaceholder = "Enter 'Other' phone type",
								   CodeItems = new EnumerationServices().GetPropertiesList( "phoneType", true ),
								   ValueType = TextInputSettings.InputType.TEXT,
								   ValuePlaceholder = "Phone/Fax Number",
								   PropertySchema = "telephone"

							   } )

									@RenderTextValueInput( new TextValueEditorSettings()
							   {
								   Property = "Emails",
								   ParentRepeaterId = "0",
								   Label = "Organization Emails",
								   AddText = "Add an Email",
								   Guidance = "Emails for contacting the organization directly. Please provide a purpose (e.g, \"Public Relations\", \"Technical Staff\", \"Head Office\", etc.) and a valid email address.",
								   ValueType = TextInputSettings.InputType.TEXT,
								   HasOther = true,
								   OtherPlaceholder = "Email Purpose",
								   ValuePlaceholder = "Email Address",
								   PropertySchema = "email"

							   } )

								</div>

								@RenderProfileInput( new ProfileSettings() { Property = "Address", Label = "Addresses", Profile = "AddressProfile", Guidance = "Addresses at which the organization can be reached.", AddText = "Add an Address", ParentRepeaterId = "0", UseSmallLabel = true } )

							</div>
							<div class="organizationOnly">
								@SectionButton( "Industries", "org_industries", @Model.MainProfile.Id )
								<div class="detailTab" data-detailname="org_industries">
									<div class="propertyBox tabItem ">
										@RenderMicroSearchInput( new MicroSearchSettings()
								   {
									   Property = "Industry",
									   SearchType = "IndustrySearch",
									   ProfileTemplate = "CodeItem",
									   SavedItemsHeader = "Saved Industries",
									   ParentRepeaterId = "0",
									   Label = "Industry Codes",
									   Guidance = "Identify the specific industries this organization operates in. We recommend using the <a href=\"http://www.naics.com/search/\" target=\"_blank\">NAICS codes</a>. Select an Industry category and browse through codes or search by entering a keyword or parial NAICS code in the text box.",
									   ExtraClasses = new List<string>() { "tabItem" },
									   Filters = new List<MicroSearchFilter>() {
												new MicroSearchFilter() { FilterName = "HeaderId", Type = "select", Items = industryHeaders }
											},
									   PropertySchema = "IndustryType"
								   } )
									</div>
									@RenderTextValueInput( new TextValueEditorSettings()
							   {
								   Property = "OtherIndustries",
								   Label = "Other Industries",
								   ValueType = TextInputSettings.InputType.TEXT,
								   Guidance = "Enter an industry that does not exist via the search.",
								   AddText = "Add an Industry",
								   ValuePlaceholder = "Add another Industry",
								   ParentRepeaterId = "0",
								   PropertySchema = "IndustryType"
							   } )

								</div>
							</div>

							@SectionButton( "Departments and Sub-Organizations", "org_dept", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="org_dept">
								@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
						   {
							   Property = "Department",
							   SearchType = "OrganizationSearch",
							   Label = "Department Organizations",
							   Guidance = "Identify any organizations that are a department of this organization.",
							   SavedItemsHeader = "Organization Departments",
							   ExtraClasses = new List<string>
									() { "tabItem" },
							   HasEditProfile = true,
							   HasCreateProfile = true,
							   CreateProfileTitle = "Department",
							   ProfileType = "Organization",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false,
							   AllowingStarterCreate = false

						   } )


								@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
						   {
							   Property = "Subsidiary",
							   SearchType = "OrganizationSearch",
							   Label = "Subsidiary Organizations",
							   Guidance = "Identify any organizations that are a subsidiary of this organization.",
							   SavedItemsHeader = "Organization Subsidiaries",
							   ExtraClasses = new List<string>
									() { "tabItem" },
							   HasEditProfile = true,
							   HasCreateProfile = true,
							   CreateProfileTitle = "Subsidiary",
							   ProfileType = "Organization",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false,
							   AllowingStarterCreate = false,
							   PropertySchema = "ceterms:subOrganization"
						   } )

							</div>

							@if ( AccountServices.IsUserAnAdmin() )
							{ }
							@SectionButton( "Costs Manifests", "org_CostManifest", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="org_CostManifest">

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "HasCostManifest",
							   Label = "Cost Manifest",
							   Profile = "CostManifest",
							   Guidance = "A set of costs maintained at the organizational and/or sub-organizational level. These costs are intended to be referenced by other resources to augment the process of describing the costs for those entities.",
							   AddText = "Add new Cost Manifest",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false,
							   RequireValue = false
						   } )
							</div>

							@SectionButton( "Condition Manifests", "org_ConditionManifest", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="org_ConditionManifest">

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "HasConditionManifest",
							   Label = "Condition Manifest",
							   Profile = "ConditionManifest",
							   Guidance = "A set of conditions maintained at the organizational and/or sub-organizational level.<br/>These conditions are intended to be referenced by external entities to augment the process of describing the conditions for those entities.",
							   AddText = "Add new Condition Manifest",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false,
							   RequireValue = false
						   } )
							</div>

							@SectionButton( "Organization Processes", "org_Processes", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="org_Processes">

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "MaintenanceProcess",
							   Label = "Maintenance Processes",
							   Profile = "ProcessProfile",
							   Guidance = "Describe the processes used to maintain the credential.",
							   AddText = "Add new Maintenance Process",
							   ParentRepeaterId = "0",
							   PropertySchema = "MaintenanceProcess"
						   } )

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "AdministrationProcess",
							   Label = "Administration Processes",
							   Profile = "ProcessProfile",
							   Guidance = "Describe the processes used to administer the credential.",
							   AddText = "Add new Administration Process",
							   ParentRepeaterId = "0",
							   PropertySchema = "AdministrationProcess"
						   } )

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "DevelopmentProcess",
							   Label = "Development Processes",
							   Profile = "ProcessProfile",
							   Guidance = "Describe the processes used to develop the credential.",
							   AddText = "Add new Development Process",
							   ParentRepeaterId = "0",
							   PropertySchema = "DevelopmentProcess"
						   } )
								<div>


									@SectionButton( "Review Process", "org_reviewProcess", @Model.MainProfile.Id )
									<div class="detailTab" data-detailname="org_reviewProcess">


										@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "ReviewProcess",
									   Label = "Review Process",
									   Profile = "ProcessProfile",
									   Guidance = "Describe the processes used for reviews.",
									   AddText = "Add new Process Description",
									   ParentRepeaterId = "0",
									   UseSmallLabel = true,
									   ExtraClasses = new List<string>() { "hideCredentialOnly" }


								   } )
									</div>



									@SectionButton( "Revocation Process", "org_RevocationProcess", @Model.MainProfile.Id )
									<div class="detailTab" data-detailname="org_RevocationProcess">


										@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "RevocationProcess",
									   Label = "Revocation Process",
									   Profile = "ProcessProfile",
									   Guidance = "Describe the processes used for revocation.",
									   AddText = "Add new Process Description",
									   ParentRepeaterId = "0",
									   UseSmallLabel = true


								   } )
									</div>


									@SectionButton( "Appeal Process", "org_appealProcess", @Model.MainProfile.Id )
									<div class="detailTab" data-detailname="org_appealProcess">


										@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "AppealProcess",
									   Label = "Appeal Process",
									   Profile = "ProcessProfile",
									   Guidance = "Describe the processes used for appeals.",
									   AddText = "Add new Process Description",
									   ParentRepeaterId = "0",
									   UseSmallLabel = true


								   } )
									</div>



									@SectionButton( "Complaint Process", "org_complaintProcess", @Model.MainProfile.Id )
									<div class="detailTab" data-detailname="org_complaintProcess">


										@RenderProfileInput( new ProfileSettings()
								   {
									   Property = "ComplaintProcess",
									   Label = "Complaint Process",
									   Profile = "ProcessProfile",
									   Guidance = "Describe the processes used for complaints.",
									   AddText = "Add new Process Description",
									   ParentRepeaterId = "0",
									   UseSmallLabel = true


								   } )
									</div>
								</div>


							</div>





							@SectionButton( "External Third Party Quality Assurance", "org_roles_recipient", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="org_roles_recipient">



								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "AgentRole_Recipient",
							   Label = "External Third Party Quality Assurance",
							   Profile = "AgentRoleProfile_Recipient",
							   Guidance = "Describe the relationships this organization has to one or more organizations where this organization is the recipient of the role.",
							   AddText = "Add new Role",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false,
							   RequireValue = false,
							   PropertySchema = "assertedBy"


						   }
										)

							</div>




							@SectionButton( "Verification Services", "org_verification", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="org_verification">


								@RenderProfileInput( "VerificationService", "Verification Services", "VerificationServiceProfile", "If the organization provides services to prove that individuals have credentials, describe them here.", "Add a Verification Profile", "0", false )


							</div>

							@SectionButton( "Organization Jurisdictions Assertions", "org_jurisdiction", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="org_jurisdiction">
								@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "JurisdictionAssertions",
								   Profile = "JurisdictionProfile_QA",
								   ParentRepeaterId = "0",
								   Label = "Organization Jurisdiction Assertions",
								   AddText = "Add new Role",
								   Guidance = "The Organization being described is asserted in the jurisdiction being referenced.",
								   PropertySchema = "{none}",
								   UseSmallLabel = true



							   } )

							</div>

							@*@SectionButton( "Quality Assurance Actions Received", "org_qaReceived", @Model.MainProfile.Id)
								<div class="detailTab" data-detailname="org_qaReceived">
									@RenderProfileInput( new ProfileSettings() { Property = "QualityAssuranceAction_Recipient", Label = "Quality Assurance Actions Received", Profile = "QualityAssuranceActionProfile_Recipient", Guidance = "Describe the Quality Assurance Actions that have been applied to this organization.", AddText = "Add new Quality Assurance Action", ParentRepeaterId = "0", UseSmallLabel = false, RequireValue = false } )

								</div>*@

							@SectionButton( "Organization Credentials", "org_credentials", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="org_credentials">
								<div class="hideRemoveButtons">


									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "CreatedCredentials",
								   SearchType = "CredentialSearch",
								   SavedItemsHeader = "Credentials owned by this Organization",
								   ProfileTemplate = "MicroProfile",
								   ParentRepeaterId = "0",
								   ProfileType = "Credential",
								   Label = "Credentials",
								   Guidance = "Shows a list of Credentials owned by this Organization. Credentials are NOT added here.",
								   ExtraClasses = new List<string>() { "tabItem" },
								   HasCreateProfile = false,
								   AllowingSearch = false,
								   AllowingStarterCreate = false,
								   HasEditProfile = true,
								   HasResultLink = true,
								   UseSmallLabel = false,
								   PropertySchema = "{none}"


							   } )
								</div>
							</div>





							@if ( Model.Editor == EditorSettings.EditorType.QA_ORGANIZATION )
							{

								@SectionButton( "Quality Assurance Credentials (TBD)", "org_QAIinformation", @Model.MainProfile.Id )
								<div class="detailTab" data-detailname="org_QAIinformation">



									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "QACredentials",
								   SearchType = "CredentialSearch",
								   SavedItemsHeader = "QA Credentials",
								   ProfileTemplate = "MicroProfile",
								   ParentRepeaterId = "0",
								   ProfileType = "Credential",
								   Label = "QA Credentials",
								   Guidance = "Identify/add any QA credentials that are owned by this organization.",
								   ExtraClasses = new List<string>() { "tabItem" },
								   HasEditProfile = true,
								   HasResultLink = true,
								   AllowingStarterCreate = false,
								   HasCreateProfile = true,
								   UseSmallLabel = false,
								   PropertySchema = "HasPart"


							   } )


								</div>




								@SectionButton( "QA Verification Status", "org_verificationStatus", @Model.MainProfile.Id )
								<div class="detailTab" data-detailname="org_verificationStatus">


									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "VerificationStatus",
								   Label = "Verification Status",
								   Profile = "VerificationServiceStatus",
								   Guidance = "Add each applicable status used for verification.",
								   AddText = "Add new Verification Status",
								   ParentRepeaterId = "0",
								   UseSmallLabel = true,
								   PropertySchema = "{none}"


							   } )

								</div>

							}

							@RenderRegistrySection( Model.MainProfile.Id, isPublished, ctid, registryResourceUrl, registryURLFormatted )

						</div>
					</div><!-- /tabItems -->
				}
				break;

			//==================================================
			case EditorSettings.EditorType.ASSESSMENT:
				{
					if ( Model.MainProfile.Id == 0 )
					{
						<h1>New Assessment</h1>
					}
					else
					{
						<h1 class="offscreen">@Model.MainProfile.Name</h1>
						<div class="editorHeader">
							<div class="headerBox headerBoxa">@Model.MainProfile.Name</div>
							<div class="headerBox headerBoxb" id="entityOwningOrg"></div>
						</div>

					}
					<div class="editorSection">


						@* Basic Info *@
						@SectionButton( "Assessment", "entity_basic", 1 )
						<div class="detailTab" data-detailname="entity_basic">
							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "Name",
						   Label = "Assessment Name",
						   Type = TextInputSettings.InputType.TEXT,
						   RequireValue = true,
						   MinimumLength = 5,
						   Guidance = "The official name of the assessment."


					   } )

							<div>
								<div id="enterOwningOrg" class="propertyBox tabItem ">
									@*@if (Model.MainProfile.Id == 0) {*@

									@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
							   {
								   Property = "OwningOrganization",
								   SearchType = "OrganizationSearch",
								   Label = "Owning Organization",
								   Guidance = orgSelectGuidance,
								   SavedItemsHeader = "Owning Organization",
								   PageSize = 5,
								   AllowMultipleSavedItems = false,
								   ParentRepeaterId = "0",
								   DoAjaxSave = false,
								   RequireValue = true,
								   AllowCreateWithoutParentExisting = true,
								   AllowingStarterCreate = false,
								   HasEditProfile = true,
								   HasCreateProfile = true,
								   CreateProfileTitle = "Organization",
								   ProfileType = "Organization",
								   Filters = orgFilters,
								   PropertySchema = "CredentialOrganization"


							   } )
								</div>


								@RenderListInput( new ListInputSettings()
						   {
							   Property = "RoleTypeIds",
							   Label = "Roles for Owning Organization",
							   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
							   Guidance = "Select the type(s) of relationship the owning organization has to this Assessment. <br/>Check OWNED BY, and all others that apply.",
							   EnumItems = enumServices.GetCredentialOwnerAgentRoles( EnumerationType.CUSTOM ).Items,
							   UseSmallLabel = false,
							   PreSelectedItem = 0, //only preselect on new
							   RequireValue = true,
							   PropertySchema = "{none}"


						   } )
							</div>
							<div id="existingOwningOrg" style="display:none;" class="propertyBox tabItem ">
								<div class="label   isRequired">Owning Organization</div>
								<div class="data">


									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "OwnerOrganizationRoles",
								   Label = "",
								   Profile = "AgentRoleProfile_Recipient",
								   Guidance = orgSelectGuidance,
								   AddText = "",
								   ParentRepeaterId = "0",
								   UseSmallLabel = true,
								   RequireValue = true


							   } )

								</div>
							</div>


							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "Description",
						   Label = "Assessment Description",
						   Type = TextInputSettings.InputType.TEXTAREA,
						   RequireValue = true,
						   MinimumLength = 15,
						   Guidance = "A summary or description of the assesssment."


					   } )


							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "SubjectWebpage",
						   Label = "Subject Webpage",
						   Type = TextInputSettings.InputType.URL,
						   Guidance = "The URL of a page that lists information about the assessment.",
						   RequireValue = true
					   } )


							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "CodedNotation",
						   Label = "Coded Notation",
						   Type = TextInputSettings.InputType.TEXT,
						   Guidance = "Provide the identification code for the assessment, if it has one."


					   } )

							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "VersionIdentifier",
						   Label = "Version Identifier",
						   Type = TextInputSettings.InputType.TEXT,
						   Guidance = "An alphanumeric identifier of a version of the resource being described that is unique within the organizational context.",
						   PropertySchema = "versionIdentifier"
					   } )

							@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "InLanguageId", Label = "Language", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "The primary language used in or by the resource being described.", EnumItems = enumServices.GetLanguages( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )



							@RenderListInput( new ListInputSettings()
					   {
						   Property = "AssessmentMethodType",
						   Label = "Assessment Method Type",
						   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
						   HasOtherBox = false,
						   Guidance = "An enumeration of assessment methods.",
						   EnumItems = enumServices.GetEnumeration( "assessmentMethodType", EnumerationType.CUSTOM ).Items


					   } )


							@RenderTextInput( "AssessmentOutput", "Assessment Output", TextInputSettings.InputType.TEXTAREA, "A more precise refinement of the assessment type." )




							@RenderListInput( new ListInputSettings()
					   {
						   Property = "DeliveryType",
						   Label = "Delivery Type",
						   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
						   HasOtherBox = false,
						   Guidance = "Select the type(s) that best describe the way the assessment is delivered. Check all that apply.",
						   EnumItems = enumServices.GetEnumeration( "deliveryType", EnumerationType.MULTI_SELECT, true ).Items,
						   ExtraClasses = new List<string>() { "twoColumns" }


					   } )
							@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DeliveryTypeDescription", Label = "Delivery Type Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "A more detailed, refined description of delivery type." } )


							@*
								@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() {
									Property = "IsProctored",
									Label = "Is Proctored",
									IncludeDefaultItem = false,
									Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST,
									Guidance = "An administrative process that ensures the assessment is being delivered to the right person(s) under the right conditions (e.g., instructions, time, materials, equipment) and without access to unauthorized assistance (e.g., other people, references).",
									StringItems = new Dictionary<string, string>() {
										{ "IsProctored", "" }
									}
								} )
							*@
							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "IsProctored",
						   Label = "Is Proctored",
						   Type = TextInputSettings.InputType.NULLABLE_BOOLEAN,
						   Guidance = "An administrative process that ensures the assessment is being delivered to the right person(s) under the right conditions (e.g., instructions, time, materials, equipment) and without access to unauthorized assistance (e.g., other people, references).",
						   NullableBooleanNullText = "No Data",
						   NullableBooleanTrueText = "This assessment is proctored.",
						   NullableBooleanFalseText = "This assessment is not proctored."

					   } )

							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "HasGroupEvaluation",
						   Label = "Has Group Evaluation",
						   Type = TextInputSettings.InputType.NULLABLE_BOOLEAN,
						   Guidance = "Participants in the assessment activity being referenced are scored as a group.",
						   NullableBooleanNullText = "No Data",
						   NullableBooleanTrueText = "This assessment uses group evaluation.",
						   NullableBooleanFalseText = "This assessment does not use group evaluation."

					   } )

							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "HasGroupParticipation",
						   Label = "Has Group Participation",
						   Type = TextInputSettings.InputType.NULLABLE_BOOLEAN,
						   Guidance = "Completing the assessment activity being referenced requires two or more participants.",
						   NullableBooleanNullText = "No Data",
						   NullableBooleanTrueText = "This assessment uses group participation.",
						   NullableBooleanFalseText = "This assessment does not use group participation."

					   } )



							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "AvailableOnlineAt",
						   Label = "Available Online At",
						   Type = TextInputSettings.InputType.URL,
						   Guidance = "Provide a URL to where this assessment is available online."


					   } )



							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "AvailabilityListing",
						   Label = "Availability Listing",
						   Type = TextInputSettings.InputType.URL,
						   Guidance = "Provide a URL to a page that lists physical and/or online locations where this assessment is available."


					   } )



							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "DateEffective",
						   Label = "Effective Date",
						   Type = TextInputSettings.InputType.DATE,
						   Guidance = "The date that this information was first applicable."


					   } )


							@RenderListInput( new ListInputSettings()
					   {
						   Property = "AssessmentUseType",
						   Label = "Assessment Use Types",
						   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
						   HasOtherBox = false,
						   Guidance = "The intended use of the assessment being referenced.",
						   EnumItems = enumServices.GetEnumeration( "assessmentUse", EnumerationType.MULTI_SELECT ).Items,
						   ExtraClasses = new List<string>() { "twoColumns" }


					   } )




							<div class="sectionGroup">


								@RenderTextInput( "AssessmentExample", "Assessment Example", TextInputSettings.InputType.URL, "A resource that provides an example assessment or assessment item." )



								@RenderTextInput( "AssessmentExampleDescription", "Assessment Example Description", TextInputSettings.InputType.TEXTAREA, "Text of an example assessment item." )
							</div>

							<div class="sectionGroup">


								@RenderListInput( new ListInputSettings()
						   {
							   Property = "ScoringMethodType",
							   Label = "Scoring Method Type",
							   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
							   Guidance = "Type of scoring method.",
							   EnumItems = enumServices.GetEnumerationForRadioButtons( "scoringMethod", 1 ).Items,
							   UseSmallLabel = false


						   } )




								@RenderTextInput( "ScoringMethodDescription", "Scoring Method Description", TextInputSettings.InputType.TEXTAREA, "A description of the Scoring Method ." )



								@RenderTextInput( "ScoringMethodExample", "Scoring Method Example", TextInputSettings.InputType.URL, "A resource that is an example of the method or tool used to score the assessment." )



								@RenderTextInput( "ScoringMethodExampleDescription", "Scoring Method Example Description", TextInputSettings.InputType.TEXTAREA, "The text of an example of the method or tool used to score the assessment." )
							</div>



							@RenderTextInput( "ExternalResearch", "External Research", TextInputSettings.InputType.URL, "A resource that provides information about research that supports one or more aspects of the resource being described." )

							<div class="sectionGroup">


								@RenderTextInput( "ProcessStandards", "Process Standards", TextInputSettings.InputType.URL, "A resource describing the criteria, standards, and/or requirements used." )


								@RenderTextInput( "ProcessStandardsDescription", "Process Standards Description", TextInputSettings.InputType.TEXTAREA, "A description of the criteria, standards, and/or requirements used." )
							</div>

							<div class="sectionGroup">
								<p>Enter Credit Hour data or Credit Unit data, but not both!</p>
								<p style="text-align:center">Credit Hour Data</p>
								<div class="sectionGroup">

									@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourType", Label = "Credit Hour Type", Type = TextInputSettings.InputType.TEXT, Guidance = "Units of time corresponding to types of credits. Examples include but are not limited to semester hours, quarter hours, clock hours, or hours of participation." } )

									@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourValue", Label = "Credit Hour Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of credit hours awarded for completing or attaining the resource being described." } )
								</div>
								<p style="text-align:center">Credit Unit Data</p>
								<div class="sectionGroup">
									@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CreditUnitType", Label = "Credit Unit Type", Type = ListInputSettings.InterfaceType.RADIO_LIST, HasOtherBox = false, Guidance = "The type of credit associated with degree and non-degree learning opportunities.", EnumItems = enumServices.GetEnumeration( "creditUnit", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items, AddNoneOption = true } )


									@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitTypeDescription", Label = "Credit Unit Type Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Provide	a more refined, detailed description of credit unit type." } )
									@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitValue", Label = "Credit Unit Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of either credit units awarded for college credit or continuing education units for completing or attaining the resource being described." } )
								</div>
							</div>



							@RenderProfileInput( new ProfileSettings()
					   {
						   Property = "Duration",
						   Profile = "DurationProfile",
						   ParentRepeaterId = "0",
						   Label = "Estimated Duration",
						   AddText = "Add new Time Estimate",
						   Guidance = "Describe the estimated amount of time it would take to complete the assessment normally, and for each applicable special circumstance.",
						   UseSmallLabel = true,
						   PropertySchema = "ceterms:estimatedDuration"


					   } )



							@RenderProfileInput( new ProfileSettings()
					   {
						   Property = "Addresses",
						   Profile = "AddressProfile",
						   ParentRepeaterId = "0",
						   Label = "Available at Addresses",
						   AddText = "Add an Address",
						   Guidance = "Enter addresses at which the assessment is available.",
						   UseSmallLabel = true,
						   PropertySchema = "AvailableAt"



					   } )


							@RenderTextInput( "VerificationMethodDescription", "Verification Method Description", TextInputSettings.InputType.TEXTAREA, "Description of the methods used to evaluate the validity and reliability." )


							@RenderTextValueInput( new TextValueEditorSettings()
					   {
						   Property = "Subject",
						   ParentRepeaterId = "0",
						   Label = "Subjects",
						   AddText = "Add a Subject",
						   Guidance = "Enter subjects that describe this record.",
						   ValueType = TextInputSettings.InputType.TEXT,
						   ValuePlaceholder = "Subject (maximum of 200 characters)"


					   } )



							@RenderTextValueInput( new TextValueEditorSettings()
					   {
						   Property = "Keyword",
						   ParentRepeaterId = "0",
						   Label = "Keywords",
						   AddText = "Add a Keyword",
						   Guidance = "Enter keyword(s) that describe this record.",
						   ValueType = TextInputSettings.InputType.TEXT,
						   ValuePlaceholder = "Add a Keyword (max length of 200 characters)"


					   } )

							<div class="sectionGroup ">
								<div class="propertyBox tabItem ">


									@RenderProfileInput( "Jurisdiction", "Jurisdiction", "JurisdictionProfile", "Geo-political information about applicable geographic areas and their exceptions.", "Add new Jurisdiction", "0" )

								</div>
								@*<div class="propertyBox tabItem ">


									@RenderProfileInput( "Region", "Region", "JurisdictionProfile", "A geo-political area of the described resource.", "Add new Region", "0" )

								</div>*@
							</div>

						</div>

						<div class="entityOtherSections">


							@SectionButton( "Competencies", "asmt_Competencies", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_Competencies">


								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "RequiresCompetenciesFrameworks",
							   Profile = "CredentialAlignmentObjectFrameworkProfile",
							   Label = "Requires Competencies",
							   AddText = "Add new Competency",
							   Guidance = "Indicate the competencies this assessment requires.",
							   ParentRepeaterId = "0",
							   PropertySchema = "targetCompetency"



						   } )
@if ( isUserAdmin )
{
								@RenderCassBrowser( "RequiresCompetencies_CASS",
			"",
			"cassSaveCompetencyList",
			"cassRemoveCompetency",
			"0" )
}
								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "AssessesCompetenciesFrameworks",
							   Profile = "CredentialAlignmentObjectFrameworkProfile",
							   Label = "Assesses Competencies",
							   AddText = "Add new Competency",
							   Guidance = "Indicate the competencies this assessment assesses.",
							   ParentRepeaterId = "0",
							   PropertySchema = "targetCompetency"



						   } )

							</div>

							@SectionButton( "Assessment Connections", "asmt_connections", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_connections">

								@RenderProfileInput( new ProfileSettings()
								{
									Property = "AssessmentConnections",
							   Label = "Assessment Connections",
							   Profile = "CredentialsConditionProfile",
							   Guidance = "Add Assessment Connections such as for advanced standing.",
							   AddText = "Add a new Connection",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false,
							   PropertySchema = "{none}"
						   } )

							</div>

							@SectionButton( "Referenced by Credential(s) ", "asmt_credentials", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_credentials">
								<h2 class="detailTabHeader">asmt_credentials</h2>

								<div class="hideRemoveButtons">
									@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
								{
									Property = "IsPartOfCredential",
								   SearchType = "CredentialSearch",
								   ParentRepeaterId = "0",
								   Label = "Used in Credentials",
								   SavedItemsHeader = "Credentials",
								   Guidance = "This assessment is referenced in the following credentials.",
								   HasEditProfile = true,
								   HasCreateProfile = false,
								   CreateProfileTitle = "",
								   ProfileType = "Credential",
								   AllowMultipleSavedItems = true,
								   AllowingSearch = false,
								   AllowingStarterCreate = false,
								   PropertySchema = "Credential"


							   } )
								</div>


							</div>




							@SectionButton( "Roles", "asmt_roles", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_roles">


								@RenderProfileInput( new ProfileSettings()
								{
									Property = "AgentRole_Recipient",
							   Profile = "AgentRoleProfile_Recipient",
							   ParentRepeaterId = "0",
							   Label = "Agent Roles Received",
							   AddText = "Add new Role",
							   Guidance = "Describe the relationships this assessment has to one or more organizations where this assessment is the recipient of the role.",
							   UseSmallLabel = false,
							   PropertySchema = "assertedBy"



						   } )

							</div>



							@SectionButton( "Assessment Jurisdictions Assertions", "asmt_jurisdiction", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_jurisdiction">



								@RenderProfileInput( new ProfileSettings()
								{
									Property = "JurisdictionAssertions",
							   Profile = "JurisdictionProfile_QA",
							   ParentRepeaterId = "0",
							   Label = "Assessment Jurisdictions Assertions",
							   AddText = "Add new Role",
							   Guidance = "The Assessment being described is offered in the jurisdiction being referenced.",
							   PropertySchema = "{none}",
							   UseSmallLabel = true



						   } )

							</div>

							@*
								@SectionButton( "Quality Assurance Actions Received", "asmt_qaAction", @Model.MainProfile.Id)*@
							@*<div class="detailTab" data-detailname="asmt_qaAction">
											@RenderProfileInput( new ProfileSettings() {
														   Property = "QualityAssuranceAction_Recipient", Profile = "QualityAssuranceActionProfile_Recipient", ParentRepeaterId = "0", Label = "Quality Assurance Actions Received", AddText = "Add new Quality Assurance Action", Guidance = "Describe the Quality Assurance Actions that have been applied to this assessment.", UseSmallLabel = false

								} )

										</div>*@
							@SectionButton( "Estimated Costs", "asmt_costs", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_costs">
								<div class="propertyBox ">
									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "CommonCosts",
								   SearchType = "CostManifestSearch",
								   ProfileTemplate = "MicroProfile",
								   SavedItemsHeader = "Common Cost Manifest(s)",
								   Label = "Common cost manifest(s) for this resources",
								   Guidance = "Search for a common cost manifest for this resource. Only cost manifests for the owning organization will be displayed.",
								   PropertySchema = "{none}",
								   HasCreateProfile = false,
								   AllowMultipleSavedItems = true,
								   DoAjaxSave = true,
								   PageSize = 20,
								   HasKeywords = false,
								   ParentRepeaterId = "0",
								   HiddenFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() {
								FilterName = "ParentId",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.Id.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "TypeName",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.TypeName.ToString()),
							}

				   }
							   } )
								</div>

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "Cost",
							   Profile = "CostProfile",
							   Label = "Estimated Costs",
							   AddText = "Add new Cost",
							   Guidance = "If there are any costs associated with this assessment, describe them here.",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false



						   } )

							</div>




							@SectionButton( "Financial Assistance", "asmt_financialAlignment", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_financialAlignment">



								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "FinancialAssistance",
							   Label = "Financial Assistance",
							   Profile = "FinancialAlignmentObject",
							   Guidance = "The types of financial assistance for which the resource being described qualifies.",
							   AddText = "Add new Financial Assistance Profile",
							   CopyText = "",
							   ParentRepeaterId = "0"


						   } )

							</div>



							@SectionButton( "Conditions and Requirements", "asmt_Conditions", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_Conditions">


								<div class="propertyBox ">
									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "CommonConditions",
								   SearchType = "ConditionManifestSearch",
								   ProfileTemplate = "MicroProfile",
								   SavedItemsHeader = "Common Condition Manifest(s)",
								   Label = "Common condition manifest(s) for this resources",
								   Guidance = "Search for a common condition manifest for this resource.",
								   PropertySchema = "{none}",
								   HasCreateProfile = false,
								   AllowMultipleSavedItems = true,
								   DoAjaxSave = true,
								   PageSize = 20,
								   HasKeywords = false,
								   ParentRepeaterId = "0",
								   HiddenFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() {
								FilterName = "ParentId",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.Id.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "OwningAgentUid",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.OwningAgentUid.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "TypeName",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.TypeName.ToString()),
							}

				   }
							   } )
								</div>


								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "Requires",
							   Profile = "ConditionProfile",
							   Label = "Requirements",
							   AddText = "Add new Requirements",
							   Guidance = "Indicate the requirements for passing this assessment.",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false



						   } )





								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "Recommends",
							   Profile = "ConditionProfile",
							   Label = "Recommendations",
							   AddText = "Add new Recommendations",
							   Guidance = "Indicate any recommendations for preparing for this assessment.",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false



						   } )




								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "EntryCondition",
							   Label = "Entry Conditions",
							   Profile = "ConditionProfile",
							   Guidance = "The prerequisites for this assessment.",
							   AddText = "Add a new Entry Condition",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false


						   } )





								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "Corequisite",
							   Label = "Corequisite Conditions",
							   Profile = "CorequisiteConditionProfile",
							   Guidance = "Assessments that must be pursued or taken along with this assessment.",
							   AddText = "Add a new Corequisite Condition",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false




						   } )

							</div>

							@SectionButton( "Instructional Program Categories", "asmt_cips", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_cips">
								<div class="propertyBox">


									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "CipCode",
								   SearchType = "CIPSearch",
								   ProfileTemplate = "CodeItem",
								   SavedItemsHeader = "Saved CIP Codes",
								   ParentRepeaterId = "0",
								   Label = "Instructional Program Category",
								   Guidance = "Identify the specific instructional program classifications that apply to this assessment. We recommend using the <a href=\"https://nces.ed.gov/ipeds/cipcode/browse.aspx?y=55\" target=\"_blank\">CIP codes</a>.",
								   ExtraClasses = new List<string>() { "tabItem" },
								   Filters = new List<MicroSearchFilter>() {
									new MicroSearchFilter() { FilterName = "HeaderId", Type = "select", Items = cipHeaders }
								},
								   PropertySchema = "InstructionalProgramType"


							   } )
								</div>



								@RenderTextValueInput( new TextValueEditorSettings()
						   {
							   Property = "OtherInstructionalProgramCategory",
							   Label = "Other Program Categories",
							   AddText = "Add a Program Category",
							   Guidance = "Enter an Instructional Program Category that does not exist via the search.",
							   ValueType = TextInputSettings.InputType.TEXT,
							   ValuePlaceholder = "Add another Program Category",
							   ParentRepeaterId = "0",
							   PropertySchema = "InstructionalProgramType"


						   } )

							</div>



							@SectionButton( "Extra Information", "asmt_extra", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="asmt_extra">



								@SectionButton( "Processes", "asmt_process", @Model.MainProfile.Id )
								<div class="detailTab" data-detailname="asmt_process">



									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "MaintenanceProcess",
								   Label = "Maintenance Process",
								   Profile = "ProcessProfile",
								   Guidance = "Describe the processes used to maintain the assessment.",
								   AddText = "Add new Maintenance Process",
								   ParentRepeaterId = "0",
								   PropertySchema = "MaintenanceProcess"


							   } )



									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "AdministrationProcess",
								   Label = "Administration Process",
								   Profile = "ProcessProfile",
								   Guidance = "Describe the processes used to administer the assessment.",
								   AddText = "Add new Administration Process",
								   ParentRepeaterId = "0",
								   PropertySchema = "AdministrationProcess"


							   } )



									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "DevelopmentProcess",
								   Label = "Development Process",
								   Profile = "ProcessProfile",
								   Guidance = "Describe the processes used to develop the assessment.",
								   AddText = "Add new Development Process",
								   ParentRepeaterId = "0",
								   PropertySchema = "DevelopmentProcess"


							   } )

									@*@SectionButton( "Assessment Processes", "asmt_processes", @Model.MainProfile.Id)
										<div class="detailTab" data-detailname="asmt_processes">
											@RenderProfileInput( "AssessmentProcess", "Assessment Processes", "ProcessProfile", "Describe the processes used to select, develop, validate, or maintain the assessment.", "Add new Process Description", "0", false )
										</div>*@

								</div>


							</div>





							@if ( isUserAdmin )
							{
								@SectionButton( "Managing Organization", "asmt_mgmt", @Model.MainProfile.Id )
							}
							<div class="detailTab" data-detailname="asmt_mgmt">


								@RenderListInput( "ManagingOrgId", "Managing Organization", ListInputSettings.InterfaceType.DROPDOWN_LIST, "Select the organization whose members can update this record.", null, enumServices.GetOrganizationsAsCodes() )

							</div>
						</div>
						@RenderRegistrySection( Model.MainProfile.Id, isPublished, ctid, registryResourceUrl, registryURLFormatted )

					</div><!-- /tabItems -->
				}
				break;

			case EditorSettings.EditorType.LEARNINGOPPORTUNITY:
				{

					if ( Model.MainProfile.Id == 0 )
					{
						<h1>New Learning Opportunity</h1>
					}
					else
					{
						<h1 class="offscreen">@Model.MainProfile.Name</h1>
						<div class="editorHeader">
							<div class="headerBox headerBoxa">@Model.MainProfile.Name</div>
							<div class="headerBox headerBoxb" id="entityOwningOrg"></div>
						</div>

					}
					<div class="editorSection">




						@SectionButton( "Learning Opportunity", "entity_basic", 1, 1 )
						<div class="detailTab" data-detailname="entity_basic">


							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "Name",
						   Label = "Learning Opportunity Name",
						   Type = TextInputSettings.InputType.TEXT,
						   RequireValue = true,
						   MinimumLength = 5,
						   Guidance = "The official name of the learning opportunity."


					   } )

							<div>
								<div id="enterOwningOrg" class="propertyBox tabItem ">
									@*@if (Model.MainProfile.Id == 0) {*@

									@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
							   {
								   Property = "OwningOrganization",
								   SearchType = "OrganizationSearch",
								   Label = "Owning Organization",
								   Guidance = orgSelectGuidance,
								   SavedItemsHeader = "Owning Organization",
								   PageSize = 5,
								   AllowMultipleSavedItems = false,
								   ParentRepeaterId = "0",
								   DoAjaxSave = false,
								   RequireValue = true,
								   AllowCreateWithoutParentExisting = true,
								   AllowingStarterCreate = false,
								   HasEditProfile = true,
								   HasCreateProfile = true,
								   CreateProfileTitle = "Organization",
								   ProfileType = "Organization",
								   Filters = orgFilters,
								   PropertySchema = "CredentialOrganization"


							   } )
								</div>


								@RenderListInput( new ListInputSettings()
						   {
							   Property = "RoleTypeIds",
							   Label = "Roles for Owning Organization",
							   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
							   Guidance = "Select the type(s) of relationship the owning organization has to this Learning Opportunity. <br/>Check OWNED BY, and all others that apply.",
							   EnumItems = enumServices.GetCredentialOwnerAgentRoles( EnumerationType.CUSTOM ).Items,
							   UseSmallLabel = false,
							   PreSelectedItem = 0, //only preselect on new
							   RequireValue = true,
							   PropertySchema = "{none}"


						   } )

							</div>
							<div id="existingOwningOrg" style="display:none;" class="propertyBox tabItem ">
								<div class="label   isRequired">Owning Organization</div>
								<div class="data">


									@RenderProfileInput( new ProfileSettings()
							   {
								   Property = "OwnerOrganizationRoles",
								   Label = "",
								   Profile = "AgentRoleProfile_Recipient",
								   Guidance = orgSelectGuidance,
								   AddText = "",
								   ParentRepeaterId = "0",
								   UseSmallLabel = true,
								   RequireValue = true


							   } )

								</div>
							</div>


							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "Description",
						   Label = "Learning Opportunity Description",
						   Type = TextInputSettings.InputType.TEXTAREA,
						   RequireValue = true,
						   MinimumLength = 15,
						   Guidance = "A summary or description of the learning opportunity."


					   } )


							@RenderTextInput( new TextInputSettings()
					   {
						   Property = "SubjectWebpage",
						   Label = "Subject Webpage",
						   Type = TextInputSettings.InputType.URL,
						   Guidance = "The URL of a page that lists information about the learning opportunity.",
						   RequireValue = true
					   } )


							@RenderTextInput( new TextInputSettings() { Property = "CodedNotation", Label = "Coded Notation", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the identification code for this learning opportunity, if it has one." } )


							@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "InLanguageId", Label = "Language", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "The primary language used in or by the resource being described.", EnumItems = enumServices.GetLanguages( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )






							@RenderListInput( new ListInputSettings()
					   {
						   Property = "DeliveryType",
						   Label = "Delivery Type",
						   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
						   HasOtherBox = false,
						   Guidance = "Select the type(s) that best describe the way the learning opportunity is delivered. Check all that apply.",
						   EnumItems = enumServices.GetEnumeration( "deliveryType", EnumerationType.MULTI_SELECT, true ).Items,
						   ExtraClasses = new List<string>() { "twoColumns" }
					   } )
							@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DeliveryTypeDescription", Label = "Delivery Type Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "A more detailed, refined description of delivery type." } )


							@RenderListInput( new ListInputSettings()
					   {
						   Property = "LearningMethodType",
						   Label = "Learning Method Type",
						   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
						   HasOtherBox = false,
						   Guidance = "Enumeration of methods used to conduct the learning opportunity.",
						   EnumItems = enumServices.GetEnumeration( "learningMethodType", EnumerationType.MULTI_SELECT, true ).Items,
						   ExtraClasses = new List<string>() { "twoColumns" }


					   } )
							<hr />



							@RenderTextInput( new TextInputSettings() { Property = "AvailableOnlineAt", Label = "Available Online At", Type = TextInputSettings.InputType.URL, Guidance = "Provide a URL to where this credential is available online." } )


							@RenderTextInput( new TextInputSettings() { Property = "AvailabilityListing", Label = "Availability Listing", Type = TextInputSettings.InputType.URL, Guidance = "Provide a URL to a page that lists physical and/or online locations where this learning opportunity is available." } )




							@RenderTextInput( new TextInputSettings() { Property = "DateEffective", Label = "Effective Date", Type = TextInputSettings.InputType.DATE, Guidance = "The date that this information was first applicable." } )

							@*@RenderTextValueInput( new TextValueEditorSettings() { Property = "LearningResourceUrls", ParentRepeaterId = "0", Label = "Learning Resource URL", AddText = "Add a Learning Resource URL", Guidance = "URL to one or more key learning resources that are important for understanding and/or completing this learning opportunity.", ValueType = TextInputSettings.InputType.URL  })*@


							@RenderTextInput( "VerificationMethodDescription", "Verification Method Description", TextInputSettings.InputType.TEXTAREA, "Description of the methods used to evaluate the validity and reliability." )



							@RenderTextValueInput( new TextValueEditorSettings() { Property = "Subject", ParentRepeaterId = "0", Label = "Subjects", AddText = "Add a Subject", Guidance = "Enter subjects that describe this Learning Opportunity.", ValueType = TextInputSettings.InputType.TEXT, ValuePlaceholder = "Subject (maximum of 200 characters)" } )


							@RenderTextValueInput( new TextValueEditorSettings() { Property = "Keyword", ParentRepeaterId = "0", Label = "Keywords", AddText = "Add a Keyword", Guidance = "Enter keyword(s) that describe this record.", ValueType = TextInputSettings.InputType.TEXT, ValuePlaceholder = "Add a Keyword (max length of 200 characters)" } )

							<hr />


							@RenderProfileInput( new ProfileSettings() { Property = "Duration", Profile = "DurationProfile", ParentRepeaterId = "0", Label = "Estimated Duration", AddText = "Add new Time Estimate", Guidance = "Describe the estimated amount of time it would take to complete the learning opportunity normally, and for each applicable special circumstance.", PropertySchema = "ceterms:estimatedDuration" } )



							@RenderProfileInput( new ProfileSettings() { Property = "Addresses", Profile = "AddressProfile", ParentRepeaterId = "0", Label = "Available at Addresses", AddText = "Add an Address", Guidance = "Enter addresses at which the learning opportunity is available.", PropertySchema = "AvailableAt" } )

							<div class="sectionGroup ">
								<div class="propertyBox tabItem ">


									@RenderProfileInput( "Jurisdiction", "Jurisdiction", "JurisdictionProfile", "Geo-political information about applicable geographic areas and their exceptions.", "Add new Jurisdiction", "0" )

								</div>
								@*<div class="propertyBox tabItem ">
									@RenderProfileInput( "Region", "Region", "JurisdictionProfile", "A geo-political area of the described resource.", "Add new Region", "0" )

								</div>*@
							</div>

							<div class="sectionGroup">
								<p>Enter Credit Hour data or Credit Unit data, but not both!</p>
								<p style="text-align:center">Credit Hour Data</p>
								<div class="sectionGroup">

									@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourType", Label = "Credit Hour Type", Type = TextInputSettings.InputType.TEXT, Guidance = "Units of time corresponding to types of credits. Examples include but are not limited to semester hours, quarter hours, clock hours, or hours of participation." } )

									@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourValue", Label = "Credit Hour Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of credit hours awarded for completing or attaining the resource being described." } )
								</div>
								<p style="text-align:center">Credit Unit Data</p>
								<div class="sectionGroup">
									@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CreditUnitType", Label = "Credit Unit Type", Type = ListInputSettings.InterfaceType.RADIO_LIST, HasOtherBox = false, Guidance = "The type of credit associated with degree and non-degree learning opportunities.", EnumItems = enumServices.GetEnumeration( "creditUnit", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items, AddNoneOption = true } )


									@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitTypeDescription", Label = "Credit Unit Type Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Provide	a more refined, detailed description of credit unit type." } )
									@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitValue", Label = "Credit Unit Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of either credit units awarded for college credit or continuing education units for completing or attaining the resource being described." } )
								</div>
							</div>

						</div>

						<div class="entityOtherSections">




							@SectionButton( "Competencies", "lopp_Competencies", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_Competencies">


								@RenderProfileInput( new ProfileSettings() { Property = "RequiresCompetenciesFrameworks", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Requires Competencies ", AddText = "Add new Competency Framework and Competencies", Guidance = "Indicate the competencies this learning opportunity requires.", ParentRepeaterId = "0", PropertySchema = "targetCompetency" } )



								@RenderProfileInput( new ProfileSettings() { Property = "TeachesCompetenciesFrameworks", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Teaches Competencies", AddText = "Add new Competency Framework and Competencies", Guidance = "Indicate the competencies this learning opportunity teaches.", ParentRepeaterId = "0", PropertySchema = "targetCompetency" } )
							</div>



							@SectionButton( "Instructional Program Category", "lopp_cips", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_cips">
								@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
						   {
							   Property = "CipCode",
							   SearchType = "CIPSearch",
							   ProfileTemplate = "CodeItem",
							   SavedItemsHeader = "Saved CIP Codes",
							   ParentRepeaterId = "0",
							   Label = "Instructional Program Category",
							   Guidance = "Identify the specific instructional program classifications that apply to this learning opportunity. We recommend using the <a href=\"https://nces.ed.gov/ipeds/cipcode/browse.aspx?y=55\" target=\"_blank\">CIP codes</a>.",
							   ExtraClasses = new List<string>() { "tabItem" },
							   PropertySchema = "InstructionalProgramType",
							   Filters = new List<MicroSearchFilter>() {
									new MicroSearchFilter() { FilterName = "HeaderId", Type = "select", Items = cipHeaders }
								}


						   } )




								@RenderTextValueInput( new TextValueEditorSettings()
						   {
							   Property = "OtherInstructionalProgramCategory",
							   Label = "Other Program Categories",
							   AddText = "Add a Program Category",
							   Guidance = "Enter an Instructional Program Category that does not exist via the search.",
							   ValueType = TextInputSettings.InputType.TEXT,
							   ValuePlaceholder = "Add another Program Category",
							   ParentRepeaterId = "0",
							   PropertySchema = "InstructionalProgramType"


						   } )


							</div>


							@SectionButton( "Learning Opportunity  Connections", "lopp_connections", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_connections">

								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "LearningOppConnections",
							   Label = "Learning Opportunity Connections",
							   Profile = "CredentialsConditionProfile",
							   Guidance = "Add Learning Opportunity Connections such as for advanced standing.",
							   AddText = "Add a new Connection",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false,
							   PropertySchema = "{none}"
						   } )

							</div>



							@SectionButton( "Referenced by Credential(s) ", "lopp_credentials", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_credentials">
								<div class="hideRemoveButtons">
									@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
							   {
								   Property = "IsPartOfCredential",
								   SearchType = "CredentialSearch",
								   ParentRepeaterId = "0",
								   Label = "Used in Credentials",
								   SavedItemsHeader = "Credentials",
								   Guidance = "This learning opportunity is referenced in the following credentials.",
								   HasEditProfile = true,
								   HasCreateProfile = false,
								   CreateProfileTitle = "",
								   ProfileType = "Credential",
								   AllowMultipleSavedItems = true,
								   AllowingSearch = false,
								   AllowingStarterCreate = false,
								   PropertySchema = "Credential"


							   } )
								</div>
							</div>



							@SectionButton( "Agent Roles Received", "lopp_roles", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_roles">


								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "AgentRole_Recipient",
							   Profile = "AgentRoleProfile_Recipient",
							   ParentRepeaterId = "0",
							   Label = "Agent Roles Received",
							   AddText = "Add new Role",
							   Guidance = "Describe the relationships this learning opportunity has to one or more organizations where this learning opportunity is the recipient of the role.",
							   UseSmallLabel = false,
							   PropertySchema = "assertedBy"


						   } )
							</div>




							@SectionButton( "Jurisdictions Assertions", "lopp_jurisdiction", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_jurisdiction">



								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "JurisdictionAssertions",
							   Profile = "JurisdictionProfile_QA",
							   ParentRepeaterId = "0",
							   Label = "JurisdictionAssertions",
							   AddText = "Add new Role",
							   Guidance = "The resource being described is offered in the jurisdiction being referenced.",
							   PropertySchema = "{none}",
							   UseSmallLabel = true



						   } )

							</div>

							@*@SectionButton( "Quality Assurance Actions Received", "lopp_QAaction", @Model.MainProfile.Id)
								<div class="detailTab" data-detailname="lopp_QAaction">
									@RenderProfileInput(new ProfileSettings() { Property = "QualityAssuranceAction_Recipient", Profile = "QualityAssuranceActionProfile_Recipient", ParentRepeaterId = "0", Label = "Quality Assurance Actions Received", AddText = "Add new Quality Assurance Action", Guidance = "Describe the Quality Assurance Actions that have been applied to this learning opportunity.", UseSmallLabel = false })
								</div>*@

							@SectionButton( "Estimated Costs", "lopp_Costs", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_Costs">
								<div class="propertyBox ">
									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "CommonCosts",
								   SearchType = "CostManifestSearch",
								   ProfileTemplate = "MicroProfile",
								   SavedItemsHeader = "Common Cost Manifest(s)",
								   Label = "Common cost manifest(s) for this resources",
								   Guidance = "Search for a common cost manifest for this resource. Only cost manifests for the owning organization will be displayed.",
								   PropertySchema = "{none}",
								   HasCreateProfile = false,
								   AllowMultipleSavedItems = true,
								   DoAjaxSave = true,
								   PageSize = 20,
								   HasKeywords = false,
								   ParentRepeaterId = "0",
								   HiddenFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() {
								FilterName = "ParentId",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.Id.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "TypeName",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.TypeName.ToString()),
							}

				   }
							   } )
								</div>

								@RenderProfileInput( new ProfileSettings() { Property = "Cost", Profile = "CostProfile", Label = "Estimated Costs", AddText = "Add new Cost", Guidance = "If there are any costs associated with this learning opportunity, describe them here.", ParentRepeaterId = "0", UseSmallLabel = false } )
							</div>




							@SectionButton( "Financial Assistance", "lopp_financialAlignment", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_financialAlignment">



								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "FinancialAssistance",
							   Label = "Financial Assistance",
							   Profile = "FinancialAlignmentObject",
							   Guidance = "The types of financial assistance for which the resource being described qualifies.",
							   AddText = "Add new Financial Assistance Profile",
							   CopyText = "",
							   ParentRepeaterId = "0"


						   } )

							</div>



							@SectionButton( "Included Learning Opportunity", "lopp_hasParts", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_hasParts">
								@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
						   {
							   Property = "EmbeddedLearningOpportunity",
							   SearchType = "LearningOpportunityHasPartSearch",
							   SavedItemsHeader = "Saved Learning Opportunities",
							   ParentRepeaterId = "0",
							   Label = "Included Learning Opportunity",
							   Guidance = "Identify any learning opportunities that are a part of this learning opportunity.",
							   HasEditProfile = true,
							   HasCreateProfile = false,
							   HasResultLink = true,
							   CreateProfileTitle = "LearningOpportunity",
							   ProfileType = "LearningOpportunity",
							   ExtraClasses = new List<string>() { "tabItem" },
							   UseSmallLabel = false,
							   PropertySchema = "HasPart"


						   } )
							</div>




							@SectionButton( "Conditions and Requirements", "lopp_Conditions", @Model.MainProfile.Id )
							<div class="detailTab" data-detailname="lopp_Conditions">


								<div class="propertyBox ">
									@RenderMicroSearchInput( new MicroSearchSettings()
							   {
								   Property = "CommonConditions",
								   SearchType = "ConditionManifestSearch",
								   ProfileTemplate = "MicroProfile",
								   SavedItemsHeader = "Common Condition Manifest(s)",
								   Label = "Common condition manifest(s) for this resources",
								   Guidance = "Search for a common condition manifest for this resource.",
								   PropertySchema = "{none}",
								   HasCreateProfile = false,
								   AllowMultipleSavedItems = true,
								   DoAjaxSave = true,
								   PageSize = 20,
								   HasKeywords = false,
								   ParentRepeaterId = "0",
								   HiddenFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() {
								FilterName = "ParentId",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.Id.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "OwningAgentUid",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.OwningAgentUid.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "TypeName",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.TypeName.ToString()),
							}

				   }
							   } )
								</div>

								@RenderProfileInput( new ProfileSettings() { Property = "Requires", Profile = "ConditionProfile", Label = "Requirements", AddText = "Add new Requirements", Guidance = "Indicate the requirements for passing this learning opportunity.", ParentRepeaterId = "0", UseSmallLabel = false } )





								@RenderProfileInput( new ProfileSettings() { Property = "Recommends", Profile = "ConditionProfile", Label = "Recommendations", AddText = "Add new Recommendations", Guidance = "Indicate any recommendations that will help prepare for this learning opportunity.", ParentRepeaterId = "0", UseSmallLabel = false } )




								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "EntryCondition",
							   Label = "Entry Conditions",
							   Profile = "ConditionProfile",
							   Guidance = "The prerequisites for entry into this learning opportunity.",
							   AddText = "Add a new Entry Condition",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false


						   } )




								@RenderProfileInput( new ProfileSettings()
						   {
							   Property = "Corequisite",
							   Label = "Corequisite Conditions",
							   Profile = "CorequisiteConditionProfile",
							   Guidance = "Indicate any learning opportunities (such as dual dependent degrees) that must be pursued simultaneously with this learning opportunity.",
							   AddText = "Add a new Corequisite Condition",
							   ParentRepeaterId = "0",
							   UseSmallLabel = false


						   } )

							</div>


							@*@SectionButton( "Extra Information", "lopp_extra", @Model.MainProfile.Id )
								<div class="detailTab" data-detailname="lopp_extra">


									</div>*@

							@if ( isUserAdmin )
							{
								@SectionButton( "Managing Organization", "asmt_mgmt", @Model.MainProfile.Id )
							}
							<div class="detailTab" data-detailname="asmt_mgmt">


								@RenderListInput( "ManagingOrgId", "Managing Organization", ListInputSettings.InterfaceType.DROPDOWN_LIST, "Select the organization whose members can update this record.", null, enumServices.GetOrganizationsAsCodes() )

							</div>
						</div>

						@RenderRegistrySection( Model.MainProfile.Id, isPublished, ctid, registryResourceUrl, registryURLFormatted )


					</div><!-- /tabItems -->
				}
				break;

			default:
				break;
		}
	</div><!-- /profile -->
	<p></p>
</div>

<div id="globalButtons">


	<div id="history"><div class="profileHistory" data-hasupdate="false">Last Updated: <span class="profileHistoryUser"></span>, <span class="profileHistoryTimestamp"></span></div></div>
	<div id="globalInputs">


		<input type="button" class="actionButton" value="Save Data" onclick="doGlobalSave(this);" />
		<input type="button" value="Preview" onclick="doGlobalPreview();" />
		@if ( isUserAdmin )
		{
			<input type="button" class="redButton" value="Delete" onclick="doGlobalDelete(this);" />
		}

		<input type="button" class="actionButton" value="Register" onclick="registerEntity(this);" style="margin-left: 15px; background-color:#417b1d;" title="Publish this entity to Credential Registry" />

		<input type="button" id="btnUnregister" class="redButton btnUnregister" value="Un-Register" onclick="unRegisterEntity(this);" style="background-color: darkgoldenrod;" title="Remove this entity from the Credential Registry" />
		@*<a href="http://lr-staging.learningtapestry.com/api/ce-registry/envelopes/" + @CredentialRegistryId class="btnUnregister">View</a>*@


	</div>
</div>
<div id="overlay"></div>
<div id="profiles"></div>


@* Templates *@

@* Editor List Item *@
<script type="text/template" id="template_profileListItem">
	<div class="profileItem" data-repeaterID="{repeaterID}">
		<div class="name">{Name}</div>
		<div class="buttons">
			<input type="button" class="actionButton" value="Edit" onclick="editProfile({repeaterID}, this);" />
			<input type="button" class="redButton" value="Delete" onclick="deleteProfile({repeaterID}, this);" />
		</div>
	</div>
</script>
<script type="text/template" id="template_profileChildListItem">
	<div class="profileItem" data-repeaterid="{repeaterID}">
		<div class="name">{Name}</div>
		<div class="buttons">
			<input type="button" class="actionButton" value="Edit" onclick="editProfile({repeaterID}, this);" />
			<input type="button" class="redButton" value="Delete" onclick="deleteProfile({repeaterID}, this);" />
			<input type="button" class="greenButton showChildBtn offscreen" value="Add Alternative" onclick="addProfileChild({repeaterID}, this);" />
		</div>
	</div>
</script>

@* Duration Profile *@
<script type="text/template" id="template_DurationProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "DurationProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	<div class="radioSelector propertyBox" data-sectionProperty="IsRange">
		<div class="mainGuidance">Provide either an exact duration or a minimum and maximum duration.</div>
		<div class="radioSection exact selected">
			<label class="radioButton"><input type="radio" data-sectionValue="false" name="duration_{repeaterID}" checked="checked" /></label>
			<div class="label">Exact Duration</div>
			<div class="data">
				@Html.Partial( "~/Views/Editor/_DurationEditor.cshtml", "ExactDuration" )
			</div>
			<div class="radioCover"></div>
		</div>
		<div class="radioSection range">
			<label class="radioButton"><input type="radio" data-sectionValue="true" name="duration_{repeaterID}" /></label>
			<div class="label">Minimum Duration</div>
			<div class="data">
				@Html.Partial( "~/Views/Editor/_DurationEditor.cshtml", "MinimumDuration" )
			</div>
			<div class="label">Maximum Duration</div>
			<div class="data">
				@Html.Partial( "~/Views/Editor/_DurationEditor.cshtml", "MaximumDuration" )
			</div>
			<div class="radioCover"></div>
		</div>
	</div>

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Provide any useful further description, such as special conditions under which the above information applies, here." } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>


@* Jurisdiction *@
<script type="text/template" id="template_JurisdictionProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "JurisdictionProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this Jurisdiction and provide any additional necessary information." } )

	@RenderTextInput( new TextInputSettings()
{
	Property = "IsGlobalJurisdiction",
	PropertySchema = "globalJurisdiction",
	Label = "Is Global",
	Type = TextInputSettings.InputType.NULLABLE_BOOLEAN,
	Guidance = "Indicates whether or not the jurisdiction is global/worldwide.",
	NullableBooleanNullText = "No Data",
	NullableBooleanTrueText = "This jurisdiction is global.",
	NullableBooleanFalseText = "This jurisdiction is not global."

} )

	@{
		var locationTypes = new MicroSearchFilter()
		{
			FilterName = "LocationType",
			Type = "select",
			Items = new Dictionary<string, string>() {
                    //{ "CONT,ADMD,ADM1,ADM2,PCL*,PPL*", "Search for all location types" },
                    { "", "Search for all location types" },
					{ "PPL,PPLA1,PPLA2", "Search for Cities/Villages" },
					{ "ADMD,ADM1,ADM2", "Search for States/Provinces/Counties/Regions" },
					{ "CONT,PCL*", "Search for Continents and Countries" }
				}
		};
	}

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "MainRegion",
	PropertySchema = "region",
	SearchType = "RegionSearch",
	ProfileTemplate = "Region",
	SavedItemsHeader = "Saved Regions",
	Label = "Main Region",
	PageSize = 5,
	Guidance = "Describe the primary region for this item.",
	Filters = new List<MicroSearchFilter>() { locationTypes },
	AllowMultipleSavedItems = false,
	//DoAjaxSave = false,
	AutoSaveNewParentProfile = true,
	StaticSelectorValues = new Dictionary<string, object>() { { "IsException", false } }


} )

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "RegionException",
	PropertySchema = "region",
	SearchType = "RegionSearch",
	ProfileTemplate = "Region",
	SavedItemsHeader = "Saved Exceptions",
	Label = "Region Exceptions",
	PageSize = 5,
	Guidance = "If the primary region contains any sub-regions where the item does <b>not</b> apply, select them here.",
	Filters = new List<MicroSearchFilter>() { locationTypes },
	//DoAjaxSave = false,
	AutoSaveNewParentProfile = true,
	StaticSelectorValues = new Dictionary<string, object>() { { "IsException", true } }
} )

	<p class="guidance" style="text-align: right; padding-right: 10px;">Location search data by <a href="http://geonames.org" target="_blank">GeoNames.org</a></p>



	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>


<script type="text/template" id="template_Region">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
	Profile = "template_Region",
	Type = ProfileSettings.ModelType.WRAPPER_START,
	IncludeName = false
} )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "The name of the resource being described." } )

	<p>Search for locaition or enter an address</p>
	<div>
		@{
			var locationTypes3 = new MicroSearchFilter()
			{
				FilterName = "LocationType",
				Type = "select",
				Items = new Dictionary<string, string>() {
                    //{ "CONT,ADMD,ADM1,ADM2,PCL*,PPL*", "Search for all location types" },
                    { "", "Search for all location types" },
					{ "PPL,PPLA1,PPLA2", "Search for Cities/Villages" },
					{ "ADMD,ADM1,ADM2", "Search for States/Provinces/Counties/Regions" },
					{ "CONT,PCL*", "Search for Continents and Countries" }
				}
			};
		}

		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "MainRegion",
	PropertySchema = "Region",
	SearchType = "RegionSearch",
	ProfileTemplate = "Region",
	SavedItemsHeader = "Saved Regions",
	Label = "Main Region",
	PageSize = 5,
	Guidance = "Describe the primary region for this item.",
	Filters = new List<MicroSearchFilter>() { locationTypes3 },
	AllowMultipleSavedItems = true,
	//DoAjaxSave = false,
	AutoSaveNewParentProfile = true
} )


		<p class="guidance" style="text-align: right; padding-right: 10px;">Location search data by <a href="http://geonames.org" target="_blank">GeoNames.org</a></p>
	</div>
	<div>
		@RenderProfileInput( new ProfileSettings() { Property = "Address", Label = "Addresses", Profile = "AddressProfile",
	   Guidance = "A geo-political area of the described resource.",
	   AddText = "Add an Address",
	   ParentRepeaterId = "0",
	   UseSmallLabel = true } )

	</div>

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>



<script type="text/template" id="template_JurisdictionProfile_QA">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
	{
		Profile = "JurisdictionProfile_QA",
		Type = ProfileSettings.ModelType.WRAPPER_START,
		IncludeName = false
	} )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this Jurisdiction and provide any additional necessary information." } )

	@RenderTextInput( new TextInputSettings()
	{
		Property = "IsGlobalJurisdiction",
		PropertySchema = "globalJurisdiction",
		Label = "Is Global",
		Type = TextInputSettings.InputType.NULLABLE_BOOLEAN,
		Guidance = "Indicates whether or not the jurisdiction is global/worldwide.",
		NullableBooleanNullText = "No Data",
		NullableBooleanTrueText = "This jurisdiction is global.",
		NullableBooleanFalseText = "This jurisdiction is not global."

	} )
	<div>


		@RenderListInput( new ListInputSettings()
		{
			Property = "JurisdictionAssertionIds",
			Label = "Jurisdiction Assertions",
			Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
			HasOtherBox = false,
			Guidance = "Select assertions for the resource being described in the jurisdiction being referenced.",
			EnumItems = jurisdictionsAssertions.Items,
			PropertySchema = "{none}",
			ExtraClasses = new List<string>() { "twoColumns" }
		} )

		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
		{
			Property = "AssertedBy",
			SearchType = "OrganizationSearch",
			Label = "Asserted By",
			Guidance = "Select the agent providing the information contained in the entity being described.",
			SavedItemsHeader = "Selected Organization",
			PageSize = 5,
			AllowMultipleSavedItems = false,
			DoAjaxSave = false,
			AllowCreateWithoutParentExisting = true,
			HasEditProfile = true,
			HasCreateProfile = true,
			CreateProfileTitle = "Organization",
			ProfileType = "Organization"
		,
			AllowingStarterCreate = false
		} )

	</div>
	@{
				var locationTypes2 = new MicroSearchFilter()
				{
					FilterName = "LocationType",
					Type = "select",
					Items = new Dictionary<string, string>() {
                    //{ "CONT,ADMD,ADM1,ADM2,PCL*,PPL*", "Search for all location types" },
                    { "", "Search for all location types" },
					{ "PPL,PPLA1,PPLA2", "Search for Cities/Villages" },
					{ "ADMD,ADM1,ADM2", "Search for States/Provinces/Counties/Regions" },
					{ "CONT,PCL*", "Search for Continents and Countries" }
				}
				};
			}

			@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
			{
				Property = "MainRegion",
				PropertySchema = "Region",
				SearchType = "RegionSearch",
				ProfileTemplate = "Region",
				SavedItemsHeader = "Saved Regions",
				Label = "Main Region",
				PageSize = 5,
				Guidance = "Describe the primary region for this item.",
				Filters = new List<MicroSearchFilter>() { locationTypes2 },
				AllowMultipleSavedItems = false,
				//DoAjaxSave = false,
				AutoSaveNewParentProfile = true,
				StaticSelectorValues = new Dictionary<string, object>() { { "IsException", false } }
			} )

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
	{
		Property = "RegionException",
		SearchType = "RegionSearch",
		PropertySchema = "Region",
		ProfileTemplate = "Region",
		SavedItemsHeader = "Saved Exceptions",
		Label = "Region Exceptions",
		PageSize = 5,
		Guidance = "If the primary region contains any sub-regions where the item does <b>not</b> apply, select them here.",
		Filters = new List<MicroSearchFilter>() { locationTypes2 },
		//DoAjaxSave = false,
		AutoSaveNewParentProfile = true,
		StaticSelectorValues = new Dictionary<string, object>() { { "IsException", true } }
	} )

	<p class="guidance" style="text-align: right; padding-right: 10px;">Location search data by <a href="http://geonames.org" target="_blank">GeoNames.org</a></p>



	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>


@* Agent Role (Recipient) SHOW FOR CREDENTIAL AGENT ROLES *@
<script type="text/template" id="template_AgentRoleProfile_Recipient">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "AgentRoleProfile_Recipient", IncludeName = false, Type = ProfileSettings.ModelType.WRAPPER_START } )

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
{
	Property = "RoleTypeIds",
	Label = "Agent Roles",
	Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
	HasOtherBox = false,
	Guidance = "Select the type(s) of relationship the selected organization has to this Item. Check all that apply.",
	EnumItems = roles.Items,
	ExtraClasses = new List<string>() { "twoColumns" },
	RequireValue = true,
	PropertySchema = "{none}"
} )

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "Actor",
	SearchType = "OrganizationSearch",
	Label = "Acting Organization",
	Guidance = "Select the organization that performs the role(s) you selected.",
	SavedItemsHeader = "Selected Organization",
	ProfileType = "Organization",
	AllowMultipleSavedItems = false,
	DoAjaxSave = false,
	AllowCreateWithoutParentExisting = true,
	RequireValue = true,
	PageSize = 5,
	HasEditProfile = true,
	StaticSelectorValues = new Dictionary<string, object>()
	{
		{ "Property", "Actor" }
	},
	HasCreateProfile = true,
	CreateProfileTitle = "Organization",
	HasResultLink = true,
	AllowingStarterCreate = false,
	PropertySchema = "assertedBy"
} )


	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

<script type="text/template" id="template_AgentRoleProfile_Assets">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "AgentRoleProfile_Assets", IncludeName = false, Type = ProfileSettings.ModelType.WRAPPER_START } )

	<div class="propertyBox tabItem ">


		@RenderMicroSearchInput( new MicroSearchSettings()
   {
	   Property = "ActedUponEntityUid",
	   SearchType = "CredentialAssetSearch",
	   ProfileTemplate = "MicroProfile",
	   SavedItemsHeader = "",
	   Label = "Search for target Entity for this relationship",
	   Guidance = "Search for and add the credential or asset for this relationship.",
	   ExtraClasses = new List<string>() { "tabItem" },
	   PropertySchema = "{none}",
	   HasCreateProfile = false,
	   AllowMultipleSavedItems = false,
	   DoAjaxSave = false,
	   PageSize = 20,
	   HasKeywords = false,
	   HiddenFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() {
								FilterName = "ParentId",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.Id.ToString()),
							} }
   } )
	</div>

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
{
	Property = "RoleTypeIds",
	Label = "Agent Roles",
	Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
	HasOtherBox = false,
	Guidance = "Select the type(s) of relationship the selected organization has to this Item. Check all that apply.",
	EnumItems = roles.Items,
	ExtraClasses = new List<string>() { "twoColumns" },
	RequireValue = true,
	PropertySchema = "{none}"
} )

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "Actor",
	SearchType = "OrganizationSearch",
	Label = "Acting Organization",
	Guidance = "Select the organization that performs the role(s) you selected.",
	SavedItemsHeader = "Selected Organization",
	ProfileType = "Organization",
	AllowMultipleSavedItems = false,
	DoAjaxSave = false,
	AllowCreateWithoutParentExisting = true,
	RequireValue = true,
	PageSize = 5,
	HasEditProfile = true,
	StaticSelectorValues = new Dictionary<string, object>()
			{
				{ "Property", "Actor" }
			},
	HasCreateProfile = true,
	CreateProfileTitle = "Organization",
	HasResultLink = true,
	AllowingStarterCreate = false,
	PropertySchema = "assertedBy"
} )



	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

<script type="text/template" id="template_AgentRoleProfile_OfferedBy">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "AgentRoleProfile_OfferedBy", IncludeName = false, Type = ProfileSettings.ModelType.WRAPPER_START } )

	<div class="propertyBox tabItem ">


		@RenderMicroSearchInput( new MicroSearchSettings()
   {
	   Property = "ActedUponEntityUid",
	   SearchType = "CredentialAssetSearch",
	   ProfileTemplate = "MicroProfile",
	   SavedItemsHeader = "",
	   Label = "Search for target Entity for this relationship",
	   Guidance = "Search for and add the credential or asset for this relationship.",
	   ExtraClasses = new List<string>() { "tabItem" },
	   PropertySchema = "{none}",
	   HasCreateProfile = false,
	   AllowMultipleSavedItems = false,
	   DoAjaxSave = false,
	   PageSize = 20,
	   HasKeywords = false,
	   HiddenFilters = new List<MicroSearchFilter>() {
			new MicroSearchFilter() {
				FilterName = "ParentId",
				Type = "text",
				HiddenValue = string.Format("{0}",@Model.MainProfile.Id.ToString()),
			} }


   } )
	</div>
	<div class="offscreenX ">
		<p>This will be hidden as there is only one role, except how to preselect this?</p>


		@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
   {
	   Property = "RoleTypeIds",
	   Label = "Agent Roles",
	   Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
	   HasOtherBox = false,
	   Guidance = "Select the type(s) of relationship the selected organization has to this Item. Check all that apply.",
	   EnumItems = offeredRoles.Items,
	   ExtraClasses = new List<string>() { "twoColumns" },
	   PreSelectedItem = 0, //preselect first option
	   RequireValue = true,
	   PropertySchema = "{none}"
   } )
	</div>

	<div class="propertyBox ">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "Actor",
	   SearchType = "OrganizationSearch",
	   Label = "Acting Organization",
	   Guidance = "Select the organization that offers the above selected credential asset.",
	   SavedItemsHeader = "Selected Organization",
	   ProfileType = "Organization",
	   AllowMultipleSavedItems = true,
	   DoAjaxSave = true,
	   AllowCreateWithoutParentExisting = false,
	   RequireValue = true,
	   PageSize = 5,
	   HasEditProfile = true,
	   StaticSelectorValues = new Dictionary<string, object>()
			{
				{ "Property", "Actor" }
			},
	   HasCreateProfile = true,
	   CreateProfileTitle = "Organization",
	   HasResultLink = true,
	   Filters = orgFilters,
	   AllowingStarterCreate = false,
	   PropertySchema = "assertedBy"
   } )
	</div>

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>
@* Condition Manifest *@
<script type="text/template" id="template_ConditionManifest">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
	Profile = "ConditionManifest",
	Type = ProfileSettings.ModelType.WRAPPER_START,
	IncludeName = false,
	HasTabs = false
} )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Enter a name to help you identify this condition later.", RequireValue = true, PropertySchema = "Name" } )


	<div class="propertyBox offscreen">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "ConditionProvider",
	   SearchType = "OrganizationSearch",
	   Label = "Asserted By",
	   Guidance = "Select the agent providing the information contained in the entity being described.",
	   SavedItemsHeader = "Selected Organization",
	   PageSize = 5,
	   AllowMultipleSavedItems = false,
	   DoAjaxSave = false,
	   AllowCreateWithoutParentExisting = true,
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Organization",
	   ProfileType = "Organization",
	   Filters = orgFilters,
	   AllowingStarterCreate = false,
	   PropertySchema = "AssertedBy"
   } )
	</div>
	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information.", RequireValue = true } )

	@RenderTextInput( new TextInputSettings()
{
	Property = "SubjectWebpage",
	Label = "Subject Webpage",
	Type = TextInputSettings.InputType.URL,
	Guidance = "Provide a URL to the web page where the subject of the resource being described is located. </br>The web page being referenced is the subject of the resource being described such as a learning opportunity being identified in a profile of that opportunity. The value of subjectWebpage is an authoritative location for information about the subject and should not assumed to be a persistent identifier of the subject.",
	PropertySchema = "SubjectWebpage"
} )

	<div class="sectionGroup">

		@RenderProfileInput( new ProfileSettings()
   {
	   Property = "Requires",
	   Profile = "ConditionProfile",
	   Label = "Requirements",
	   AddText = "Add new Requirements",
	   Guidance = "Indicate the prerequisites and/or requirements for this condition manifest.",
	   UseSmallLabel = false
   } )

		@RenderProfileInput( new ProfileSettings()
   {
	   Property = "Recommends",
	   Profile = "ConditionProfile",
	   Label = "Recommendations",
	   AddText = "Add new Recommendations",
	   Guidance = "Indicate any recommendations for this condition manifest.",
	   UseSmallLabel = false
   } )

		@RenderProfileInput( new ProfileSettings()
   {
	   Property = "EntryCondition",
	   Label = "Entry Conditions",
	   Profile = "ConditionProfile",
	   Guidance = "The prerequisites for entry into other things, such as assessments or learning opportunities.",
	   AddText = "Add a new Entry Condition",
	   UseSmallLabel = false
   } )

		@RenderProfileInput( new ProfileSettings()
   {
	   Property = "Corequisite",
	   Label = "Corequisite Conditions",
	   Profile = "CorequisiteConditionProfile",
	   Guidance = "The resource being referenced must be pursued concurrently with the resource being described. Includes dual( double ) degrees that cannot be earned independently of each other.",
	   AddText = "Add a new Corequisite Condition",
	   UseSmallLabel = false
   } )
	</div>
	<div class="propertyBox offscreen">
		@RenderMicroSearchInput( new MicroSearchSettings()
   {
	   Property = "CommonConditions",
	   SearchType = "ConditionManifestSearch",
	   ProfileTemplate = "MicroProfile",
	   SavedItemsHeader = "Common Condition(s)",
	   Label = "Common condition manifest(s) for this resources",
	   Guidance = "Search for a common condition manifest for this resource. Only condition manifests for the owning organization will be displayed.",
	   PropertySchema = "{none}",
	   HasCreateProfile = false,
	   CreateProfileTitle = "Common Condition",
	   AllowMultipleSavedItems = true,
	   AllowingAddProfileOption = false,
	   AllowingStarterCreate = false,
	   AllowingPopupCreate = false,
	   DoAjaxSave = true,
	   PageSize = 10,
	   HasKeywords = false,
	   HiddenFilters = new List<MicroSearchFilter>() {
							new MicroSearchFilter() {
								FilterName = "ParentId",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.Id.ToString()),
							},
				   new MicroSearchFilter() {
								FilterName = "OwningAgentUid",
								Type = "text",
								HiddenValue = string.Format("{0}",@Model.MainProfile.OwningAgentUid.ToString()),
							},
				   new MicroSearchFilter() {
					FilterName = "TypeName",
					Type = "text",
					HiddenValue = string.Format("{0}",@Model.MainProfile.TypeName.ToString()),
				}
				   }
   } )
	</div>


	<div class="sectionGroup offscreen">
		@RenderProfileInput( new ProfileSettings()
   {
	   Property = "CommonConditions2",
	   Label = "Common Conditions",
	   Profile = "ConditionManifest",
	   Guidance = "The prerequisites for entry into the resource being described.",
	   AddText = "Add new Common Condition",
	   UseSmallLabel = false
   } )
	</div>

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END, HasTabs = false } )
</script>

@* Cost Manifest *@
<script type="text/template" id="template_CostManifest">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
	Profile = "CostManifest",
	Type = ProfileSettings.ModelType.WRAPPER_START,
	IncludeName = false,
	HasTabs = false
} )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Enter a name to help you identify this condition later.", RequireValue = true, PropertySchema = "Name" } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information.", RequireValue = true } )

	@RenderTextInput( new TextInputSettings()
{
	Property = "CostDetails",
	Label = "Cost Details URL",
	Type = TextInputSettings.InputType.URL,
	Guidance = "Provide a URL to the web page containing in-depth information about the cost(s) being described.",
	PropertySchema = "CostDetails"
} )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "StartDate", Label = "Start Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the start date of the validity of this information." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EndDate", Label = "End Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the end date of the validity of this information." } )

	@RenderProfileInput( new ProfileSettings()
{
	Property = "EstimatedCosts",
	Label = "Estimated Costs",
	Profile = "CostProfile",
	Guidance = "The estimated cost of this cost manifest.",
	AddText = "Add new Estimated Cost",
	CopyText = "",
	UseSmallLabel = false,
	PropertySchema = "EstimatedCost"
} )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END, HasTabs = false } )
</script>




@* Condition Profile - 1 *@
<script type="text/template" id="template_ConditionProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
	Profile = "ConditionProfile",
	Type = ProfileSettings.ModelType.WRAPPER_START,
	IncludeName = false,
	HasTabs = false,
	ProfileType = "Basic"
} )

	@Html.Hidden( "ProfileType", "Basic" )
	@*Will need to selectively show this, or more likely default the value*@

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ProfileSummary", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Enter a name to help you identify this condition later.", RequireValue = true, PropertySchema = "Name" } )


	<div class="offscreen">
		@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
   {
	   Property = "ConnectionProfileTypeId",
	   Label = "Connection Type",
	   Type = ListInputSettings.InterfaceType.RADIO_LIST,
	   HasOtherBox = false,
	   Guidance = "Select the type of condition.",
	   EnumItems = enumServices.GetCredentialsConditionProfile( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items,
	   PreSelectedItem = -1,
	   ExtraClasses = new List<string>() { "twoColumns" },
   }
	)

		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ConditionSubTypeId", Label = "ConditionSubTypeId", Type = TextInputSettings.InputType.NUMBER, Guidance = "" } )
	</div>
	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "ConditionProvider",
	   SearchType = "OrganizationSearch",
	   Label = "Asserted By",
	   Guidance = "Select the agent providing the information contained in the entity being described.",
	   SavedItemsHeader = "Selected Organization",
	   PageSize = 5,
	   AllowMultipleSavedItems = false,
	   DoAjaxSave = false,
	   AllowCreateWithoutParentExisting = true,
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Organization",
	   ProfileType = "Organization",
	   Filters = orgFilters,
	   AllowingStarterCreate = false,
	   PropertySchema = "AssertedBy"
   } )
	</div>
	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Experience", Label = "Experience", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "List any equivalent work, educational, and/or experiential experience someone must have to meet this condition's criteria." } )
	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "YearsOfExperience", Label = "Years of Experience", Type = TextInputSettings.InputType.NUMBER, Guidance = "Indicate the minimum years of experience, if applicable." } )



	@RenderTextInput( new TextInputSettings()
{
	Property = "SubjectWebpage",
	Label = "Subject Webpage",
	Type = TextInputSettings.InputType.URL,
	Guidance = "Provide a URL to the web page where the subject of the resource being described is located. </br>The web page being referenced is the subject of the resource being described such as a learning opportunity being identified in a profile of that opportunity. The value of subjectWebpage is an authoritative location for information about the subject and should not assumed to be a persistent identifier of the subject.",
	PropertySchema = "SubjectWebpage"


} )

	@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "Condition", Label = "Condition Items", AddText = "Add new Condition Item", Guidance = "Enter any individual specific conditions or requirements.", PropertySchema = "Condition" } )

	@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "SubmissionOf", Label = "Submissions", AddText = "Add new Submission", Guidance = "Enter an artifact to be submitted.", PropertySchema = "SubmissionOf" } )

	<div class="sectionGroup">

		@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "AudienceLevel", Label = "Audience Level", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Levels in an academic or training progression expected of or to be developed by the typical person for the resource being described. Check all that apply.", EnumItems = enumServices.GetAudienceLevel( EnumerationType.CUSTOM ).Items, ExtraClasses = new List<string>() { "twoColumns" }, IncludeDefaultItem = false } )

		@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "AudienceType", Label = "Applicable Audience", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Indicate to which specific audience(s) these conditions apply. If there are no restrictions, do not check any options.", EnumItems = enumServices.GetEnumeration( "applicableAudienceType" ).Items, ExtraClasses = new List<string>() { "twoColumns" } } )
	</div>

	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "Credential",
	   SearchType = "CredentialSearch",
	   Label = "Applicable Credential",
	   SavedItemsHeader = "Target Credentials",
	   Guidance = "Select any other credential(s) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Credential",
	   ProfileType = "Credential",
	   AllowMultipleSavedItems = true,
	   AllowingStarterCreate = false


   } )
	</div>


	@*Assessment*@
	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "Assessment",
	   SearchType = "AssessmentSearch",
	   Label = "Applicable Assessment",
	   SavedItemsHeader = "Target Assessments",
	   Guidance = "Select any assessment(s) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Assessment",
	   ProfileType = "Assessment",
	   AllowMultipleSavedItems = true,
	   AllowingStarterCreate = false,
	   AutoPropertyRefresh = new List<string>() { "TargetAssessment", "Assessment" }


   } )
	</div>
	<div class="propertyBox">
		@*LearningOpportunity*@

		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "LearningOpportunity",
	   SearchType = "LearningOpportunitySearch",
	   Label = "Applicable Learning Opportunity",
	   SavedItemsHeader = "Target Learning Opportunities",
	   Guidance = "Select any learning opportunity(ies) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Learning Opportunity",
	   ProfileType = "LearningOpportunity",
	   AllowMultipleSavedItems = true,
	   AllowingStarterCreate = false,
	   AutoPropertyRefresh = new List<string>() { "TargetLearningOpportunity", "LearningOpportunity" }


   } )

	</div>

	<div class="sectionGroup">
		<p>Enter Credit Hour data or Credit Unit data, but not both!</p>
		<p style="text-align:center">Credit Hour Data</p>
		<div class="sectionGroup">

			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourType", Label = "Credit Hour Type", Type = TextInputSettings.InputType.TEXT, Guidance = "Units of time corresponding to types of credits. Examples include but are not limited to semester hours, quarter hours, clock hours, or hours of participation." } )

			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourValue", Label = "Credit Hour Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of credit hours awarded for completing or attaining the resource being described." } )
		</div>
		<p style="text-align:center">Credit Unit Data</p>
		<div class="sectionGroup">
			@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CreditUnitType", Label = "Credit Unit Type", Type = ListInputSettings.InterfaceType.RADIO_LIST, HasOtherBox = false, Guidance = "The type of credit associated with degree and non-degree learning opportunities.", EnumItems = enumServices.GetEnumeration( "creditUnit", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items, AddNoneOption = true } )


			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitTypeDescription", Label = "Credit Unit Type Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Provide	a more refined, detailed description of credit unit type." } )
			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitValue", Label = "Credit Unit Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of either credit units awarded for college credit or continuing education units for completing or attaining the resource being described." } )
		</div>
	</div>

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "EstimatedCosts", Profile = "CostProfile", Label = "Cost", AddText = "Add new Cost", Guidance = "If there are any costs associated with this condition, describe them here." } )

	@*@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "ReferenceUrl", Label = "Reference URL", AddText = "Add new Reference URL", Guidance = "Enter a URL to a useful web resource related to these conditions.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://" } )*@
	<div class="sectionGroup">
		@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Residency", Profile = "JurisdictionProfile", Label = "Resident Of", AddText = "Add new Residency Condition", Guidance = "If someone must be a resident of a given place in order for these conditions to apply to that person, indicate the valid place(s) here.", PropertySchema= "ResidentOf" } )

		@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Geo-political information about applicable geographic areas and their exceptions." } )
	</div>


	<div class="sectionGroup">


		@RenderProfileInput( new ProfileSettings()
   {
	   Property = "AlternativeCondition",
	   Label = "Alternative Conditions",
	   Profile = "ConditionProfile",
	   Guidance = "A set of conditions in the context of requirements where more than one alternative set or path have been defined and from which any one path fulfills the parent conditions.",
	   AddText = "Add new Alternative Condition",
	   UseSmallLabel = false


   } )
	</div>

	<div class="offscreen">
		@* - only show for recommendations*@
		<div id="conditionCompetencies">
			@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "RequiresCompetencies", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Competencies", AddText = "Add new Competency", Guidance = "Provide any competencies that this information requires or applies to.", PropertySchema = "targetCompetency" } )

			<div class="offscreen">
				@RenderCassBrowser( "RequiresCompetencies_CASS", "", "cassSaveCompetencyList", "cassRemoveCompetency", "{repeaterID}" )
			</div>
		</div>

</div>
		@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END, HasTabs = false } )
</script>

<script type="text/template" id="template_ConditionManifestConditionProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
	Profile = "ConditionProfile",
	Type = ProfileSettings.ModelType.WRAPPER_START,
	IncludeName = false,
	HasTabs = false,
	ProfileType = "Basic"
} )

	@Html.Hidden( "ProfileType", "Basic" )
	@*Will need to selectively show this, or more likely default the value*@

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ProfileSummary", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Enter a name to help you identify this condition later.", RequireValue = true, PropertySchema = "Name" } )

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
{
	Property = "ConnectionProfileTypeId",
	Label = "Connection Type",
	Type = ListInputSettings.InterfaceType.RADIO_LIST,
	HasOtherBox = false,
	Guidance = "Select the type of condition.",
	EnumItems = enumServices.GetCredentialsConditionProfile( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items,
	PreSelectedItem = -1,
	ExtraClasses = new List<string>() { "twoColumns" },
}
	)
	<div class="offscreen">
		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ConnectionProfileTypeId", Label = "ConnectionProfileTypeId", Type = TextInputSettings.InputType.NUMBER, Guidance = "" } )

		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ConditionSubTypeId", Label = "ConditionSubTypeId", Type = TextInputSettings.InputType.NUMBER, Guidance = "" } )
	</div>
	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "ConditionProvider",
	   SearchType = "OrganizationSearch",
	   Label = "Asserted By",
	   Guidance = "Select the agent providing the information contained in the entity being described.",
	   SavedItemsHeader = "Selected Organization",
	   PageSize = 5,
	   AllowMultipleSavedItems = false,
	   DoAjaxSave = false,
	   AllowCreateWithoutParentExisting = true,
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Organization",
	   ProfileType = "Organization",
	   Filters = orgFilters,
	   AllowingStarterCreate = false,
	   PropertySchema = "AssertedBy"
   } )
	</div>
	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, RequireValue = true, Guidance = "Summarize this information." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Experience", Label = "Experience", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "List any equivalent work, educational, and/or experiential experience someone must have to meet this condition's criteria." } )
	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "YearsOfExperience", Label = "Years of Experience", Type = TextInputSettings.InputType.NUMBER, Guidance = "Indicate the minimum years of experience, if applicable." } )



	@RenderTextInput( new TextInputSettings()
{
	Property = "SubjectWebpage",
	Label = "Subject Webpage",
	Type = TextInputSettings.InputType.URL,
	Guidance = "Provide a URL to the web page where the subject of the resource being described is located. </br>The web page being referenced is the subject of the resource being described such as a learning opportunity being identified in a profile of that opportunity. The value of subjectWebpage is an authoritative location for information about the subject and should not assumed to be a persistent identifier of the subject.",
	PropertySchema = "SubjectWebpage"


} )

	@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "Condition", Label = "Condition Items", AddText = "Add new Condition Item", Guidance = "Enter any individual specific conditions or requirements.", PropertySchema = "Condition" } )

	<div class="sectionGroup">

		@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "AudienceLevel", Label = "Audience Level", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Levels in an academic or training progression expected of or to be developed by the typical person for the resource being described. Check all that apply.", EnumItems = enumServices.GetAudienceLevel( EnumerationType.CUSTOM ).Items, ExtraClasses = new List<string>() { "twoColumns" }, IncludeDefaultItem = false } )

		@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "AudienceType", Label = "Applicable Audience", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Indicate to which specific audience(s) these conditions apply. If there are no restrictions, do not check any options.", EnumItems = enumServices.GetEnumeration( "applicableAudienceType" ).Items, ExtraClasses = new List<string>() { "twoColumns" } } )
	</div>

	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "Credential",
	   SearchType = "CredentialSearch",
	   Label = "Applicable Credential",
	   SavedItemsHeader = "Target Credentials",
	   Guidance = "Select any other credential(s) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Credential",
	   ProfileType = "Credential",
	   AllowMultipleSavedItems = true,
	   AllowingStarterCreate = false


   } )
	</div>


	@*Assessment*@
	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "Assessment",
	   SearchType = "AssessmentSearch",
	   Label = "Applicable Assessment",
	   SavedItemsHeader = "Target Assessments",
	   Guidance = "Select any assessment(s) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Assessment",
	   ProfileType = "Assessment",
	   AllowMultipleSavedItems = true,
	   AllowingStarterCreate = false,
	   AutoPropertyRefresh = new List<string>() { "TargetAssessment", "Assessment" }


   } )
	</div>
	<div class="propertyBox">
		@*LearningOpportunity*@

		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "LearningOpportunity",
	   SearchType = "LearningOpportunitySearch",
	   Label = "Applicable Learning Opportunity",
	   SavedItemsHeader = "Target Learning Opportunities",
	   Guidance = "Select any learning opportunity(ies) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Learning Opportunity",
	   ProfileType = "LearningOpportunity",
	   AllowMultipleSavedItems = true,
	   AllowingStarterCreate = false,
	   AutoPropertyRefresh = new List<string>() { "TargetLearningOpportunity", "LearningOpportunity" }


   } )

	</div>

	<div class="sectionGroup">
		<p>Enter Credit Hour data or Credit Unit data, but not both!</p>
		<p style="text-align:center">Credit Hour Data</p>
		<div class="sectionGroup">

			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourType", Label = "Credit Hour Type", Type = TextInputSettings.InputType.TEXT, Guidance = "Units of time corresponding to types of credits. Examples include but are not limited to semester hours, quarter hours, clock hours, or hours of participation." } )

			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourValue", Label = "Credit Hour Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of credit hours awarded for completing or attaining the resource being described." } )
		</div>
		<p style="text-align:center">Credit Unit Data</p>
		<div class="sectionGroup">
			@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CreditUnitType", Label = "Credit Unit Type", Type = ListInputSettings.InterfaceType.RADIO_LIST, HasOtherBox = false, Guidance = "The type of credit associated with degree and non-degree learning opportunities.", EnumItems = enumServices.GetEnumeration( "creditUnit", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items, AddNoneOption = true } )


			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitTypeDescription", Label = "Credit Unit Type Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Provide	a more refined, detailed description of credit unit type." } )
			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitValue", Label = "Credit Unit Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of either credit units awarded for college credit or continuing education units for completing or attaining the resource being described." } )
		</div>
	</div>

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "EstimatedCosts", Profile = "CostProfile", Label = "Cost", AddText = "Add new Cost", Guidance = "If there are any costs associated with this condition, describe them here." } )

	@*@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "ReferenceUrl", Label = "Reference URL", AddText = "Add new Reference URL", Guidance = "Enter a URL to a useful web resource related to these conditions.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://" } )*@
	<div class="sectionGroup">
		@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Residency", Profile = "JurisdictionProfile", Label = "Resident Of", AddText = "Add new Residency Condition", Guidance = "If someone must be a resident of a given place in order for these conditions to apply to that person, indicate the valid place(s) here.", PropertySchema = "ResidentOf" } )

		@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Geo-political information about applicable geographic areas and their exceptions." } )
	</div>


	<div class="sectionGroup">


		@RenderProfileInput( new ProfileSettings()
   {
	   Property = "AlternativeCondition",
	   Label = "Alternative Conditions",
	   Profile = "ConditionProfile",
	   Guidance = "A set of conditions in the context of requirements where more than one alternative set or path have been defined and from which any one path fulfills the parent conditions.",
	   AddText = "Add new Alternative Condition",
	   UseSmallLabel = false


   } )
	</div>

	<div class="offscreen">
		@* - only show for recommendations*@
		<div id="conditionCompetencies">
			@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "RequiresCompetencies", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Competencies", AddText = "Add new Competency", Guidance = "Provide any competencies that this information requires or applies to.", PropertySchema = "targetCompetency" } )
		</div>
</div>
		@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END, HasTabs = false } )
</script>
@* Condition Profile - credential connections - 2*@
<script type="text/template" id="template_CredentialsConditionProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
	Profile = "ConditionProfile",
	Type = ProfileSettings.ModelType.WRAPPER_START,
	IncludeName = false,
	HasTabs = false,
	ProfileType = "Credentials"
} )

	@Html.Hidden( "ProfileType", "Credentials" )
	@*@Html.Hidden("ConditionSubTypeId", "2")*@
	@*Will need to selectively show this, or more likely default the value*@
	@*@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Enter a name to help you identify this condition later.", RequireValue=true } )*@
	<div class="offscreen">
		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ConditionSubTypeId", Label = "ConditionSubTypeId", Type = TextInputSettings.InputType.NUMBER, Guidance = "" } )
	</div>
	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
{
	Property = "ConnectionProfileTypeId",
	Label = "Connection Type",
	Type = ListInputSettings.InterfaceType.RADIO_LIST,
	HasOtherBox = false,
	Guidance = "Select the type of condition.",
	EnumItems = enumServices.GetCredentialsConditionProfile( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items,
	PreSelectedItem = -1,
	ExtraClasses = new List<string>() { "twoColumns" },
}
	)
	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "ConditionProvider",
	   SearchType = "OrganizationSearch",
	   Label = "Asserted By",
	   Guidance = "Select the agent providing the information contained in the entity being described.",
	   SavedItemsHeader = "Selected Organization",
	   PageSize = 5,
	   AllowMultipleSavedItems = false,
	   DoAjaxSave = false,
	   AllowCreateWithoutParentExisting = false,
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Organization",
	   ProfileType = "Organization",
	   Filters = orgFilters,
	   AllowingStarterCreate = false,
	   PropertySchema = "AssertedBy"
   } )
	</div>

	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "Credential",
	   SearchType = "CredentialSearch",
	   Label = "Applicable Credential",
	   SavedItemsHeader = "Target Credentials",
	   Guidance = "Select any other credential(s) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Credential",
	   ProfileType = "Credential",
	   AllowingStarterCreate = false


   } )
	</div>

	@*Assessment*@
	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "Assessment",
	   SearchType = "AssessmentSearch",
	   Label = "Applicable Assessment",
	   SavedItemsHeader = "Target Assessments",
	   Guidance = "Select any assessment(s) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Assessment",
	   ProfileType = "Assessment",
	   AllowMultipleSavedItems = true,
	   AllowingStarterCreate = false,
	   AutoPropertyRefresh = new List<string>() { "TargetAssessment", "Assessment" }


   } )
	</div>
	<div class="propertyBox">
		@*LearningOpportunity*@

		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "LearningOpportunity",
	   SearchType = "LearningOpportunitySearch",
	   Label = "Applicable Learning Opportunity",
	   SavedItemsHeader = "Target Learning Opportunities",
	   Guidance = "Select any learning opportunity(ies) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Learning Opportunity",
	   ProfileType = "LearningOpportunity",
	   AllowMultipleSavedItems = true,
	   AllowingStarterCreate = false,
	   AutoPropertyRefresh = new List<string>() { "TargetLearningOpportunity", "LearningOpportunity" }


   } )

	</div>


	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )


	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Weight", Label = "Weight", Type = TextInputSettings.InputType.NUMBER, Guidance = "Provide a number between 0 and 1 that indicates the significance of these conditions." } )

	<div class="sectionGroup">
		<p>Enter Credit Hour data or Credit Unit data, but not both!</p>
		<p style="text-align:center">Credit Hour Data</p>
		<div class="sectionGroup">

			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourType", Label = "Credit Hour Type", Type = TextInputSettings.InputType.TEXT, Guidance = "Units of time corresponding to types of credits. Examples include but are not limited to semester hours, quarter hours, clock hours, or hours of participation." } )

			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourValue", Label = "Credit Hour Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of credit hours awarded for completing or attaining the resource being described." } )
		</div>
		<p style="text-align:center">Credit Unit Data</p>
		<div class="sectionGroup">
			@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CreditUnitType", Label = "Credit Unit Type", Type = ListInputSettings.InterfaceType.RADIO_LIST, HasOtherBox = false, Guidance = "The type of credit associated with degree and non-degree learning opportunities.", EnumItems = enumServices.GetEnumeration( "creditUnit", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items, AddNoneOption = true } )


			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitTypeDescription", Label = "Credit Unit Type Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Provide	a more refined, detailed description of credit unit type." } )
			@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitValue", Label = "Credit Unit Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of either credit units awarded for college credit or continuing education units for completing or attaining the resource being described." } )
		</div>
	</div>

	<p class="offscreen"><br /></p>
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END, HasTabs = false } )
</script>

@* Condition Profile - credential connections - 2*@
<script type="text/template" id="template_CorequisiteConditionProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
	Profile = "ConditionProfile",
	Type = ProfileSettings.ModelType.WRAPPER_START,
	IncludeName = false,
	HasTabs = false,
	ProfileType = "Corequisite"
} )
	<div class="offscreen">
		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ConnectionProfileTypeId", Label = "ConnectionProfileTypeId", Type = TextInputSettings.InputType.NUMBER, Guidance = "" } )

		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ConditionSubTypeId", Label = "ConditionSubTypeId", Type = TextInputSettings.InputType.NUMBER, Guidance = "" } )
	</div>

	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "ConditionProvider",
	   SearchType = "OrganizationSearch",
	   Label = "Asserted By",
	   Guidance = "Select the agent providing the information contained in the entity being described.",
	   SavedItemsHeader = "Selected Organization",
	   PageSize = 5,
	   AllowMultipleSavedItems = false,
	   DoAjaxSave = false,
	   AllowCreateWithoutParentExisting = false,
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Organization",
	   ProfileType = "Organization",
	   Filters = orgFilters,
	   AllowingStarterCreate = false,
	   PropertySchema = "AssertedBy"
   } )
	</div>

	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "Credential",
	   SearchType = "CredentialSearch",
	   Label = "Applicable Credential",
	   SavedItemsHeader = "Target Credentials",
	   Guidance = "Select any other credential(s) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Credential",
	   ProfileType = "Credential",
	   AllowingStarterCreate = false
   } )
	</div>

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )

	<p class="offscreen"><br /></p>
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END, HasTabs = false } )
</script>


@* Cost Profile - new from credential *@
<script type="text/template" id="template_CostProfile_CredentialAsset">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CostProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "AssetEntityId", Label = "Currency Type", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "Select the Credentail Asset to which this cost profile will relate.", EnumItems = enumServices.GetCurrencies( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )

	<p>OR:</p>
	<div class="propertyBox">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "Assessment",
	   SearchType = "AssessmentSearch",
	   Label = "Applicable Assessment",
	   SavedItemsHeader = "Target Assessments",
	   Guidance = "Select any assessment(s) that these conditions require or apply to.",
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Assessment",
	   ProfileType = "Assessment",
	   AllowMultipleSavedItems = true,
	   AllowingStarterCreate = false,
	   AutoPropertyRefresh = new List<string>() { "TargetAssessment", "Assessment" }


   } )
	</div>


	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Enter a name to help you identify this condition later.", RequireValue = true } )
	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Briefly summarize the nature of this cost, and provide any other noteworthy details not covered in the items below." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DateEffective", Label = "Start Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the start date of the validity of this information.", PropertySchema = "startDate" } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ExpirationDate", Label = "End Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the end date of the validity of this information.", PropertySchema = "endDate" } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DetailsUrl", Label = "Cost Details Url", Type = TextInputSettings.InputType.URL, Guidance = "Indicate a URL for details about this cost." } )

	@*@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "ReferenceUrl", Label = "Reference URLs", AddText = "Add new Reference URL", Guidance = "Enter a URL to a useful web resource related to these conditions.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://" } )*@

	@*, HasOther = true, OtherPlaceholder = "Reference Name"*@

	@*@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Currency", Label = "Currency", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO Currency Code</a> for the currency used in this cost profile." } )*@

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CurrencyTypeId", Label = "Currency Type", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "Select the type of currency that the costs for this item are measured in.", EnumItems = enumServices.GetCurrencies( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "CostItem", Profile = "CostItemProfile", Label = "Cost Items", AddText = "Add new Cost Item", Guidance = "Describe the individual costs." } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Geo-political information about applicable geographic areas and their exceptions." } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Cost Profile Basic*@
<script type="text/template" id="template_CostProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CostProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	<div class="offscreen">
		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ViewHeading", Type = TextInputSettings.InputType.LABEL, PropertySchema = "{none}" } )
	</div>

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Enter a name to help you identify this condition later.", RequireValue = true } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Briefly summarize the nature of this cost, and provide any other noteworthy details not covered in the items below." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DateEffective", Label = "Start Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the start date of the validity of this information.", PropertySchema = "startDate" } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ExpirationDate", Label = "End Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the end date of the validity of this information.", PropertySchema = "endDate" } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DetailsUrl", Label = "Cost Details Url", Type = TextInputSettings.InputType.URL, Guidance = "Indicate a URL for details about this cost.", PropertySchema = "costDetails" } )

	@*@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "ReferenceUrl", Label = "Reference URLs", AddText = "Add new Reference URL", Guidance = "Enter a URL to a useful web resource related to these conditions.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://" } )*@

	@*, HasOther = true, OtherPlaceholder = "Reference Name"*@

	@*@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Currency", Label = "Currency", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO Currency Code</a> for the currency used in this cost profile." } )*@

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CurrencyTypeId", PropertySchema = "Currency", Label = "Currency Type", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "Select the type of currency that the costs for this item are measured in.", EnumItems = enumServices.GetCurrencies( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )

	@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "Condition", Label = "Condition Items", AddText = "Add new Condition Item", Guidance = "Enter any individual specific conditions or requirements.", PropertySchema = "Condition" } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "CostItem", PropertySchema = "directCostType", Profile = "CostItemProfile", Label = "Cost Items", AddText = "Add new Cost Item", Guidance = "Describe the individual costs." } )

	<div class="sectionGroup ">
		@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Geo-political information about applicable geographic areas and their exceptions." } )

		@*@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Region", Profile = "JurisdictionProfile", Label = "Region", AddText = "Add new Region", Guidance = "A geo-political area of the described resource." } )*@

	</div>

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Cost Item Profile *@
<script type="text/template" id="template_CostItemProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CostItemProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )
	<div class="offscreen">
		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Enter a name to help you identify this information later.", RequireValue = false } )
	</div>

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
{
	Property = "CostTypeId",
	Label = "Cost Type",
	Type = ListInputSettings.InterfaceType.RADIO_LIST,
	HasOtherBox = false,
	Guidance = "Select the type of cost.",
	EnumItems = enumServices.GetEnumeration( "costType", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items,
	ExtraClasses = new List<string>() { "twoColumns" },
} )

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
{
	Property = "ResidencyTypeIds",
	Label = "Residency Type(s)",
	Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
	HasOtherBox = false,
	Guidance = "Select the type(s) residency to which this cost item applies.",
	EnumItems = enumServices.GetEnumeration( "residencyType", EnumerationType.MULTI_SELECT ).Items,
	ExtraClasses = new List<string>() { "twoColumns" },
} )

	@*@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "EnrollmentTypeIds", Label = "Enrollment Type(s)", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) of enrollment to which this cost item applies.", EnumItems = enumServices.GetEnumeration( "enrollmentType", EnumerationType.MULTI_SELECT ).Items } )*@

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
{
	Property = "AudienceType",
	Label = "Audience Type",
	Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
	HasOtherBox = false,
	Guidance = "Select the specific type(s) of audience to which this cost item applies. If the cost applies to all, do not check any options.",
	EnumItems = enumServices.GetEnumeration( "applicableAudienceType", EnumerationType.MULTI_SELECT ).Items,
	ExtraClasses = new List<string>() { "twoColumns" },
} )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Price", Label = "Price", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the cost in the financial units indicated above." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Payments", Label = "Payment Pattern", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Describe the nature of payment(s) for this cost item." } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* VerificationServiceStatus Profile *@
<script type="text/template" id="template_VerificationServiceStatus">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "VerificationStatus", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Status", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the name of the status.", RequireValue = true } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings()
{
	Property = "Description",
	Label = "Definition",
	Type = TextInputSettings.InputType.TEXTAREA,
	Guidance = "Describe the status."
} )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "URL", Label = "Status URL", Type = TextInputSettings.InputType.URL, Guidance = "URL to the status information." } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Credential Alignment Object Profile (Split) *@
<script type="text/template" id="template_CredentialAlignmentObjectFrameworkProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CredentialAlignmentObjectFrameworkProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EducationalFrameworkName", Label = "Educational Framework Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Official name of the educational framework.", RequireValue = true, PropertySchema = "CompetencyFramework" } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EducationalFrameworkUrl", Label = "Educational Framework URL", Type = TextInputSettings.InputType.URL, Guidance = "URL to the educational framework. Note that blank URL fields for competencies entered below will have the value of this field inserted automatically when you save the profile.", PropertySchema = "framework" } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Items", Profile = "CredentialAlignmentObjectItemProfile", Label = "Competencies", AddText = "Add new Competency", Guidance = "Add each applicable competency that is a part of this framework.", PropertySchema = "Competency" } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Credential Alignment Object Profile Item (Split) *@
<script type="text/template" id="template_CredentialAlignmentObjectItemProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CredentialAlignmentObjectItemProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Competency Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the name of the competency.", RequireValue = true } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Competency Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Describe the competency." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "TargetUrl", Label = "Competency URL (override)", Type = TextInputSettings.InputType.URL, Guidance = "Provide the URL of the competency. This will override the URL used in the Framework." } )
	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "AlignmentDate", Label = "Alignment Date", Type = TextInputSettings.InputType.DATE, Guidance = "Enter the date that this competency was aligned to this entity." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CodedNotation", Label = "Notation Code", Type = TextInputSettings.InputType.TEXT, Guidance = "Is used to include a formal code identifying a competency. If the competency has a code or identifier, provide it here. ex U.S. Common Core State Standards; e.g., \"CCSS.ELA - Literacy.RI.2.1\". Do NOT use a sequential number, such as 1, 2, 3 etc." } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>


@* Financial Alignment Object Profile  *@
<script type="text/template" id="template_FinancialAlignmentObject">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
	Profile = "FinancialAlignmentObject",
	Type = ProfileSettings.ModelType.WRAPPER_START,
	IncludeName = false
}
)

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "FrameworkName", Label = "Framework Name", Type = TextInputSettings.InputType.TEXT, Guidance = "The name of the framework to which the resource being described is aligned.", RequireValue = true } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Framework", Label = "Framework URL", Type = TextInputSettings.InputType.URL, Guidance = "The framework to which the resource being described is aligned.", PropertySchema = "Framework" } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "TargetNodeName", Label = "Target Node Name", Type = TextInputSettings.InputType.TEXT, Guidance = "The name of a node in an established educational framework.", RequireValue = false } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "TargetNode", Label = "Target Node URL", Type = TextInputSettings.InputType.URL, Guidance = "The node of a framework targeted by the alignment.", PropertySchema = "Framework" } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "TargetNodeDescription", Label = "Target Node Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "The description of a node in an established educational framework." } )

	<div class="offscreen">
		@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "AlignmentTypeId", Label = "Alignment Type", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "A category of alignment between the learning resource and the framework node.", EnumItems = enumServices.GetEnumeration( "alignmentType", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )
	</div>


	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "AlignmentDate", Label = "Alignment Date", Type = TextInputSettings.InputType.DATE, Guidance = "Enter the date that this competency was aligned to this entity." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CodedNotation", Label = "Coded Notation", Type = TextInputSettings.InputType.TEXT, Guidance = "A short set of alpha-numeric symbols that uniquely identifies a resource and supports its discovery." } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>


@* Revocation Profile *@
<script type="text/template" id="template_RevocationProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "RevocationProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	@*@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "RevocationCriteriaTypeIds", Label = "Revocation Criteria", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Indicate the criteria that will lead to the credential being revoked. Check all that apply.", EnumItems = enumServices.GetEnumeration( "revocationCriteriaType", EnumerationType.MULTI_SELECT ).Items } )*@

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "CredentialProfiled",
	SearchType = "CredentialSearch",
	Label = "Applicable Credential",
	SavedItemsHeader = "Target Credentials",
	Guidance = "Select any other credential(s) that these conditions require or apply to.",
	HasEditProfile = true,
	HasCreateProfile = true,
	CreateProfileTitle = "Credential",
	ProfileType = "Credential"


} )


	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )

	@*@RenderTextValueInput( new TextValueEditorSettings() { Property = "RevocationItems", ParentRepeaterId = "0", Label = "Revocation Items", AddText = "Add an Item", Guidance = "List any particular factors that help describe the revocation conditions.", ValueType = TextInputSettings.InputType.TEXT } )*@

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "RevocationCriteriaUrl", Label = "Revocation Criteria", Type = TextInputSettings.InputType.URL, Guidance = "Enter a URL to a page that lists the criteria for revocation.", Placeholder = "http://" } )



	@RenderTextInput( "RevocationCriteriaDescription", "Revocation Criteria Description", TextInputSettings.InputType.TEXTAREA, "Information about the removal criteria for an awarded credential.", false, 15 )



	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DateEffective", Label = "Date Effective", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the effective date of the validity of this information." } )

	@*@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EndDate", Label = "End Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the end date of the validity of this information." } )*@

	@*@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "ReferenceUrl", Label = "Reference URL", AddText = "Add new Reference URL", Guidance = "Enter a URL to a useful web resource related to these conditions.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://" } )*@
	@*, HasOther = true, OtherPlaceholder = "Reference Name"*@

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Geo-political information about applicable geographic areas and their exceptions." } )

	@*@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Region", Profile = "JurisdictionProfile", Label = "Region", AddText = "Add new Region", Guidance = "A geo-political area of the described resource." } )*@


	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Quality Assurance Action *@
<script type="text/template" id="template_QualityAssuranceActionProfile_Recipient">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "QualityAssuranceActionProfile_Recipient", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "Actor",
	SearchType = "QAOrganizationSearch",
	Label = "Acting Organization",
	Guidance = "Select the organization that performed this quality assurance.",
	SavedItemsHeader = "Selected Organization",
	PageSize = 5,
	AllowMultipleSavedItems = false,
	DoAjaxSave = false,
	HasEditProfile = true,
	ProfileType = "Organization",
	AllowingStarterCreate = false,
	PropertySchema = "assertedBy"
} )

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "QualityAssuranceTypeId", Label = "Agent Roles", Type = ListInputSettings.InterfaceType.RADIO_LIST, HasOtherBox = false, Guidance = "Select the type of quality assurance action.", EnumItems = qaRoles.Items, PropertySchema = "assertedBy" } )

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "IssuedCredential",
	SearchType = "QACredentialSearch",
	Label = "Quality Assurance Issued",
	Guidance = "Select the quality assurance credential that was issued to this item by the acting organization.",
	SavedItemsHeader = "Selected Quality Assurance",
	PageSize = 5,
	AllowMultipleSavedItems = false,
	DoAjaxSave = false,
	HasEditProfile = true,
	HasCreateProfile = true,
	CreateProfileTitle = "Credential",
	ProfileType = "Credential",
	PropertySchema = "assertedBy"
} )
	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "ActionStatusTypeId", Label = "Action Status", Type = ListInputSettings.InterfaceType.RADIO_LIST, HasOtherBox = false, Guidance = "Select the status for this assurance action.", EnumItems = enumServices.GetEnumeration( "actionStatusType", EnumerationType.SINGLE_SELECT, false ).Items } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "StartDate", Label = "Assurance Start Date", Type = TextInputSettings.InputType.DATE, Guidance = "The date the assurance took effect." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EndDate", Label = "Assurance End Date", Type = TextInputSettings.InputType.DATE, Guidance = "The date the assurance expires" } )

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "ParticipantAgent",
	SearchType = "OrganizationSearch",
	Label = "Participating Agent",
	Guidance = "Select the organization that participates in this action.",
	SavedItemsHeader = "Selected Participant",
	PageSize = 5,
	AllowMultipleSavedItems = false,
	DoAjaxSave = false,
	HasEditProfile = true,
	ProfileType = "Organization",
	AllowingStarterCreate = false
} )
	@*
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
		{
			Property = "SecondaryActor",
			SearchType = "OrganizationSearch",
			Label = "Participating Organizations",
			Guidance = "If any other organizations participated in issuing this quality assurance, indicate them here.",
			PageSize = 5,
			DoAjaxSave = false
		} )
	*@

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this Quality Assurance and provide any additional necessary information." } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Verification Service Profile *@
<script type="text/template" id="template_VerificationServiceProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "VerificationServiceProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Describe the service.", RequireValue = true } )

@RenderTextInput( new TextInputSettings()
{
	Property = "SubjectWebpage",
	Label = "Subject Webpage",
	Type = TextInputSettings.InputType.URL,
	Guidance = "Provide a URL to the web page where the subject of the resource being described is located. </br>The value of subjectWebpage is an authoritative location for information about the subject and should not assumed to be a persistent identifier of the subject.",
	PropertySchema = "SubjectWebpage",
	RequireValue = true
} )

	@RenderTextInput( new TextInputSettings()
{
	Property = "HolderMustAuthorize",
	PropertySchema = "holderMustAuthorize",
	Label = "Holder Must Authorize",
	Type = TextInputSettings.InputType.NULLABLE_BOOLEAN,
	Guidance = "Indicates whether or not the holder of the credential must authorize this service.",
	NullableBooleanNullText = "No Data",
	NullableBooleanTrueText = "This service requires holder authorization.",
	NullableBooleanFalseText = "This service does not require holder authorization."

} )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DateEffective", Label = "Effective Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate when this information first took effect." } )

	@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
{
	Property = "ClaimType",
	Label = "Claim Type",
	Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
	HasOtherBox = false,
	Guidance = "The type of claim type provided through a verification service. Check all that apply.",
	EnumItems = enumServices.GetEnumeration( "claimType",
		EnumerationType.MULTI_SELECT, false, true ).Items
} )

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "Credential",
	SearchType = "CredentialSearch",
	Label = "Applicable Credential",
	SavedItemsHeader = "Target Credentials",
	PageSize = 5,
	Guidance = "Select the credential(s) that this service applies to.",
	HasEditProfile = true,
	HasCreateProfile = true,
	CreateProfileTitle = "Credential",
	ProfileType = "Credential",
	DoAjaxSave = true,
	AllowMultipleSavedItems = true


} )

	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "OfferedByAgentUid",
	PropertySchema = "OfferedBy",
	SearchType = "OrganizationSearch",
	Label = "Offered By",
	Guidance = "Access to the described resource is offered by the referenced agent.",
	SavedItemsHeader = "Selected Agent",
	PageSize = 5,
	AllowMultipleSavedItems = false,
	DoAjaxSave = false,
	AllowCreateWithoutParentExisting = false,
	HasEditProfile = true,
	HasCreateProfile = true,
	CreateProfileTitle = "Organization",
	ProfileType = "Organization",
	AllowingStarterCreate = false
} )




	@RenderTextInput( new TextInputSettings()
{
	Property = "VerificationServiceUrl",
	Label = "Verification Service Url",
	Type = TextInputSettings.InputType.URL,
	Guidance = "A resource that provides a means of accessing the verification service.",
	PropertySchema = "VerificationService"



} )
	@*@RenderTextInput( new TextInputSettings()
		{
			Property = "VerificationDirectory",
			Label = "Verification Directory",
			Type = TextInputSettings.InputType.URL,
			Guidance = "Directories of credential holders and their current statuses.",
			PropertySchema = "verificationDirectory"

		} )*@

	@RenderTextInput( "VerificationDirectory", "Verification Directory", TextInputSettings.InputType.URL, "Directories of credential holders and their current statuses." )



	@RenderTextInput( "VerificationMethodDescription", "Verification Method Description", TextInputSettings.InputType.TEXTAREA, "Description of the methods used to evaluate the validity and reliability." )



	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Cost", PropertySchema = "estimatedCost", Profile = "CostProfile", Label = "Cost", AddText = "Add new Cost", Guidance = "If there are any costs associated with this service, describe them here." } )


	<div class="sectionGroup">
		@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "JurisdictionAssertions", Profile = "JurisdictionProfile_QA", Label = "Jurisdiction Assertions", AddText = "Add new Jurisdiction", Guidance = "The resource being described is asserted in the jurisdiction being referenced.", PropertySchema = "OfferedIn" } )


		@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Geo-political information about applicable geographic areas and their exceptions." } )

		@*@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Region", Profile = "JurisdictionProfile", Label = "Region", AddText = "Add new Region", Guidance = "A geo-political area of the described resource." } )*@
	</div>

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Process Profile *@
<script type="text/template" id="template_ProcessProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
	Profile = "ProcessProfile",
	Type = ProfileSettings.ModelType.WRAPPER_START,
	HasTabs = false,
	IncludeName = false
} )


	@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
{
	Property = "ProcessingAgent",
	SearchType = "OrganizationSearch",
	Label = "Process Provider",
	Guidance = "Select the agent that processes this information.",
	SavedItemsHeader = "Selected Agent",
	PageSize = 5,
	AllowMultipleSavedItems = false,
	DoAjaxSave = false,
	HasEditProfile = true,
	HasCreateProfile = true,
	CreateProfileTitle = "Organization",
	ProfileType = "Organization",
	Filters = orgFilters,
	AllowingStarterCreate = false
} )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )



	@RenderTextInput( new TextInputSettings()
{
	Property = "SubjectWebpage",
	Label = "Subject Webpage",
	Type = TextInputSettings.InputType.URL,
	Guidance = "Provide a URL to the web page where the subject of the resource being described is located. ",
	PropertySchema = "SubjectWebpage"
} )


	@RenderListInput( new ListInputSettings()
{
	Property = "ExternalInput",
	Label = "External Input Type",
	Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
	Guidance = "The type(s) of external stakeholders that provide input to the processes.",
	EnumItems = enumServices.GetEnumeration( "externalInputType", EnumerationType.MULTI_SELECT, false, true ).Items,
	ExtraClasses = new List<string>() { "twoColumns" }


} )



	@*@RenderTextInput( "TargetCompetencyFramework", "Competency Framework", TextInputSettings.InputType.TEXT, "Optionally provide the competency framework whose process is being described by this profile." )*@

	@*@RenderProfileInput( new ProfileSettings() { Property = "RequiresCompetenciesFrameworks",
		Label = "Competencies",
		Profile = "CredentialAlignmentObjectFrameworkProfile",
		Guidance = "The competency framework whose process is being described by this profile.",
		AddText = "Add new Competency"} )*@



	<div class="sectionGroup">


		@RenderTextInput( "ProcessFrequency", "Process Frequency", TextInputSettings.InputType.TEXT, "How often the process recurs." )




		@RenderTextInput( "ProcessMethod", "Process Method", TextInputSettings.InputType.URL, "	A resource that describes the process methods." )


		@RenderTextInput( "ProcessMethodDescription", "Process Method Description", TextInputSettings.InputType.TEXTAREA, "A more detailed refinement of the process methods.", false, 15 )



		@RenderTextInput( "ProcessStandards", "Process Standards", TextInputSettings.InputType.URL, "A resource describing the criteria, standards, and/or requirements used." )


		@RenderTextInput( "ProcessStandardsDescription", "Process Standards Description", TextInputSettings.InputType.TEXTAREA, "A description of the criteria, standards, and/or requirements used.", false, 15 )
	</div>

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DateEffective", Label = "Effective Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate when this information first took effect." } )

	<div class="sectionGroup">


		@RenderTextInput( "ScoringMethodDescription", "Scoring Method Description", TextInputSettings.InputType.TEXTAREA, "The method used to score the assessment.", false, 15 )


		@RenderTextInput( "ScoringMethodExample", "Scoring Method Example", TextInputSettings.InputType.URL, "A resource that is an example of the method or tool used to score the assessment." )


		@RenderTextInput( "ScoringMethodExampleDescription", "Scoring Method Example Description", TextInputSettings.InputType.TEXTAREA, "The text of an example of the method or tool used to score the assessment.", false, 15 )
	</div>


	@RenderTextInput( "VerificationMethodDescription", "Verification Method Description", TextInputSettings.InputType.TEXTAREA, "Description of the methods used to evaluate the resource validity and reliability.", false, 15 )



	@RenderProfileInput( "Jurisdiction", "Jurisdiction", "JurisdictionProfile", "Geo-political information about applicable geographic areas and their exceptions.", "Add new Jurisdiction" )


	@*@RenderProfileInput( "Region", "Region", "JurisdictionProfile", "A geo-political area of the described resource.", "Add new Region" )*@

	<div class="sectionGroup credentialOnly">
		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "TargetCredential",
	   SearchType = "CredentialSearch",
	   Label = "Target Credential",
	   SavedItemsHeader = "Target Credentials",
	   Guidance = "Select a credential that is the focus of the resource being described.",
	   AllowMultipleSavedItems = true,
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Target Credential",
	   ProfileType = "Credential",
	   AllowingStarterCreate = false
   } )

		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "TargetAssessment",
	   SearchType = "AssessmentSearch",
	   Label = "Target Assessment",
	   SavedItemsHeader = "Target Assessments",
	   Guidance = "Select an assessment being referenced.",
	   AllowMultipleSavedItems = true,
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Target Assessment",
	   ProfileType = "Assessment",
	   AllowingStarterCreate = false,
	   AutoPropertyRefresh = new List<string>() { "TargetAssessment", "Assessment" }
   } )

		@Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
   {
	   Property = "TargetLearningOpportunity",
	   SearchType = "LearningOpportunitySearch",
	   Label = "Applicable Learning Opportunity",
	   SavedItemsHeader = "Target Learning Opportunities",
	   Guidance = "Select a Learning Opportunity that is the focus of the resource being described.",
	   AllowMultipleSavedItems = true,
	   HasEditProfile = true,
	   HasCreateProfile = true,
	   CreateProfileTitle = "Learning Opportunity",
	   ProfileType = "LearningOpportunity",
	   AllowingStarterCreate = false,
	   AutoPropertyRefresh = new List<string>() { "TargetLearningOpportunity", "LearningOpportunity" }
   } )

	</div>

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Earnings Profile *@
<script type="text/template" id="template_EarningsProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "EarningsProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )



	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>


@* Address Profile *@
<script type="text/template" id="template_AddressProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "AddressProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )



	@RenderMicroSearchInput( new MicroSearchSettings()
{
	Property = "AddressSelect",
	PropertySchema = "{none}",
	SearchType = "AddressSearch",
	Label = "Existing Address",
	ProfileTemplate = "Address",
	SavedItemsHeader = "",
	PageSize = 5,
	Guidance = "Add a copy of a previously-saved address, or enter a new address below.",
	DoAjaxSave = false,
	AllowMultipleSavedItems = false,
	ExtraClasses = new List<string>() { "hideSavedResults" }


} )

	@*@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() {
			Property = "",
			Label = "Main Address",
			IncludeDefaultItem = false,
			Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST,
			EnableUncheck = false,
			StringItems = new Dictionary<string, string>() {
				{ "IsMainAddress", "This is the main/official/headquarters address" }
			}
		} )*@
	<p>The Street Address Line 1 or Post Office Box Number are requried</p>
	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Address1", PropertySchema = "StreetAddress", Label = "Address Line 1", Type = TextInputSettings.InputType.TEXT, Guidance = "The street address. For example, 1600 Amphitheatre Pkwy.", RequireValue = true } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Address2", PropertySchema = "StreetAddress", Label = "Address Line 2", Type = TextInputSettings.InputType.TEXT, Guidance = "An additional part of the street address." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "PostOfficeBoxNumber", Label = "Post Office Box Number", Type = TextInputSettings.InputType.TEXT, Guidance = "The post office box number for PO box addresses." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "City", Label = "City", Type = TextInputSettings.InputType.TEXT, Guidance = "The locality. For example, Mountain View.", PropertySchema = "addressLocality", RequireValue = true } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Region", Label = "Region/State/Province", Type = TextInputSettings.InputType.TEXT, Guidance = "The region. For example, CA.", PropertySchema = "addressRegion", RequireValue = true } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "PostalCode", Label = "Postal Code", Type = TextInputSettings.InputType.TEXT, Guidance = "The postal code. For example, 94043.", RequireValue = true } )



	@RenderListInput( new ListInputSettings()
{
	Property = "CountryId",
	Label = "Country",
	Type = ListInputSettings.InterfaceType.DROPDOWN_LIST,
	Guidance = "Select Country",
	CodeItems = enumServices.GetCountries(),
	PropertySchema = "addressCountry"


} )


	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "ContactPoint", Profile = "ContactPoint", Label = "Contact Points", AddText = "Add new Contact Point for this Address", Guidance = "A means of contacting a resource or its representative(s)." } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Contact Point Profile *@
<script type="text/template" id="template_ContactPoint">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "ContactPoint", Type = ProfileSettings.ModelType.WRAPPER_START } )
	@*may want to be to just copy a contact point?*@
	@*@RenderMicroSearchInput( new MicroSearchSettings()
		{
			Property = "ContactPointSelect",
			SearchType = "ContactPointSearch",
			Label = "Existing ContactPoint",
			ProfileTemplate = "ContactPoint",
			SavedItemsHeader = "",
			PageSize = 5,
			Guidance = "Add a copy of a previously-saved Contact Point, or enter a new Contact Point below.",
			DoAjaxSave = false,
			AllowMultipleSavedItems = false,
			ExtraClasses = new List<string>() { "hideSavedResults" }
		} )*@


	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ContactType", Label = "Contact Type", Type = TextInputSettings.InputType.TEXT, Guidance = "Specification of the type of contact." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ContactOption", Label = "Contact Option", Type = TextInputSettings.InputType.TEXT, Guidance = "An option available on this contact point. <br/>For example, a toll-free number or support for hearing-impaired callers." } )

	@*@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Telephone", Label = "Telephone", Type = TextInputSettings.InputType.TEXT, Guidance = "The telephone number." } )

		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Fax", Label = "Fax", Type = TextInputSettings.InputType.TEXT, Guidance = "The fax number." } )


		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Email", Label = "Email", Type = TextInputSettings.InputType.TEXT, Guidance = "Email address of the agent being described." } )

		@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "SocialMedia", Label = "Social Media", Type = TextInputSettings.InputType.URL, Guidance = "A social media URL." } )*@

	<div class="sectionGroup">


		@RenderTextValueInput( new TextValueEditorSettings()
   {
	   Property = "PhoneNumbers",
	   Label = "Organization Phone/Fax Numbers",
	   AddText = "Add a Phone/Fax Number",
	   Guidance = "Phone numbers for contacting the organization directly.",
	   HasSelector = true,
	   HasOther = true,
	   OtherPlaceholder = "Enter 'Other' phone type",
	   CodeItems = enumServices.GetPropertiesList( "phoneType", true ),
	   ValueType = TextInputSettings.InputType.TEXT,
	   ValuePlaceholder = "Phone/Fax Number",
	   PropertySchema = "telephone"



   } )



		@RenderTextValueInput( new TextValueEditorSettings()
   {
	   Property = "Emails",
	   PropertySchema = "email",
	   Label = "Organization Emails",
	   AddText = "Add an Email",
	   Guidance = "Emails for contacting the organization directly. Please provide a purpose (e.g, \"Public Relations\", \"Technical Staff\", \"Head Office\", etc.) and a valid email address.",
	   ValueType = TextInputSettings.InputType.TEXT,
	   HasOther = true,
	   OtherPlaceholder = "Email Purpose",
	   ValuePlaceholder = "Email Address"



   } )



		@RenderTextValueInput( new TextValueEditorSettings()
   {
	   Property = "SocialMediaPages",
	   PropertySchema = "socialMedia",
	   Label = "Organization Social Media Pages",
	   ValueType = TextInputSettings.InputType.URL,
	   Guidance = "Social Media Pages that represent the organization directly.",
	   AddText = "Add a Social Media Page",
	   ValuePlaceholder = "http://",
	   UseSmallLabel = true,
	   RequireValue = false


   } )
	</div>

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>



@* Starter Profile - used for "Create New" functions in micro searches *@
<script type="text/template" id="template_StarterProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "StarterProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )
	<div style="margin-left:30px;">


		<h2>Creating a Quick Profile</h2>
		<p>Here you can create a <i>starter</i> version of a new profile.</p>
		<p>After saving this profile you will be able to navigate to a full version of the associated editor and enter all related information.</p>
	</div>




	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Enter a name to help you identify this profile later." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Url", Label = "Url", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the URL to this item." } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ProfileType", Type = TextInputSettings.InputType.HIDDEN } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "SearchType", Type = TextInputSettings.InputType.HIDDEN } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* cost search Profile - for searching for existing cost profile to copy *@
<script type="text/template" id="template_CostProfileSearch">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CostProfileSearch", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )
	<div style="margin-left:30px;">


		<h2>Search for Existing Cost Profile</h2>
		<p>Search for cost profiles from another credential - for this owning organization. Selecting one will add it to this credential.</p>
	</div>



	@RenderMicroSearchInput( new MicroSearchSettings()
{
	Property = "CostProfileSearch",
	SearchType = "CostProfileSearch",
	Label = "Cost Profiles",
	ProfileTemplate = "CostProfile",
	SavedItemsHeader = "",
	PageSize = 5,
	Guidance = "Copy of a previously-saved cost profile.",
	DoAjaxSave = true,
	AllowMultipleSavedItems = false,
	ExtraClasses = new List<string>() { "hideSavedResults" }
} )


	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ProfileType", Type = TextInputSettings.InputType.HIDDEN } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "SearchType", Type = TextInputSettings.InputType.HIDDEN } )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* CASS browser *@
<script type="text/template" id="template_CassBrowser">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CassBrowser", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	@RenderCassBrowser( "{CassBrowser}", "{OnSaveCompetency}", "{OnSaveCompetencyList}", "{OnRemoveCompetency}", "{parentID}" )

	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Text Value Profiles *@
<script type="text/template" id="template_TextValueProfile">
	<div class="textValueProfile" data-recordID="{RecordId}" data-rowID="{RowId}" data-hasSelector="{HasSelector}" data-textValueID="{textValueID}">
		<div class="textValueSelectorBox" data-hasOther="{HasOther}">
			<select class="textValueSelector"></select>
			<input type="text" class="textValueOther" placeholder="{OtherPlaceholder}" data-required="{RequireOther}" />
		</div>
		<div class="textValueValueBox">
			<input type="text" class="textValueValue" data-type="{ValueType}" placeholder="{ValuePlaceholder}" data-required="{RequireValue}" />
			<input type="button" class="textValueDelete redButton" value="Delete" onclick="deleteTextValueProfile('{textValueName}', '{textValueID}', this);" />
		</div>
	</div>
</script>
@* Starter Profile - used for "Create New" functions in micro searches *@
<script type="text/template" id="template_PopupProfile">
	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "IFrameProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

	<iframe id="popupIframe" src='/editor/{profileType}/?parentPage={parentPage}&prt={ParentRequestType}&lastProfileRowId={lastProfileRowId}&lastProfileType={lastProfileType}' style="height:100%;width:100%;position:absolute; top: 0; left:0;"></iframe>

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ProfileType", Type = TextInputSettings.InputType.HIDDEN } )

	@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "SearchType", Type = TextInputSettings.InputType.HIDDEN } )


	@Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_CLOSE } )
</script>

@* Micro Profiles *@
@* Paging *@
<script type="text/template" id="template_MicroSearch_PageButton">
	<input type="button" class="microSearchPageButton {current}" value="{pageNumber}" onclick="setMicroSearchPage('{microSearchName}', {pageNumber});" />
</script>

@* Generic Micro Profile *@
<script type="text/template" id="template_MicroProfile_MicroProfile">
	<div class="microProfile" data-microprofile="microProfile" data-recordID="{Id}" data-resultID="{resultID}">
		<div class="rawData">{rawData}</div>
		<div class="selectors">{Selectors}</div>
		<div class="title noResultLink">{Name}</div>
		<div class="title hasResultLink"><a href="@Url.Content( "~/detail/" ){profileType}/{Id}" target="microResultWindow">{Name}</a></div>
		<div class="title">{Heading2}</div>
		<div class="description">{Description}</div>
		<div class="properties">{Properties}</div>
		<div class="microProfileButtons">
			<input type="button" class="actionButton showOnResult" value="Save/Add" onclick="saveMicroProfile('{microSearchName}', {resultID});" />
			<a href="@Url.Content("~/editor/"){profileType}/{Id}" class="linkButton actionButton editMicroProfile" target="microResultWindow" title="Edit Record in New Window">Edit</a>
			<input type="button" class="redButton deleteButton showOnSaved" value="Remove" onclick="deleteMicroProfile('{microSearchName}', {resultID});" title="Remove Relationship to Parent - NOTE physical record is not deleted, just the relationship." />

			@*<a href="#" class="offscreen hasDivTooltip"><img src="/Images/Icons/icon_infobubble.gif"></a>
				<div class="offscreen">NOTE: removing a department from an organization, does NOT delete the department. If the actual department is to be deleted, first click the edit button, and, from the edit view of the department, delete the entity. Then return here, and, after refreshing the page, you will see that the department is no longer associated with this organzation. </div>*@

		</div>
	</div>
</script>

@* Code Item *@
<script type="text/template" id="template_MicroProfile_CodeItem">
	<div class="microProfile" data-microprofile="codeitem" data-recordID="{Id}" data-resultID="{resultID}">
		<div class="rawData">{rawData}</div>
		<div class="selectors">{Selectors}</div>
		<a href="{Url}" target="detailWindow" class="title">{Name}</a>
		<div class="description">{Description}</div>
		<div class="properties">
			<div data-microproperty="FrameworkCode">Code: {FrameworkCode}</div>
		</div>
		<div class="microProfileButtons">
			<input type="button" class="actionButton showOnResult" value="Save/Add" onclick="saveMicroProfile('{microSearchName}', {resultID});" />
			<input type="button" class="redButton deleteButton showOnSaved" value="Delete" onclick="deleteMicroProfile('{microSearchName}', {resultID});" />
		</div>
	</div>
</script>

@* Region *@
<script type="text/template" id="template_MicroProfile_Region">
	<div class="microProfile" data-microprofile="region" data-latitude="{Latitude}" data-longitude="{Longitude}" data-geonamesID="{GeoNamesId}" data-resultID="{resultID}">
		<div class="rawData">{rawData}</div>
		<div class="selectors">{Selectors}</div>
		<div class="title">{Name}</div>
		<div class="description">{Description}</div>
		<a href="{Url}" target="detailWindow">View on Map</a>
		<div class="microProfileButtons">
			<input type="button" class="actionButton showOnResult" value="Save/Add" onclick="saveMicroProfile('{microSearchName}', {resultID});" />
			<input type="button" class="redButton deleteButton showOnSaved" value="Delete" onclick="deleteMicroProfile('{microSearchName}', {resultID});" />
		</div>
	</div>
</script>

@* Address *@
<script type="text/template" id="template_MicroProfile_Address">
	<div class="microProfile" data-microprofile="address" data-resultID="{resultID}">
		<div class="rawData">{rawData}</div>
		<div class="selectors">{Selectors}</div>
		<div class="rawProperties">{rawProperties}</div>
		<div class="title">{Name}</div>
		<div class="properties">
			<div data-microProperty="Address1">{Address1}</div>
			<div data-microProperty="Address2">{Address2}</div>
			<div data-microProperty="City_Region_PostalCode">{City}, {Region} {PostalCode}</div>
			<div data-microProperty="Country">{Country}</div>
		</div>
		<div class="microProfileButtons">
			<input type="button" class="actionButton showOnResult" value="Copy" onclick="copyMicroProfile('{microSearchName}', {resultID});" />
		</div>
	</div>
</script>

<div id="waitWrapper">
	<div id="wait"><i id="waitSpinner" class="fa fa-spin fa-spinner"></i><div id="waitTitle">Working...</div></div>
</div>
