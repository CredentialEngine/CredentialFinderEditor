@model Models.Node.Interface.MicroSearchSettings
@{
    var microSearchName = Model.ParentRepeaterId + "_" + Model.Property;
    var offscreen = "";
    var toolTipImageClass = "";
    var searchResultColumnType = "microSearchColumn";
    if ( Model.AllowingSearch == false)
    {
        offscreen = " offscreen ";
        searchResultColumnType = "microSearchColumnWide";
    }

    var tooltipProperty = Model.Property;
    if ( ( Model.PropertySchema ?? "" ) == "{none}" )
    {
        tooltipProperty = "";
        toolTipImageClass = "offscreen";

    }
    else if ( ( Model.PropertySchema ?? "" ).Length > 2 )
    {
        tooltipProperty = Model.PropertySchema;
    }
}
<div 
     class="microSearchBox tabItem @Html.Raw( Model.UseSmallLabel ? "smallLabel" : "" ) @string.Join( " ", Model.ExtraClasses )" 
     data-property="@Model.Property" 
     data-parentRepeaterID="@Model.ParentRepeaterId"
     data-profileTemplate="@Model.ProfileTemplate"
     data-searchType="@Model.SearchType"
     data-previous="@Model.Previous"
     data-pageSize="@Model.PageSize"
     data-pageNumber="@Model.PageNumber"
     data-hasKeywords="@Html.Raw(Model.HasKeywords ? "true" : "false")"
     data-allowMultipleSavedItems="@Html.Raw( Model.AllowMultipleSavedItems ? "true" : "false" )"
     data-microSearchName="@microSearchName"
     data-autoSaveNewParentProfile="@Html.Raw( Model.AutoSaveNewParentProfile ? "true" : "false" )"
     data-doAjaxSave="@Html.Raw( Model.DoAjaxSave ? "true" : "false" )"
     data-profileType="@Model.ProfileType"
     data-hasEditProfile="@Html.Raw( Model.HasEditProfile ? "true" : "false" )"
     data-hasCreateProfile="@Html.Raw( Model.HasCreateProfile ? "true" : "false" )"
     data-createProfileTitle="@Model.CreateProfileTitle"
     data-hasResultLink="@Html.Raw( Model.HasResultLink ? "true" : "false" )"
	 data-autoPropertyRefresh="@Html.Raw( string.Join( ",", Model.AutoPropertyRefresh ) )"
     >
    <div style="display:none;" class="staticSelectorValues">
        @Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize( Model.StaticSelectorValues ) )
    </div>
    <h2 class="microSearchLabel  @(Model.RequireValue ? " isRequired" : "")">@Model.Label</h2>
    <div class="microSearchData">
        <div class="guidance">@Html.Raw( Model.Guidance )&nbsp;<a onclick="return false" href="" title="@tooltipProperty" class="hasToolTip"><img src="~/Images/Icons/icon_infobubble.gif" class="@toolTipImageClass" /></a></div>
        <div class="microSearchColumns">
          
            <div class="microSearchColumn microSearchSearch @string.Join( " ", offscreen )">
                <h3>Search</h3>
                <div class="microSearchFilters">
                    @if ( Model.Filters != null )
                    {
                        foreach ( var item in Model.Filters )
                        {
                            var attributes = "";
                            foreach ( var attribute in item.Attributes )
                            {
                                attributes = attributes + attribute.Key + "=\"" + attribute.Value + "\" ";
                            }
                            switch ( item.Type )
                            {
                                case "select":
                                    <select class="microSearchFilter" data-type="select" data-filtername="@item.FilterName" @attributes>
                                        @foreach ( var option in item.Items )
                                        {
                                            <option value="@option.Key">@option.Value</option>
                    }
                                    </select>break;
                                case "text":
                                    <input type="text" class="microSearchFilter" data-type="text" data-filtername="@item.FilterName" placeholder="@item.Placeholder" @attributes />break;
                                default:
                                    break;
                            }
                        }
                    }
                   

                    @foreach ( var item in Model.HiddenFilters )
                    {
                        var attributes = "";
                        foreach ( var attribute in item.Attributes )
                        {
                            attributes = attributes + attribute.Key + "=\"" + attribute.Value + "\" ";
                        }
                        switch ( item.Type )
                        {
                            case "text":
                            <input type="text" class="microSearchFilter offscreen" data-type="text" data-filtername="@item.FilterName" value="@item.HiddenValue" />
                                    break;
                            default:
                                    break;
                        }
                    }
                    @if ( Model.HasKeywords )
                    {
                        <div class="microSearchKeywords">
                            <input type="text" class="microSearchFilter" data-type="text" data-filtername="keywords" placeholder="Search..." />
                          
                        </div>
                    }
                        <div>
                            <input type="button" value="Search" onclick="doMicroSearch('@microSearchName', false);" class="actionButton btn btn-default" />
                            <input type="button" value="Reset" onclick="resetMicroSearch('@microSearchName');" class="redButton btn btn-danger" />
                        </div>
                    
                </div>
                <div class="microSearchStatus"></div>
                <div class="microSearchResults"></div>
                <div class="microSearchPaging"></div>
            </div>
            <div class="@string.Join( " ", searchResultColumnType ) microSearchSaved">
            <h3>@Model.SavedItemsHeader <img class="jqTooltip" src="/Images/Icons/icon_infobubble.gif" title="NOTE: removing a resource from this entity, does NOT delete the resource. If the actual resource is to be deleted, first click the edit button, and, from the edit view of the resource, delete the entity. Then return here, and, after refreshing the page, you will see that the resource is no longer associated with this entity."></h3>
            <div class="microSearchSavedItems">
                <p class="microSearchNoItems">No saved items</p>
                <div class="microSearchSavedItemsList"></div>
            </div>
            @if ( Model.HasCreateProfile )
                {
                    if ( Model.AllowCreateWithoutParentExisting == true )
                    {
                <div class="microSearchButtons">
@if ( Model.AllowingStarterCreate ) {
                    <input type="button" value="Create New @Model.CreateProfileTitle Starter" onclick="createStarterProfile('@microSearchName', true);" />
}
@if ( Model.AllowingPopupCreate ) {
                    <input type="button" value="Add New @Model.CreateProfileTitle" onclick="createPopupProfile('@microSearchName', true);" />
                   @*<input type="button" value="REFRESH" onclick="refreshResults('@microSearchName', false);" />*@
                    }
                </div>
                    }
                    else  {
                <div class="microSearchButtons">
@if ( Model.AllowingStarterCreate ) {
                    <input type="button" value="Create New @Model.CreateProfileTitle" onclick="createStarterProfile('@microSearchName', false);" />
}
@if ( Model.AllowingAddProfileOption )
{
                    <input type="button" value="Add New @Model.CreateProfileTitle" onclick="addNewProfile(@Model.ParentRepeaterId, '@Model.Property', this);" />
}
@if ( Model.AllowingPopupCreate ) {
                        <input type="button" value="Add New @Model.CreateProfileTitle" onclick="createPopupProfile('@microSearchName', false);" />

                        @*<input type="button" value="REFRESH" onclick="refreshResults('@microSearchName', false);" />*@
                    }
                </div>
                    }
                }
        </div>
    </div>
    </div>

</div>