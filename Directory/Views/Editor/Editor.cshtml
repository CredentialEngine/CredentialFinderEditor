@model Models.Node.Interface.EditorSettings
@using Models.Node.Interface;
@using Models.Common;
@using Models;
@{
    ViewBag.Title = "Profile Manager";
    
    var enumServices = new EnumerationServices();
    var isUserAdmin = AccountServices.IsUserSiteStaff();


    var mainProfileType = "";
    var roles = new Enumeration();
    var qaRoles = new Enumeration();
    switch ( Model.Editor )
    {
        case EditorSettings.EditorType.CREDENTIAL:
            mainProfileType = "Credential";
            roles = enumServices.GetCredentialAgentRoles( EnumerationType.CUSTOM );
            qaRoles = enumServices.GetCredentialAgentQAActions( EnumerationType.CUSTOM, "Credential" );
            break;

        case EditorSettings.EditorType.ORGANIZATION:
            mainProfileType = "Organization";
            roles = enumServices.GetAllAgentReverseRoles( EnumerationType.CUSTOM );
            qaRoles = enumServices.GetCredentialAgentQAActions( EnumerationType.CUSTOM, "Organization" );
            break;
        case EditorSettings.EditorType.LEARNINGOPPORTUNITY:
            mainProfileType = "LearningOpportunity";
            roles = enumServices.GetLearningOppAgentRoles( EnumerationType.CUSTOM );
            qaRoles = enumServices.GetCredentialAgentQAActions( EnumerationType.CUSTOM, "LearningOpportunity" );
            break;
        case EditorSettings.EditorType.ASSESSMENT:
            mainProfileType = "Assessment";
            roles = enumServices.GetAssessmentAgentRoles( EnumerationType.CUSTOM );
            qaRoles = enumServices.GetCredentialAgentQAActions( EnumerationType.CUSTOM, "Assessment" );
            break;
        default: break;
    };

    var industryHeaders = new Dictionary<string, string>() { { "0", "Select an Industry" } };
    EnumerationServices.NAICS_Categories_Enumeration().Items.ForEach( m => industryHeaders.Add( m.CodeId.ToString(), m.Name ) );

    var occupationHeaders = new Dictionary<string, string>() { { "0", "Select an Occupation" } };
    EnumerationServices.SOC_Categories_Enumeration().Items.ForEach( m => occupationHeaders.Add( m.CodeId.ToString(), m.Name ) );

    var cipHeaders = new Dictionary<string, string>() { { "0", "Select a Classification" } };
    EnumerationServices.CIPS_Categories_Enumeration().Items.ForEach( m => cipHeaders.Add( m.CodeId.ToString(), m.Name ) );

    var queryParams = Request.QueryString.Keys.Cast<string>().ToDictionary( k => k, v => Request.QueryString[ v ] );
}

@helper RenderTextInput( TextInputSettings settings )
{
    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", settings )
}
@helper RenderTextInput( string property, string label, TextInputSettings.InputType type, string guidance, bool isRequired = false, int minimumLength = 0 )
{
    @RenderTextInput( new TextInputSettings() {
        Property = property,
        Label = label,
        Type = type,
        Guidance = guidance,
        RequireValue = isRequired,
        MinimumLength = minimumLength
    } )
}
@helper RenderListInput( ListInputSettings settings )
{
    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", settings )
}
@helper RenderListInput( string property, string label, ListInputSettings.InterfaceType type, string guidance, List<EnumeratedItem> enumItems, List<CodeItem> codeItems = null, bool useSmallLabel = true, bool hasOtherBox = false ) 
{ 
    @RenderListInput( new ListInputSettings()
    {
        Property = property,
        Label = label,
        Type = type,
        Guidance = guidance,
        EnumItems = enumItems == null ? new List<EnumeratedItem>() : enumItems,
        CodeItems = codeItems == null ? new List<CodeItem>() : codeItems,
        HasOtherBox = hasOtherBox,
        UseSmallLabel = useSmallLabel
    } )
}
@helper RenderTextValueInput( TextValueEditorSettings settings )
{
    @Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", settings )
}
@helper RenderTextValueInput( string property, string label, TextInputSettings.InputType type, string guidance, string addText, string valuePlaceholder, string parentRepeaterId = "{repeaterID}", bool useSmallLabel = true ) 
{ 
    @RenderTextValueInput(new TextValueEditorSettings() 
    {
        Property = property,
        Label = label,
        ValueType = type,
        Guidance = guidance,
        AddText = addText,
        ValuePlaceholder = valuePlaceholder,
        ParentRepeaterId = parentRepeaterId,
        UseSmallLabel = useSmallLabel
    } )
}
@helper RenderProfileInput( ProfileSettings settings )
{
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", settings )
}
@helper RenderProfileInput( string property, string label, string profileName, string guidance, string addText, string parentRepeaterId = "{repeaterID}", bool useSmallLabel = true ) 
{ 
    @RenderProfileInput( new ProfileSettings()
    {
        Property = property,
        Label = label,
        Profile = profileName,
        Guidance = guidance,
        AddText = addText,
        ParentRepeaterId = parentRepeaterId,
        UseSmallLabel = useSmallLabel
    } )
}
@helper RenderMicroSearchInput( MicroSearchSettings settings )
{
    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", settings )
}
<script type="text/javascript">
    /* Server and global variables */
    var initialData = @Html.Raw(  Newtonsoft.Json.JsonConvert.SerializeObject( Model.Data ) );
    var mainProfileType = "@mainProfileType";
    var mainProfileId = @Model.MainProfile.Id;
    var mainProfileRowId = "@Model.MainProfile.RowId";
   
    var repeaterID = 1;
    var editZIndex = 100;

</script>
<script type="text/javascript">
   
    /* Initialization */
    $(document).ready(function() {
        doInitialLoad();
        initializeProfiles();
        loadLinkedTab();

        setupStickyHeader();

        $('[title!=""]').qtip(); // Grab elements with a title attribute that isn't blank.

        /* qTip2 call below will grab this JSON and use the firstName as the content */
        $('.hasToolTip').qtip({
            content: {
                text: function(event, api) {
                    $.ajax({
                        url: "@Url.Content( "~/ajax/GetToolTipTermData")" , // URL to the JSON file
                        type: 'GET', // POST or GET
                    dataType: 'json', // Tell it we're retrieving JSON
                    data: {
                        // term: "ceterms:Credential" // Pass through the term of the current element matched by '.selector'
                        term: $(this).attr('title')
                    },
                    })
                    .then(function(data) {
                        /* Process the retrieved JSON object
                         *    Retrieve a specific attribute from our parsed
                         *    JSON string and set the tooltip content.
                         */
                        var content = "<p><b>{name}</b></p><p>{description}</p><i>{term}</i>"
                                    .replace(/{name}/g,data.data.Name)
                                    .replace(/{description}/g,data.data.Definition)
                                    .replace(/{term}/g,data.data.Term)
                        console.log("term", content);
                        // Now we set the content manually (required!)
                        api.set('content.text', content);
                    }, function(xhr, status, error) {
                        // Upon failure... set the tooltip content to the status and error value
                        api.set('content.text', status + ': ' + error);
                    });

            return 'Loading...' // Set some initial loading text
        }
        }
        });

 
        
    });

    function setupStickyHeader(){
        //Toggle sticky header on scroll
        var jqWindow = $(window); //Don't recreate the $(window) object every single time the user scrolls, instead just create it here
        var sticky = $(".editorHeader"); //This would be the part you want to make sticky
        $(jqWindow).on("scroll", function () { //On scroll..
            if (jqWindow.scrollTop() > 100) { //If the window is scrolled past 0 (or whatever value)…
                sticky.addClass("stickyHeader"); //Add a class to the div
            }
            else { //Otherwise…
                sticky.removeClass("stickyHeader"); //Remove the class
            }
        });
    }
    //Load initial data
    function doInitialLoad(){
        console.log( initialData );
        //injectProfile();
        writeProfile($(".mainProfile"), initialData);
    }
    //

    //Called every time a new profile is added
    function initializeProfiles(){
        setupTabs();
        setupRadioSelectors();
    }
    //

    //If a particular profile was linked to, attempt to display it
    function loadLinkedTab(){
        var tab = "@Request.QueryString[ "tab" ]";

        if(tab != ""){
            $(".mainProfile > .tabs input[data-properties*=" + tab + "]").first().trigger("click");
        }
    }
    //

    //Setup tabs
    function setupTabs(){
        $(".hasTabs").not(".hasTabsInitialized").each(function() {
            var box = $(this);
            box.addClass("hasTabsInitialized");
            var buttons = box.find(".tabs input");
            var items = box.find(".tabItem");
            buttons.each(function() {
                var button = $(this);
                button.on("click", function() {
                    buttons.removeClass("selected");
                    button.addClass("selected");
                    var targets = button.attr("data-properties").split(",");
                    items.removeClass("selected");
                    for(var i in targets){
                        items.filter("[data-property=" + targets[i] + "]").addClass("selected");
                    }
                })
            });
            buttons.first().trigger("click");
        });
    }
    //

    function setupRadioSelectors(){
        $(".radioSelector").not(".radioSelectorInitialized").each(function(){
            var selector = $(this);
            selector.addClass("radioSelectorInitialized");
            var sections = selector.find(".radioSection");
            sections.each(function() {
                var section = $(this);
                section.find(".radioButton input[type=radio]").on("change", function() {
                    sections.removeClass("selected");
                    section.addClass("selected");
                });
            });
        });
    }
    //
    //
    function registerEntity() {
        modal.confirm(
            "Register This Data",
            "Are you sure that you want to register ME",
            function () {
                var context = {
                    IsTopLevel: true,
                    Profile: { Id: @Model.MainProfile.Id, RowId: "@Model.MainProfile.RowId", TypeName: "@mainProfileType" }
                };
                doAjax("Editor", "Register", context, success_Publish, null, true);
            },
            function() {}
        );
    }
    //
    function success_Publish(message, result){
        if(message.valid){
            consoleMessage.addSuccessMessage("Register was successful", "", 2000);
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 10000);
        }
    }
    //
    function unRegisterEntity() {
        modal.confirm(
            "Un-Register from the Metadata Registry",
            "Are you sure that you want to remove document from the Metadata Registry?",
            function () {
                var context = {
                    IsTopLevel: true,
                    Profile: { Id: @Model.MainProfile.Id, RowId: "@Model.MainProfile.RowId", TypeName: "@mainProfileType" }
                };

                doAjax("Editor", "Unregister", context, success_unRegister, null, true);
            },
            function() {}
        );
    }
    //
    function success_unRegister(message, result){
        if(message.valid){
            consoleMessage.addSuccessMessage("Remove was successful", "", 2000);
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 5000);
        }
    }
    //
</script>

<script type="text/javascript">
    /* Functions that vary based on the main object */
    function doGlobalSave(button){

        var profileData = readProperties($(".mainProfile"));

        profileData.LinkTest = { Test: "Success" };

        //Assemble object to send to the server
        var data = {
            Context: getProfileContext(0),
            Profile: JSON.stringify(profileData)
        };

        //Do save
        doAjax("Editor", "SaveProfile", data, success_doGlobalSave, $(button), null, true);
    }
    //

    function doGlobalPreview(){
        window.open("@Url.Content( "~/detail/" )" + mainProfileType + "/" + mainProfileId);
        @*
        switch(mainProfileType){
            case "Credential":
            case "Organization":
                window.open("@Url.Content( "~/" )" + mainProfileType + "management/detail2/" + mainProfileId);
                break;
            case "Assessment":
            case "LearningOpportunity":
                window.open("@Url.Content( "~/profile/" )" + mainProfileType + "/" + mainProfileId );
                break;
            default: break;
        }
        *@
    }
    //

    function doGlobalDelete(button){
        $(".mainProfile").addClass("aboutToDelete");
        modal.confirm("Delete All Data", "Are you sure you want to delete <b>all</b> data about @( string.IsNullOrWhiteSpace( Model.MainProfile.Name ) ? "this " + Model.MainProfile.TypeName : Model.MainProfile.Name )? This action cannot be undone!",
            function() {
                var context = getProfileContext(0);
                doAjax("Editor", "DeleteProfile", context, success_doGlobalDelete, $(button), null, true);
            },
            function() {
                $(".mainProfile").removeClass("aboutToDelete");
            }
        );
    }
    //

</script>
<script type="text/javascript">
    /* Profile functions */
    //Select a profile box via what is effectively a concatenated ID
    function getProfileBox(editorRepeaterID, profileProperty){
        var profile = getProfile(editorRepeaterID);
        return profile.find(".profileBox[data-property=" + profileProperty + "]");
    }
    //

    function getProfile(targetRepeaterID){
        return $(".profile[data-repeaterID=" + targetRepeaterID + "]");
    }
    //

    function getProfileContext(targetRepeaterID){
        var profile = getProfile(targetRepeaterID);
        var parentEditor = getProfile(profile.attr("data-parentRepeaterID"));
        return {
            IsTopLevel: profile.hasClass("mainProfile"),
            Main: { Id: mainProfileId, RowId: mainProfileRowId, TypeName: mainProfileType },
            Parent: { Id: parseInt(parentEditor.attr("data-recordID")), RowId: parentEditor.attr("data-recordRowID"), TypeName: parentEditor.attr("data-profile") },
            Profile: { Id: parseInt(profile.attr("data-recordID")), RowId: profile.attr("data-recordRowID"), TypeName: profile.attr("data-profile"), Property: profile.attr("data-property") }
        };
    }
    //

    function getProfileListItem(targetRepeaterID){
        return $(".profileList .profileItem[data-repeaterID=" + targetRepeaterID + "]");
    }
    //

    //Add a new profile
    function addNewProfile(parentRepeaterID, property, button){
        var profileBox = getProfileBox(parentRepeaterID, property);

        //Don't add to an unsaved profile
        var parentEditor = getProfile(parentRepeaterID);
        if(parentEditor.attr("data-recordID") == "0"){
            consoleMessage.addErrorMessage("You must save the profile before adding or editing this item.");
            return;
        }

        var profile = addProfile(parentRepeaterID, property, 0, "@Guid.Empty.ToString()", "New Unsaved Profile");
        consoleMessage.addSuccessMessage("Creating new profile...", "", 1000);
        editProfile(profile.attr("data-repeaterID"), button);

        return profile;
    }
    //

    //Add a profile (new or existing) via parameters
    function addProfile(editorRepeaterID, profileProperty, profileRecordID, profileRecordRowID, profileName ){
        try {
            var box = getProfileBox(editorRepeaterID, profileProperty);
            var profileType = box.attr("data-profile");
            var list = box.find(".profileList"); //List of references to existing profiles
            var profiles = $("#profiles"); //Global list of profile editors
            var editorTemplate = $("#template_" + profileType).html();
            var listTemplate = $("#template_profileListItem").html();

            //Add the editor to the profiles list
            var profile = $(editorTemplate
                .replace(/{parentRepeaterID}/g, editorRepeaterID)
                .replace(/{Property}/g, profileProperty)
                .replace(/{RecordId}/g, profileRecordID)
                .replace(/{RecordRowId}/g, profileRecordRowID)
                .replace(/{parentEditorName}/g, box.attr("data-parentEditor"))
                .replace(/{editorName}/g, box.attr("data-property") + "_" + repeaterID)
                .replace(/{repeaterID}/g, repeaterID)
                .replace(/{profileTitle}/g, box.attr("data-profileTitle"))
            ).appendTo(profiles);

            //Add a reference to the references list
            list.append(listTemplate
                .replace(/{Name}/g, profileName)
                .replace(/{repeaterID}/g, repeaterID)
                .replace(/{RecordId}/g, profileRecordID)
                .replace(/{RecordRowId}/g, profileRecordRowID)
            );

            //Update repeater ID
            repeaterID++;

            //Do basic initialization
            initializeProfiles();
            profile.find(".microSearchBox").each(function() {
                initializeMicroSearch($(this));
            });

            //Return the profile
            return profile;
        }
        catch(e){
            console.log("Failed to add profile!", e);
        }
    }
    //

    function editProfile(targetRepeaterID, button){
        //Identify the target
        var context = getProfileContext(targetRepeaterID);

        //Don't allow saving a profile if the parent isn't saved yet
        if(context.Parent.Id == 0){
            consoleMessage.addErrorMessage("You must save the profile before adding or editing this item.");
            return;
        }

        //Get the data - server handles immediate saves of certain new profiles
        doAjax("Editor", "GetProfile", context, success_getProfile, $(button), targetRepeaterID, true);

    }
    //

    //Show a profile editor
    function showProfile(targetRepeaterID){
        var profiles = $("#profiles");
        var profile = profiles.find(".profile[data-repeaterID=" + targetRepeaterID + "]");
        $("#overlay").attr("data-visible", "true");
        profile.attr("data-visible", "true").css("z-index", editZIndex);
        editZIndex++;
        if(editZIndex > 9000){
            editZIndex = 100;
            profiles.find(".profile").each(function() {
                $(this).css("z-index", 100);
            });
        }
    }
    //

    //Save changes to a profile
    function saveProfile(targetRepeaterID, button, postAutoSaveFunction, closeProfile, addAnother){
        var editor = getProfile(targetRepeaterID);
        var profileData = readProperties(editor);

        //Assemble object to send to the server
        var data = {
            Context: getProfileContext(targetRepeaterID),
            Profile: JSON.stringify(profileData)
        };

        //Do save
        doAjax("Editor", "SaveProfile", data, success_saveProfile, $(button), { targetRepeaterID: targetRepeaterID, postAutoSaveFunction: postAutoSaveFunction, closeProfile: closeProfile, addAnother: addAnother }, true);
    }
    //

    //Cancel editing a profile
    function cancelProfile(targetRepeaterID){
        modal.confirm("Cancel Changes", "Really cancel changes? You will lose any unsaved data!",
            function() {
                var profiles = $("#profiles");
                var profile = profiles.find(".profile[data-repeaterID=" + targetRepeaterID + "]");

                //Remove the profile if its ID was zero
                if(profile.attr("data-recordID") == "0"){
                    profile.remove();
                    $(".profileList .profileItem[data-repeaterID=" + targetRepeaterID + "]").remove();
                }

                closeProfile(targetRepeaterID);

                //TODO: re-render this profile from loaded data

            }
            ,
            function() {
                return;
            }
        );
    }
    //

    //Close an open profile after saving or cancelling
    function closeProfile(targetRepeaterID){
        var profiles = $("#profiles");
        var profile = profiles.find(".profile[data-repeaterID=" + targetRepeaterID + "]");

        //Hide the profile
        profile.attr("data-visible", "false");

        //Hide the overlay if no more profiles are being edited
        var stillEditing = false;
        profiles.find(".profile").each(function() {
            if($(this).attr("data-visible") == "true"){
                stillEditing = true;
            }
        });
        if(!stillEditing){
            $("#overlay").attr("data-visible", "false");
        }

    }
    //

    //Delete a profile
    function deleteProfile(targetRepeaterID, button){
        var profile = $("#profiles .profile[data-repeaterID=" + targetRepeaterID + "]");
        var listItem = getProfileListItem(targetRepeaterID);
        profile.addClass("aboutToDelete");
        listItem.addClass("aboutToDelete");
        modal.confirm("Delete Profile", "Really delete " + listItem.find(".name").text() + "? This cannot be undone!",
            function() {
                //Get context
                var context = getProfileContext(targetRepeaterID);

                //Do the delete
                doAjax("Editor", "DeleteProfile", context, success_deleteProfile, $(button), targetRepeaterID, true);
            }
            ,
            function() {
                profile.removeClass("aboutToDelete");
                listItem.removeClass("aboutToDelete");
            }
        );
    }
    //
</script>
<script type="text/javascript">
    /* AJAX Functions */

    function showSpinner(){
        $("#waitWrapper").stop().fadeIn(250);
    }
    //

    function hideSpinner() {
        $("#waitWrapper").stop().fadeOut(250);
    }
    //

    function doAjax(controller, method, data, success, button, passThrough, useSpinner) { 
        //Disable the button
        if(button){ 
            button.attr("data-originalValue", button.attr("value")).attr("value", "Working...").prop("disabled", true);
        }

        //Show spinner if appropriate
        if(useSpinner){
            showSpinner();
        }

        //Make the request
        $.ajax({
            url: "@Url.Content( "~/" )" + controller + "/" + method,
            async: true,
            headers: { "Accept": "application/json", "Content-type": "application/json; charset=utf-8" },
            dataType: "json",
            type: "POST",
            data: JSON.stringify(data),
            success: function (message) {
                console.log("Response: ", message);
                if (typeof (success) == "function") {
                    success(message, passThrough);
                }
            }
        }).always(function() {
            //Reenable the button
            if(button){
                button.attr("value", button.attr("data-originalValue")).prop("disabled", false);
            }
            hideSpinner();
        });
    }
    //

    function success_doGlobalSave(message, passThrough){
        if(message.valid){
            //Update Editor
            mainProfileId = message.extra.Id;
            mainProfileRowId = message.extra.RowId;
            var editor = $("#editor .mainProfile");
            editor.attr("data-recordID", message.extra.Id);
            editor.attr("data-recordRowID", message.extra.RowId);
            writeProfile(editor, message.data);

            //Inform user
            consoleMessage.addSuccessMessage("Save successful", "", 2000);

            //Update progress
            updateProgress();
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 0);
        }
    }
    //

    function success_doGlobalDelete(message, passThrough){
        if(message.valid){
            consoleMessage.addSuccessMessage("This data has been deleted");
            setTimeout(function() { 
                window.location.href = "@Url.Content("~/Search")";
            }, 2000);
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 5000);
        }
    }
    //

    function success_getProfile(message, passThrough){
        if(message.valid){
            var profile = getProfile(passThrough);

            try {
                writeProfile(profile, message.data);
            }
            catch(e){
                console.log("Error injecting data into profile!", e);
                consoleMessage.addErrorMessage("Error getting profile data.");
            }

            showProfile(passThrough);
        }
        else{
            consoleMessage.addErrorMessage(message.status, "", 5000);
        }
    }
    //

    function success_saveProfile(message, passThrough){
        if(message.valid){
            //Update Editor
            var editor = getProfile(passThrough.targetRepeaterID);
            editor.attr("data-recordID", message.extra.Id);
            editor.attr("data-recordRowID", message.extra.RowId);

            //Write data to the profile
            writeProfile(editor, message.data, true);

            //Update list item
            var listItem = getProfileListItem(passThrough.targetRepeaterID);
            listItem.find(".name").text(message.extra.Name);

            //If the save was the result of an auto save, perform the next action
            if(passThrough.postAutoSaveFunction){
                passThrough.postAutoSaveFunction();
            }
            //Otherwise...
            else {
                //Inform user
                consoleMessage.addSuccessMessage("Save successful", "", 2000);
            }


            //Optionally, close the editor
            if(passThrough.closeProfile){
                closeProfile(passThrough.targetRepeaterID);
            }

            //Optionally, add another immediately
            if(passThrough.addAnother){
                addNewProfile(editor.attr("data-parentRepeaterID"), editor.attr("data-property"), null);
            }

            //Update progress
            updateProgress();
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 5000);
        }
    }
    //

    function success_deleteProfile(message, passThrough){
        if(message.valid){
            var editor = getProfile(passThrough);
            var listItem = getProfileListItem(passThrough);

            //Inform user
            consoleMessage.addSuccessMessage("Delete successful", "", 2000);
            
            //Close the editor if it's open
            closeProfile(passThrough);

            //Remove the HTML
            editor.remove();
            listItem.remove();
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 5000);
        }
    }
    //

    function success_addInitialMicrosearchResults(message, passThrough){
        if(message.valid){
            renderMicroSearchResults(message.data, passThrough, true, true);
        }
        else {
            console.log("Error updating micro search: ", message.status)
        }
    }
    //
</script>
<script type="text/javascript">
    /* Read functions */
    function readProperties(profile){
        //Get properties
        var properties = profile.find(".propertyInput");
        var data = {
            Id: parseInt(profile.attr("data-recordID")),
            RowId: profile.attr("data-recordRowID")
        };
        properties.each(function() {
            var property = $(this);
            data[property.attr("data-property")] = readProperty(property);
        });
        console.log("Data", data);

        //Get "other" boxes
        var others = profile.find(".otherInput");
        var otherData = {};
        var hasOtherData = false;
        others.each(function(){
            var other = $(this);
            otherData[other.attr("data-otherproperty")] = other.val();
            hasOtherData = true;
        });
        if(hasOtherData){
            data.Other = otherData;
        }

        //Get MicroSearches that don't do immediate saves
        var searches = profile.find(".microSearchBox[data-doAjaxSave=false]").each(function() {
            var search = $(this);
            data[search.attr("data-property")] = readMicroSearch(search.attr("data-microsearchname"));
        });

        //Special handling for TextValueProfiles
        var textValues = profile.find(".textValueBox").each(function() {
            var textValue = $(this);
            data[textValue.attr("data-property")] = readTextValues(textValue.attr("data-textValueName"));
        });

        //Special handling for selectors (used with durations)
        var selectors = profile.find(".radioSelector");
        selectors.each(function() {
            var selector = $(this);
            data[selector.attr("data-sectionProperty")] = selector.find(".radioSection [data-sectionValue]:checked").attr("data-sectionValue");
        });

        //Return data
        return data;
    }
    //

    function readProperty(property){
        switch(property.attr("data-type")){
            case "text":
            case "url":
            case "date":
                return property.val();
            case "number":
                return readNumber(property.val());
            case "boolean":
                return property.prop("checked");
            case "select":
                return readSelect(property);
            case "checkboxlist":
                return readCheckboxlist(property);
            case "radiolist":
                return readRadioButtonlist(property);
            case "duration":
                return readDuration(property);
            default: 
                console.log("Unable to read property: ", property);
                return null;
        }
    }
    //

    function readNumber(text){
        try {
            //Strip all non-numeric characters
            var numbers = "1234567890.";
            var cleaned = [];
            for(var i in text){
                if(numbers.indexOf(text[i]) > -1){
                    cleaned.push(text[i]);
                }
            }
            text = cleaned.join("");
            //Parse the value and return it
            var data = parseFloat(text);
            if(isNaN(data)){
                return 0;
            }
            return data;
        }
        catch (e) { 
            return 0;
        }
    }
    //

    function readSelect(property){
        var value = property.find("option:selected").attr("value");
        if(property.attr("data-valuetype") == "number"){
            return readNumber(value);
        }
        else {
            return value;
        }
    }
    //

    function readCheckboxlist(property, single){
        var items = [];
        property.find("input[type=checkbox]:checked,input[type=radio]:checked").each(function(){
            switch(property.attr("data-valuetype")){
                case "number":
                    items.push(parseInt($(this).val()));
                    break;
                default:
                    items.push($(this).val());
                    break;
            }
        });
        if (single && items.length > 0)
            return items[0];
        else
            return items;
    }
    //

    function readRadioButtonlist(property){
        var items = [];
        property.find("input[type=radio]:checked").each(function(){
            switch(property.attr("data-valuetype")){
                case "number":
                    items.push(parseInt($(this).val()));
                    break;
                default:
                    items.push($(this).val());
                    break;
            }
        });
        if (items.length > 0)
            return items[0];
        else
            return "";
    }
    //

    function readDuration(property){
        var data = {};
        property.find("[data-subproperty]").each(function() {
            var subproperty = $(this);
            var value = subproperty.val().trim();
            data[subproperty.attr("data-subproperty")] = value.length == 0 ? 0 : isNaN(parseInt(value)) ? 0 : parseInt(value);
        });
        return data;
    }
    //

</script>
<script type="text/javascript">
    /* Write functions */
    function writeProfile(editor, properties, skipTextValues){
        //Write attributes
        editor.attr("data-RecordID", properties.Id);
        editor.attr("data-RecordRowID", properties.RowId);
        //Write properties
        writeProperties(editor, properties);
        //Write profile links
        writeProfileLinks(editor, properties);
        //Write MicroSearches
        writeMicroProfiles(editor, properties);
        //Handle TextValueProfiles
        writeTextValues(editor, properties);
        //Handle special conditions
        writeProfileConditions(editor, properties);
        //Handle last updated date
        writeProfileUpdate(editor, properties);
    }
    //

    function writeProfileLinks(editor, properties){
        var profiles = editor.find(".profileBox");
        profiles.each(function() {
            var profile = $(this);

            //Remove existing html
            var existing = profile.find(".profileItem");
            existing.each(function() {
                var exist = $(this);
                getProfile(exist.attr("data-repeaterID")).remove();
                exist.remove();
            });

            //Replace with new html
            var matchingData = properties[profile.attr("data-property")];
            if(typeof(matchingData) != "undefined" && matchingData != null){
                for(var i in matchingData){
                    addProfile(editor.attr("data-repeaterID"), profile.attr("data-property"), matchingData[i].Id, matchingData[i].RowId, matchingData[i].Name );
                }
            }
        });
    }
    //

    function writeProperties(editor, properties){
        //Write inputs
        var inputs = editor.find(".propertyInput");
        inputs.each(function() {
            var input = $(this);
            var matchingData = properties[input.attr("data-property")];
            if(typeof(matchingData) != "undefined" && matchingData != null){
                writeProperty(input, matchingData);
            }
            else {
                //Clear input
                try { input.prop("checked", false); } catch(e){}
                try { input.val("").trigger("change"); } catch(e){}
                try { input.find("option[value=0]").prop("selected",true).parent().trigger("change"); } catch(e){}
                try { input.find("input[type=checkbox]").prop("checked", false); } catch(e){}
            }
        });
        
        //Write "other" fields
        var others = editor.find(".otherInput");
        others.each(function() {
            var other = $(this);
            try {
                other.val(properties.Other[other.attr("data-otherproperty")]);
            }
            catch(e) {
                console.log("Unable to write \"Other\" property:");
                console.log("Input:", other);
                console.log("Data:", properties);
            }
        });
    }
    //

    function writeProperty(input, data){
        switch(input.attr("data-type")){
            case "text":
            case "url":
            case "date":
                input.val(data);
                break;
            case "number":
                if(data != 0 && data != "0") {
                    input.val(data);
                }
                break;
            case "boolean":
                input.prop("checked", data);
                if(data && input.attr("data-enableuncheck") == "false"){
                    input.prop("disabled", true);
                }
                break;
            case "select":
                input.find("option[value=" + data + "]").prop("selected", true);
                break;
            case "checkboxlist":
                writeCheckboxlist(input, data);
                break;
            case "radiolist":
                writeRadioList(input, data);
                break;
            case "duration":
                writeDuration(input, data);
                break;
            default:
                console.log("Unable to write property:");
                console.log("Input:", input);
                console.log("Data:", data);
                break;
        }
    }
    //

    function writeCheckboxlist(input, data){
        for(var i in data){
            input.find("input[type=checkbox][value=" + data[i] + "]").prop("checked", true);
        }
    }
    //
    function writeRadioList(input, data){
        if (data != undefined || data != "") 
            input.find("input[type=radio][value=" + data + "]").prop("checked", true);

    }
    function writeDuration(input, data){
        for(var i in data){
            input.find("[data-subproperty=" + i + "]").val(data[i]);
        }
        
    }
    //

    function writeMicroProfiles(editor, properties){
        var searches = editor.find(".microSearchBox");
        searches.each(function() {
            var box = $(this);
            //Initialize the search if it isn't already
            initializeMicroSearch(box);
            //Continue
            var matchingData = properties[box.attr("data-property")];
            if(typeof(matchingData) == "object"){
                //Ensure data is an array
                matchingData = typeof(matchingData.length) == "undefined" ? [matchingData] : matchingData;
                if(matchingData.length > 0){
                    //Filter out any empty objects
                    var finalData = [];
                    for(var i in matchingData){
                        if(matchingData[i].Id != 0 || matchingData[i].RowId != "@Guid.Empty.ToString()"){
                            finalData.push(matchingData[i]);
                        }
                    }
                    //If there are any legitimate objects, continue
                    if(finalData.length > 0){
                        //Setup the context
                        var data = {
                            context: getProfileContext(editor.attr("data-repeaterID")),
                            searchType: box.attr("data-searchType"),
                            items: finalData
                        };
                        //Get the data
                        doAjax("Editor", "GetMicroProfiles", data, success_addInitialMicrosearchResults, null, box.attr("data-microsearchName"), false);
                    }
                }
            }
        });
    }
    //

    function writeProfileConditions(editor, properties){
        switch(editor.attr("data-profile")){
            case "DurationProfile":
                editor.find("[data-sectionProperty=IsRange] [data-sectionValue=" + properties.IsRange + "]").prop("checked", true).trigger("change");
                break;
            default: break;
        }
    }
    //

    function writeProfileUpdate(editor, properties){
        var historyBox;
        if(editor.hasClass("mainProfile")){
            historyBox = $("#globalButtons .profileHistory");
        }
        else {
            historyBox = editor.find(".profileHistory");
        }
        try {
            if(historyBox.length > 0 && properties.LastUpdatedUserName != ""){
                historyBox.attr("data-hasUpdate", "true");
                historyBox.find(".profileHistoryUser").html(properties.LastUpdatedUserName);
                historyBox.find(".profileHistoryTimestamp").html(properties.LastUpdatedTimestamp);
            }
        }
        catch (e) {}
    }
    //
</script>
<script type="text/javascript"> 
    /* Page functions */

    //Update the progress gauge
    function updateProgress(){
        //Detect profile progress

        //Update gauge

    }
    //

</script>   
<script type="text/javascript">
    /* Rendering functions */
</script>
<script type="text/javascript">
    /* MicroSearch V2 Functions */
    var microSearchTimeouts = [];
    var resultID = 0;

    //Initialize MicroSearch
    function initializeMicroSearch(box){
        if(!box.hasClass("microSearchInitialized")){
            box.addClass("microSearchInitialized");

            box.find(".microSearchFilter").not("[type=text]").on("change", function() {
                updateMicroSearch(box.attr("data-microSearchName"), null);
            })
            box.find(".microSearchFilter[data-type=text]").on("keyup", function(e){
                updateMicroSearch(box.attr("data-microSearchName"), e); 
            });
        }
    }
    //

    //Reset timeout
    function updateMicroSearch(name, event){
        clearTimeout(microSearchTimeouts[name]);
        microSearchTimeouts[name] = setTimeout(function() {
            doMicroSearch(name);
        }, 800);
    }
    //

    //Get a MicroSearch Box
    function getMicroSearchBox(name){
        return $(".microSearchBox[data-microsearchname='" + name + "']");
    }
    //

    //Set a MicroSearch status
    function setMicroSearchStatus(name, message, status){
        getMicroSearchBox(name).find(".microSearchStatus").attr("data-status", status).html(message);
    }
    //

    //Do a MicroSearch
    function doMicroSearch(name, isPaging){
        var box = getMicroSearchBox(name);
        var searchType = box.attr("data-searchType");
        var filters = [];

        //Get filters
        box.find(".microSearchFilter").each(function() {
            var filter = $(this);
            var item = { Name: filter.attr("data-filterName") };
            switch(filter.attr("data-type")){
                case "text":
                    item.Value = filter.val().trim();
                    break;
                case "select":
                    item.Value = filter.find("option:selected").attr("value");
                    break;
                default: break;
            }

            filters.push(item);
        });

        //Reset paging unless the search is happening because another page was selected
        var pageNumber = isPaging ? parseInt(box.attr("data-pageNumber")) : 1;

        //Construct the query
        var query = { SearchType: searchType, Filters: filters, PageNumber: pageNumber, pageSize: parseInt(box.attr("data-pageSize")) };

        //Check for identical query to avoid duplicate searches
        var stringified = JSON.stringify(query);
        if(stringified == box.attr("data-previous")){
            console.log("Skipping identical MicroSearch:", query);
            return;
        }

        //Update previous query data
        box.attr("data-previous, stringified");

        //Update paging in the box if it was reset
        if(!isPaging){
            box.attr("data-pageNumber", pageNumber);
        }

        //Do the search
        console.log("Doing MicroSearch:", query);
        setMicroSearchStatus(name, "Searching...", "searching");
        doAjax("Editor", "DoMicroSearch", query, success_doMicroSearch, null, name, false);
    }
    //

    //Successfully complete a MicroSearch
    function success_doMicroSearch(message, name){
        console.log("MicroSearch complete:", message);
        if(message.valid){
            renderMicroSearchResults(message.data, name, false, true);
            renderMicroSearchPaging(name, message.extra);
            setMicroSearchStatus(name, "Found " + message.extra + " Results", "success");
        }
        else {
            consoleMessage.addErrorMessage("Error performing Search: " + message.status, "", 5000);
            setMicroSearchStatus(name, "Error: " + message.status, "error");
        }
    }
    //

    //Render MicroSearch results
    function renderMicroSearchResults(data, name, isSaved, isOverwrite){
        var box = getMicroSearchBox(name);

        //Get the template and the box it goes in
        var templateName = box.attr("data-profileTemplate");
        var template = $("#template_MicroProfile_" + templateName).html();
        var resultsBox = box.find(".microSearchResults");
        var savedBox = box.find(".microSearchSavedItemsList");

        var targetBox = isSaved ? savedBox : resultsBox;

        //Empty the template if necessary
        if(isOverwrite){
            targetBox.html("");
        }

        //Render the properties
        for(var i in data){
            var item = data[i];
            var html = template
                .replace(/{rawData}/g, JSON.stringify(item))
                .replace(/{resultID}/g, resultID)
                .replace(/{Selectors}/g, JSON.stringify(item.Selectors))
                .replace(/{Id}/g, item.Id)
                .replace(/{Name}/g, item.Name)
                .replace(/{Description}/g, (item.Description || "").toLowerCase() == (item.Name || "").toLowerCase() ? "" : (item.Description || ""))
                .replace(/{microSearchName}/g, box.attr("data-microsearchName"))
                .replace(/{profileType}/g, box.attr("data-profileType"))
                .replace(/{Properties}/g, renderMicrosearchProperties(item.Properties))
                .replace(/{rawProperties}/g, JSON.stringify(item.Properties));

            for(var j in item.Properties){
                html = html.replace(new RegExp("{" + j + "}", "g"), item.Properties[j]);
            }

            //Update the box
            targetBox.append(html);

            //Show/hide the "no saved items" message
            if(isSaved){
                if(targetBox.find(".microProfile").length > 0){
                    box.find(".microSearchNoItems").hide();
                }
                else {
                    box.find(".microSearchNoItems").show();
                }
            }

            //Update the result ID
            resultID++;
        }
    }
    //

    //Render MicroSearch Paging
    function renderMicroSearchPaging(name, totalResults){
        console.log(totalResults);
        var box = getMicroSearchBox(name);
        var pagingBox = box.find(".microSearchPaging");
        var pageButtonTemplate = $("#template_MicroSearch_PageButton").html();
        var pageSize = parseInt(box.attr("data-pageSize"));
        var currentPage = parseInt(box.attr("data-pageNumber"));
        var totalPages = totalResults == 0 ? 0 : Math.ceil(totalResults / pageSize);
        var skips = [1, 5, 10, 20, 30, 40, 50, 75, 100, 1000, totalPages];
        var minRange = currentPage - 2;
        var maxRange = currentPage + 2;

        pagingBox.html("");
        for(var i = 1; i <= totalPages; i++){
            if(skips.indexOf(i) > -1 || (i >= minRange && i <= maxRange)){ 
                pagingBox.append(pageButtonTemplate
                    .replace(/{microSearchName}/g, name)
                    .replace(/{pageNumber}/g, i)
                    .replace(/{current}/g, i == currentPage ? "current" : "")
                );
            }
        }
    }
    //

    //Set MicroSearch Page
    function setMicroSearchPage(name, pageNumber){
        var box = getMicroSearchBox(name);
        box.attr("data-pageNumber", pageNumber);
        doMicroSearch(name, true);
    }
    //

    //Render MicroSearch properties
    function renderMicrosearchProperties(properties){
        var result = "";
        for(var i in properties){
            result = result + "<div data-microproperty=\"" + i + "\">" + properties[i] + "</div>";
        }
        return result;
    }
    //

    //Get selected items from a MicroSearch
    function readMicroSearch(name){
        var box = getMicroSearchBox(name);
        var results = box.find(".microSearchSavedItems .microProfile");
        var staticValues = JSON.parse(box.find(".staticSelectorValues").text());
        var multiple = box.attr("allowMultipleSavedItems") == "true";
        var data = [];
        
        results.each(function() {
            var selectors = JSON.parse( $(this).find(".selectors").text());
            
            //Add/overwrite static values
            for(var i in staticValues){
                selectors[i] = staticValues[i];
            }
            
            data.push(selectors);
        });

        if(multiple){
            return data;
        }
        else {
            return data[0];
        }
    }
    //

    //Copy a MicroSearch Result to the parent profile's fields
    function copyMicroProfile(name, resultID){
        var box = getMicroSearchBox(name);
        var result = box.find("[data-resultID=" + resultID + "]");
        var data = JSON.parse(result.find(".rawProperties").text());
        var profile = getProfile(box.attr("data-parentRepeaterID"));
        writeProfile(profile, data, false);
    }
    //

    //Save a MicroSearch Result
    function saveMicroProfile(name, resultID, button){
        var box = getMicroSearchBox(name);
        var result = box.find("[data-resultID=" + resultID + "]");
        var selectors = JSON.parse(result.find(".selectors").text());
        var staticValues = JSON.parse(box.find(".staticSelectorValues").text());
        var context = getProfileContext(box.attr("data-parentRepeaterID"));
        var searchType = box.attr("data-searchType");
        var property = box.attr("data-property");
        var allowMultipleSavedItems = box.attr("data-allowMultipleSavedItems") == "true";

        //Only continue if immediate save is enabled
        if(box.attr("data-doAjaxSave") != "true"){
            var rawData = JSON.parse(result.find(".rawData").text());
            renderMicroSearchResults([rawData], name, true, !allowMultipleSavedItems);
            return;
        }

        //Add/overwrite static values
        for(var i in staticValues){
            selectors[i] = staticValues[i];
        }

        if(context.Profile.Id == 0 && box.attr("data-autoSaveNewParentProfile") == "true"){
            console.log("Auto-saving parent profile");
            saveProfile(box.attr("data-parentRepeaterID"), button, function() {
                saveMicroProfile(name, resultID, button);   
            }, false);
        }
        else {
            doAjax("Editor", "SaveMicroProfile", { context: context, selectors: selectors, searchType: searchType, property: property, allowMultiple: allowMultipleSavedItems }, success_saveMicroProfile, button, { name: name, resultID: resultID }, false);
        }

    }
    //

    //Successfully save a MicroSearch Result
    function success_saveMicroProfile(message, passThrough){
        var box = getMicroSearchBox(passThrough.name);
        var result = box.find("[data-resultID=" + resultID + "]");
        console.log(message);

        if(message.valid){
            consoleMessage.addSuccessMessage("Selection saved", "", 2000);
            renderMicroSearchResults([message.data], passThrough.name, true, box.attr("data-allowmultiplesaveditems") != "true");
        }
        else {
            consoleMessage.addErrorMessage(message.status);
        }

    }
    //

    //Delete a MicroSearch Result
    function deleteMicroProfile(name, resultID, button){
        var box = getMicroSearchBox(name);
        var result = box.find("[data-resultID=" + resultID + "]");
        var selectors = JSON.parse(result.find(".selectors").text());
        var staticValues = JSON.parse(box.find(".staticSelectorValues").text());
        var context = getProfileContext(box.attr("data-parentRepeaterID"));
        var searchType = box.attr("data-searchType");
        var property = box.attr("data-property");

        //Add/overwrite static values
        for(var i in staticValues){
            selectors[i] = staticValues[i];
        }

        result.addClass("aboutToDelete");
        modal.confirm("Delete Selection", "Really remove this item?",
            function() {
                doAjax("Editor", "DeleteMicroProfile", { context: context, selectors: selectors, searchType: searchType, property: property }, success_deleteMicroProfile, button, { name: name, resultID: resultID }, false);
            },
            function() {
                result.removeClass("aboutToDelete");
            }
        );
    }
    //

    //Successfully delete a MicroSearch Result
    function success_deleteMicroProfile(message, passThrough){
        var box = getMicroSearchBox(passThrough.name);
        var result = box.find("[data-resultID=" + passThrough.resultID + "]");
        console.log(message);

        if(message.valid){
            consoleMessage.addSuccessMessage("Item deleted", "", 2000);
            result.remove();
        }
        else {
            consoleMessage.addErrorMessage(message.status);
        }
    }
    //

    //Reset a MicroSearch query, results, and paging
    function resetMicroSearch(name){
        var box = getMicroSearchBox(name);
        box.find(".microSearchFilter").each(function() {
            try { $(this).val(""); } catch(e) { }
            try { $(this).find("option").first().prop("selected", true); } catch (e) { }
        });
        box.find(".microSearchResults").html("");
        box.find(".microSearchPaging").html("");
        box.attr("data-pageNumber", "1");
        box.attr("data-previous", "");

        setMicroSearchStatus(name, "", "");
    }
    //

    //Create a starter profile and immediately associate it as a result
    function createStarterProfile(name){
        var box = getMicroSearchBox(name);
        var parentRepeaterID = box.attr("data-parentRepeaterID");
        var property = box.attr("data-property");
        var profileTitle = box.attr("data-createProfileTitle");
        var profileType = box.attr("data-profileType");
        var editorTemplate = $("#template_StarterProfile").html();
        var profiles = $("#profiles");
        var searchType = box.attr("data-searchType");

        var profile = $(editorTemplate
            .replace(/{parentRepeaterID}/g, parentRepeaterID)
            .replace(/{Property}/g, property)
            .replace(/{repeaterID}/g, repeaterID)
            .replace(/{RecordId}/g, 0)
            .replace(/{RecordRowId}/g, "@Guid.Empty")
            .replace(/{profileTitle}/g, profileTitle)
            .replace(/{profileType}/g, profileType)
            .replace(/saveProfile/g, "saveStarterProfile")
        ).appendTo(profiles);

        if(box.attr("data-allowMultipleSavedItems") == "true"){
            profile.addClass("allowMultipleSavedItems");
        }

        repeaterID++;

        profile.find("[data-property=ProfileType]").val(profileType);
        profile.find("[data-property=SearchType]").val(searchType);

        showProfile(profile.attr("data-repeaterID"));
    }
    //

    //Save a starter profile
    function saveStarterProfile(targetRepeaterID, button, postAutoSaveFunction, closeProfile){
        var profile = getProfile(targetRepeaterID);
        var context = getProfileContext(targetRepeaterID);
        var data = readProperties(profile);
        var allowMultipleSavedItems = profile.hasClass("allowMultipleSavedItems");
        console.log(data);

        doAjax("Editor", "SaveStarterProfile", { context: context, profile: data, allowMultiple: allowMultipleSavedItems }, success_saveStarterProfile, $(button), {targetRepeaterID: targetRepeaterID, property: profile.attr("data-property")}, true);
    }
    //

    //Successfully save a starter profile
    function success_saveStarterProfile(message, passThrough){
        if(message.valid){
            var profile = getProfile(passThrough.targetRepeaterID);
            var parentEditor = getProfile(profile.attr("data-parentRepeaterID"))
            var parentSearch = parentEditor.find(".microSearchBox[data-property=" + passThrough.property + "]");

            var data = {};
            data[passThrough.property] = message.data;

            renderMicroSearchResults(data, parentSearch.attr("data-microSearchName"), true, parentSearch.attr("data-allowmultiplesaveditems") == "false");

            closeProfile(passThrough.targetRepeaterID);
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 5000);
        }
    }
    //
</script>
<script type="text/javascript">
    /* Text Value Functions */
    var textValueID = 0;

    function getTextValueBox(textValueName){
        return $(".textValueBox[data-textValueName=" + textValueName + "]");
    }
    //

    function addTextValueProfile(textValueName, button){
        var newItem = {
            CodeId: 0,
            CodeOther: "",
            Value: "",
            Id: 0,
            RowId: "@Guid.Empty.ToString()"
        };
        renderTextValueProfiles(textValueName, [newItem], false);
    }
    //

    function readTextValues(textValueName){
        var box = getTextValueBox(textValueName);
        var items = box.find(".textValueProfile");
        var hasSelector = box.attr("data-hasSelector") == "true";
        var hasOther = box.attr("data-hasOther") == "true";
        var requireValue = box.attr("data-requireValue") == "true";
        var requireOther = box.attr("data-requireOther") == "true";
        var data = [];
        
        items.each(function() {
            var item = $(this);
            var value = item.find(".textValueValue").val().trim();
            var other = hasOther ? item.find(".textValueOther").val().trim() : "";
            
            var valid = (requireValue ? value.length > 0 : true) && (requireOther ? other.length > 0 : true) && (value.length > 0 || other.length > 0);

            if(valid){
                data.push({
                    Id: parseInt(item.attr("data-recordID")),
                    RowId: item.attr("data-rowID"),
                    CategoryId: parseInt(box.attr("data-categoryID")),
                    CodeId: hasSelector ? parseInt(item.find(".textValueSelector option:selected").attr("value")) : 0,
                    CodeOther: other,
                    Value: value
                });
            }
        });

        return data;
    }
    //

    function writeTextValues(editor, properties) {
        var profiles = editor.find(".textValueBox");
        profiles.each(function() {
            var box = $(this);
            var matchingData = properties[box.attr("data-property")];

            //If a match is found, wipe the box and rewrite it
            if(typeof(matchingData) != "undefined"){
                if(matchingData == null){
                    matchingData = [];
                }
                renderTextValueProfiles(box.attr("data-textValueName"), matchingData, true);
            }
        });
    }
    //

    function renderTextValueProfiles(textValueName, items, overwrite){
        var box = getTextValueBox(textValueName);
        var hasSelector = box.attr("data-hasSelector");
        var hasOther = box.attr("data-hasOther");
        var valueType = box.attr("data-valueType");
        var valuePlaceholder = box.attr("data-valuePlaceholder");
        var otherPlaceholder = box.attr("data-otherPlaceholder");
        var template = $("#template_TextValueProfile").html();
        var list = box.find(".textValueList");
        var requireValue = box.attr("data-requireValue");
        var requireOther = box.attr("data-requireOther");

        if(overwrite){
            list.html("");
        }

        for(var i in items){
            var item = items[i];
            var profile = $(template
                    .replace(/{textValueName}/g, textValueName)
                    .replace(/{textValueID}/g, textValueID)
                    .replace(/{HasSelector}/g, hasSelector)
                    .replace(/{HasOther}/g, hasOther)
                    .replace(/{ValueType}/g, valueType)
                    .replace(/{ValuePlaceholder}/g, valuePlaceholder)
                    .replace(/{OtherPlaceholder}/g, otherPlaceholder)
                    .replace(/{RequireValue}/g, requireValue)
                    .replace(/{RequireOther}/g, requireOther)
                    .replace(/{RecordId}/g, item.Id)
                    .replace(/{RowId}/g, item.RowId)
                ).appendTo(box.find(".textValueList"));

            if(hasSelector){
                var selectorData = JSON.parse(box.find(".codeValues").text());
                var selector = profile.find(".textValueSelector");
                for(var j in selectorData){
                    selector.append("<option value=\"" + j + "\">" + selectorData[j] + "</option>");
                }
                selector.find("option[value=" + item.CodeId + "]").prop("selected", true);
            }

            if(hasOther){
                profile.find(".textValueOther").val(item.CodeOther);
            }

            profile.find(".textValueValue").val(item.Value);

            textValueID++;
        }
    }
    //

    function deleteTextValueProfile(textValueName, textValueID, button) {
        var box = getTextValueBox(textValueName);
        var item = box.find("[data-textvalueid=" + textValueID + "]");
        var id = parseInt(item.attr("data-recordID"));
        var rowID = item.attr("data-rowID");
        if( id == 0 && rowID == "@Guid.Empty"){
            item.remove();
        }
        else {
            item.addClass("aboutToDelete");
            modal.confirm("Delete Item", "Really delete this item? This action cannot be undone!",
                function() {
                    var context = getProfileContext(box.attr("data-parentRepeaterID"));
                    context.Parent = context.Profile;
                    context.Profile = {
                        Id: id,
                        RowId: rowID,
                        TypeName: "TextValueProfile"
                    };
                    doAjax("Editor", "DeleteProfile", { context: context }, success_deleteTextValueProfile, $(button), { textValueName: textValueName, textValueID: textValueID }, true);
                },
                function() {
                    item.removeClass("aboutToDelete");
                }
            );
        }
    }
    //

    function success_deleteTextValueProfile(message, passThrough){
        if(message.valid){
            var box = getTextValueBox(passThrough.textValueName);
            var item = box.find("[data-textValueID=" + passThrough.textValueID + "]");
            item.remove();
        }
        else {
            consoleMessage.addErrorMessage(message.status, "", 5000);
        }
    }
    //
</script>

<style type="text/css">
     /*  header*/
    .editorHeader {background-color:#f5f5f5; margin: 8px 20px 5px 20px;}
    .stickyHeader  {position: fixed; top: 1px; width: 90%; border: solid;
    background-color: rgb(186, 220, 163); z-index: 100}
    .offscreen {position: absolute;    left: -999px;}
     .headerBox { padding: 5px 10px; display:inline-block; vertical-align:top;  }
     .headerBox1 {font-size: 150%; width:35% ;  color:#2D2C59; text-align: center;}
     .headerBox2 {font-size: 150%; color:#2D2C59; text-align: center;}
     .headerBox3 {font-size: 120%; width:20%; margin-right: 25px; text-align: right; }
     .hasToolTip{ z-index: 999999 !important;}

    /* Big Stuff */
    #content { padding-bottom: 100px; }
    #mainSiteFooter { display: none; }
    h1 { margin: 0; padding: 10px 5px 15px 5px; font-size: 32px; }
    h2 { margin: 0; padding: 0 5px 15px 5px; }
    .guidance { font-style: italic; opacity: 0.7; font-size: 16px; padding: 5px; }
    .guidance:empty { padding: 0; }
    input[type=text], select { padding: 0 5px; height: 25px; }
    #waitWrapper { position: fixed; top: 0; bottom: 0; left: 0; right: 0; background-color: rgba(0,0,0,0.5); z-index: 999999; transition: none; display: none; }
    #wait { width: 200px; margin: calc(50vh - 200px) auto; text-align: center; color: #FFF; }
    #waitSpinner { width: 100%; display: block; font-size: 100px; line-height: 100px; }
    #waitTitle { font-size: 26px; padding: 20px 5px 20px 20px; }

    /* Property Boxes */
    .propertyBox { margin-bottom: 15px; font-size: 0; }
    .propertyBox input[type=text], .propertyBox select, .propertyBox textarea { display: block; width: 100%; }
    .propertyBox textarea { resize: vertical; min-height: 8em; max-height: 20em; }
    .propertyBox .label, .propertyBox .data { display: inline-block; vertical-align: top; color: #3D4443; }
    .propertyBox .label { width: 175px; font-weight: bold; padding: 3px 10px 0 0; text-align: right; }
    .propertyBox .data { width: calc(100% - 175px); }
    .propertyBox .data .list label { display: inline-block; vertical-align: top; width: 100%; padding: 2px 5px 2px 22px; position: relative; }
    .propertyBox .data .list label input { position: absolute; top: 2px; left: 0; }
    .propertyBox .data .list label:hover, .propertyBox .data .list label:focus { background-color: #EEE; cursor: pointer; }
    .propertyBox.twoColumns .data .list { column-count: 2; }

    /* Profile Boxes */
    .profileBox { margin-bottom: 15px; }
    .profile:not(.mainProfile) .profileBox, .profileBox.smallLabel { font-size: 0; }
    .profile:not(.mainProfile) .profileBox .profileLabel, .profile:not(.mainProfile) .profileBox .profileData, .profileBox.smallLabel .profileLabel, .profileBox.smallLabel .profileData { display: inline-block; vertical-align: top; }
    .profile:not(.mainProfile) .profileBox .profileLabel, .profileBox.smallLabel .profileLabel { width: 175px; font-weight: bold; padding: 3px 10px 0 0; text-align: right; font-size: 16px; }
    .profile:not(.mainProfile) .profileBox .profileData, .profileBox.smallLabel .profileData { width: calc(100% - 175px); }
    .profileBox .profileGuidance { padding: 5px; }
    .profileBox .profileList { background-color: #EEE; padding: 5px; }
    .profileBox .profileButtons input { min-width: 300px; display: inline-block; }
    .profileBox .profileList .profileItem { background-color: #FFF; border: 1px solid #CCC; padding: 2px; margin-bottom: 5px; font-size: 0; }
    .profileBox .profileList .profileItem .name, .profileBox .profileList .profileItem .buttons { display: inline-block; vertical-align: top; }
    .profileBox .profileList .profileItem .name { width: calc(100% - 200px); padding: 2px 10px 2px 5px; }
    .profileBox .profileList .profileItem .buttons { width: 200px; font-size: 0; }
    .profileBox .profileList .profileItem .buttons input { display: inline-block; vertical-align: top; width: 96px; margin: 0 2px; }
    .profileBox .profileList .profileItem:last-child { margin-bottom: 0; }
    .profileButtons { text-align: right; padding: 5px 0; }

    /* MicroSearch Boxes */
    .microSearchBox { margin-bottom: 15px; }
    .profile:not(.mainProfile) .microSearchBox, .microSearchBox.smallLabel { font-size: 0; }
    .profile:not(.mainProfile) .microSearchBox .microSearchLabel, .profile:not(.mainProfile) .microSearchBox .microSearchData, .microSearchBox.smallLabel .microSearchLabel, .microSearchBox.smallLabel .microSearchData { display: inline-block; vertical-align: top; }
    .profile:not(.mainProfile) .microSearchBox .microSearchLabel, .microSearchBox.smallLabel .microSearchLabel { width: 175px; font-weight: bold; padding: 3px 10px 0 0; text-align: right; font-size: 16px; }
    .profile:not(.mainProfile) .microSearchBox .microSearchData, .microSearchBox.smallLabel .microSearchData { width: calc(100% - 175px); }
    .microSearchBox .microSearchColumns { font-size: 0; }
    .microSearchBox .microSearchColumn { display: inline-block; vertical-align: top; width: 50%; }
    .microSearchBox .microSearchSearch { padding-right: 2.5px; }
    .microSearchBox .microSearchSaved { padding-left: 2.5px; }
    .microSearchBox .microSearchColumn h3 { margin: 0; padding: 5px; font-size: 18px; }
    .microSearchBox .microSearchFilters .microSearchFilter { display: block; width: 100%; margin-bottom: 2px; }
    .microSearchBox .microSearchFilters .microSearchKeywords { font-size: 0; }
    .microSearchBox .microSearchFilters .microSearchKeywords input { display: inline-block; vertical-align: top; }
    .microSearchBox .microSearchFilters .microSearchKeywords input[type=text] { width: calc(100% - 150px); }
    .microSearchBox .microSearchFilters .microSearchKeywords input[type=button] { width: 73px; margin-left: 2px; }
    .microSearchBox .microSearchSaved .microSearchSavedItems { padding: 5px; background-color: #EEE; }
    .microSearchBox .microSearchSaved .microSearchSavedItems p { text-align: center; margin: 0; padding: 5px; font-style: italic; }
    .microSearchBox .microProfile { padding: 5px; margin-bottom: 5px; background-color: #FFF; border: 1px solid #CCC; position: relative; }
    .microSearchBox .microProfile .microProfileButtons { position: absolute; top: 5px; right: 5px; width: 100px; }
    .microSearchBox .microProfile input, .microSearchBox .microProfile .linkButton { display: inline-block; vertical-align: top; width: calc(100% - 1px); margin: 0 1px; }
    .microSearchBox .microProfile .title { font-weight: bold; min-height: 25px; padding: 0 115px 5px 0; display: block; }
    .microSearchBox .microProfile .description { padding: 5px; font-size: 14px; }
    .microSearchBox .microProfile .description:empty { padding: 0; }
    .microSearchBox .microProfile .selectors { display: none; }
    .microSearchBox .microProfile .rawData { display: none; }
    .microSearchBox .microProfile .rawProperties { display: none; }
    .microSearchBox .microSearchSaved .microProfile .showOnResult { display: none; }
    .microSearchBox .microSearchResults .microProfile .showOnSaved { display: none; }
    .microSearchBox .microSearchStatus { padding: 5px; text-align: center; }
    .microSearchBox .microSearchPaging { text-align: center; }
    .microSearchBox .microSearchPageButton { display: inline-block; min-width: 25px; }
    .microSearchBox .microSearchPageButton.current { background-color: #3D4443; color: #FFF; }
    .microSearchBox .microSearchButtons { text-align: right; padding: 5px; }
    .microSearchBox[data-hasEditProfile=false] .microProfile .editMicroProfile { display: none; }
    .microSearchBox[data-hasEditProfile=true] .microProfile .title { padding-right: 190px; }
    .microSearchBox[data-hasEditProfile=true] .microProfile .microProfileButtons { width: 175px; font-size: 0; }
    .microSearchBox[data-hasEditProfile=true] .microProfile .microProfileButtons input, .microSearchBox[data-hasEditProfile=true] .microProfile .microProfileButtons .linkButton { width: calc(50% - 2px); }
    .microSearchBox .microProfile .microProfileButtons .linkButton { font-size: 16px; text-align: center; }
    .microSearchBox[data-hasResultLink=false] .title.hasResultLink, .microSearchBox[data-hasResultLink=true] .title.noResultLink { display: none; }

    /* Text Value Profile */
    .profile:not(.mainProfile) .textValueBox, .textValueBox .textValueValueBox, .textValueBox.smallLabel { font-size: 0; }
    .profile:not(.mainProfile) .textValueBox .textValueLabel, .profile:not(.mainProfile) .textValueBox .textValueData, .textValueBox.smallLabel .textValueLabel, .textValueBox.smallLabel .textValueData { display: inline-block; vertical-align: top; }
    .profile:not(.mainProfile) .textValueBox .textValueLabel, .textValueBox.smallLabel .textValueLabel { width: 175px; font-weight: bold; padding: 3px 10px 0 0; text-align: right; font-size: 16px; }
    .profile:not(.mainProfile) .textValueBox .textValueData, .textValueBox.smallLabel .textValueData { width: calc(100% - 175px); }
    .textValueBox .textValueList { background-color: #EEE; padding: 5px; }
    .textValueBox .profileButtons input { min-width: 300px; display: inline-block; }
    .textValueBox .textValueProfile { font-size: 0; padding: 5px; background-color: #FFF; margin-bottom: 5px; }
    .textValueBox .textValueProfile:last-child { margin-bottom: 0; }
    .textValueBox .textValueProfile .textValueValue { width: 100%; }
    .textValueBox .textValueProfile .textValueSelectorBox { font-size: 0; margin-bottom: 2px; }
    .textValueBox .textValueProfile .textValueSelectorBox *:not(option), .textValueBox .textValueProfile .textValueValueBox * { display: inline-block; vertical-align: top; }
    .textValueBox .textValueProfile .textValueSelectorBox *:not(option) { width: 50%; }
    .textValueBox .textValueProfile .textValueValue { width: calc(100% - 102px); }
    .textValueBox .textValueProfile .textValueDelete { width: 100px; margin-left: 2px; }
    .textValueBox[data-hasOther=false] .textValueProfile .textValueSelector { width: 100%; }
    .textValueBox[data-hasOther=false] .textValueProfile .textValueOther { display:none; }
    .textValueBox[data-hasSelector=false] .textValueProfile .textValueSelector { display: none; }
    .textValueBox[data-hasSelector=false] .textValueProfile .textValueOther { width: 100%; }
     
    /* Tabs */
    .hasTabs .tabs { margin-bottom: 10px; font-size: 0; text-align: center; }
    .hasTabs .tabs input { margin: 1px; display: inline-block; vertical-align: top; min-width: 100px; }
    .hasTabs.verticalTabs { font-size: 0; }
    .hasTabs.verticalTabs .tabs { width: 200px; }
    .hasTabs.verticalTabs .tabItems { width: calc(100% - 200px); padding-left: 15px; }
    .hasTabs.verticalTabs .tabs, .hasTabs.verticalTabs .tabItems { display: inline-block; vertical-align: top; }
    .hasTabs.verticalTabs .tabs input { display: block; width: 100%; margin: 1px 0; }
    .hasTabs .tabs input.selected { background-color: #3D4443; color: #FFF; }
    .hasTabs .tabItems .tabItem:not(.selected) { display: none; }

    /* Profile Editors */
    #profiles { position: relative; z-index: 999999; }
    #profiles .profile { display: none; border: 1px solid #CCC; background-color: #FFF; }
    #profiles .profile[data-visible=true] { display: block; position: fixed; top: 5vh; left: 5vw; z-index: 100; height: 90vh; width: 90vw; }
    #profiles .profile .profileTitle { background-color: #EEE; padding: 5px; font-size: 20px; font-weight: bold; height: 35px; border-bottom: 1px solid #CCC; }
    #profiles .profile .profileBoxFooter { background-color: #EEE; padding: 2px; height: 30px; border-top: 1px solid #CCC; position: absolute; left: 0; bottom: 0; right: 0; font-size: 0; }
    #profiles .profile .profileBoxFooter .profileBoxHistory, #profiles .profile .profileBoxFooter .profileBoxButtons { display: inline-block; vertical-align: top; }
    #profiles .profile .profileBoxFooter .profileBoxHistory { width: calc(100% - 950px); padding: 2px 5px; }
    #profiles .profile .profileBoxFooter .profileBoxButtons { width: 950px; text-align: right; font-size: 0; }
    #profiles .profile .profileBoxFooter .profileBoxButtons .profileBoxButtonSet { display: inline-block; vertical-align: top; }
    #profiles .profile .profileBoxFooter input { width: 180px; display: inline-block; margin: 0 1px 2px 1px; }
    #profiles .profile .profileContent { overflow-y: auto; max-height: calc(90vh - 67px); padding: 5px; }
    #overlay[data-visible=true] { background-color: rgba(0,0,0,0.7); position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 99; }
    #profiles .profile .mainGuidance { font-style: italic; padding: 5px; background-color: #EEE; margin-bottom: 5px; }

    /* Special things */
    .profile[data-profile=DurationProfile] table { margin: 0; }
    .profile[data-profile=DurationProfile] table td { padding: 0; border: none; }
    .microSearchBox.hideSavedResults .microSearchSearch { width: 100%; }
    .microSearchBox.hideSavedResults .microSearchSaved { display: none; }
    .profileHistory { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; }
    .profileHistory[data-hasupdate=false] { opacity: 0; }

    /* Radio Selector */
    .radioSelector { }
    .radioSelector .radioSection { position: relative; font-size: 0; padding-left: 30px; }
    .radioSelector .radioSection .radioButton { position: absolute; left: 0; top: 0; bottom: 0; width: 30px; padding-top: 5px; text-align: center; }
    .radioSelector .radioSection .radioButton:hover, .radioSelector .radioSection .radioButton:focus { cursor: pointer; background-color: #47CEC7; }
    .radioSelector .radioSection.selected .radioButton { background-color: #3D4443; }
    .radioSelector .radioSection:not(.selected) .radioCover { position: absolute; top: 0; bottom: 0; left: 30px; right: 0; background-color: rgba(255,255,255,0.7); }

    /* Global Buttons */
    #globalButtons { position: fixed; bottom: 0; left: 0; right: 0; height: 30px; background-color: #555; border-top: 1px solid #333; padding: 2px 10px; z-index: 50; font-size: 0; }
    #globalButtons #globalInputs, #globalButtons #history { display: inline-block; vertical-align: top; white-space: nowrap; }
    #globalButtons #globalInputs { width: 350px; text-align: right; }
    #globalButtons #history { color: #FFF; width: calc(100% - 350px); font-size: 14px; padding: 3px 0; overflow: hidden; text-overflow: ellipsis; }
    #globalButtons input { display: inline-block; vertical-align: top; min-width: 100px; height: 24px; font-weight: bold; }

    @@media (max-width: 1600px) {
        #profiles .profile .profileBoxFooter { height: 55px; }
        #profiles .profile .profileBoxFooter .profileBoxHistory, #profiles .profile .profileBoxFooter .profileBoxButtons { display: block; width: 100%; text-align: right; }
        #profiles .profile .profileBoxFooter .profileBoxButtons { padding: 0 5px; }
    }
    @@media (max-width: 1100px) {
        #profiles .profile .profileBoxFooter { height: 100px; }
        #profiles .profile .profileBoxFooter .profileBoxButtons .profileBoxButtonSet { display: inline-block; width: 180px; margin-left: 5px; }
        #profiles .profile .profileBoxFooter .profileBoxButtons .profileBoxButtonSet input { display: block; font-size: 14px; }
    }
    @@media (max-width: 900px) {
        #globalButtons { height: 55px; }
        #globalButtons #globalInputs, #globalButtons #history { text-align: right; width: 100%; }
    }
    @@media (max-width: 450px) {
        #profiles .profile .profileBoxFooter { height: 150px; text-align: right; }
        #profiles .profile .profileBoxFooter .profileBoxButtons { display: inline-block; width: 180px; }
        #profiles .profile .profileBoxFooter input { width: 100%; }
        #profiles .profile .profileBoxFooter .profileBoxButtons .profileBoxButtonSet { display: block; margin-left: 0; width: 100%; }
    }
</style>

<div id="editor">

    <div class="profile mainProfile hasTabs verticalTabs" data-editorName="MainProfile" data-profile="@mainProfileType" data-recordID="@Model.MainProfile.Id" data-recordRowId="@Model.MainProfile.RowId" data-repeaterID="0">

        @switch ( Model.Editor )
        {
            case EditorSettings.EditorType.CREDENTIAL:
            {
                <div class="editorHeader">
                    <div class="headerBox headerBox2">
                        <h1 >@(Model.MainProfile.Id == 0 ? "New Credential" : "Editing Credential: " + Model.MainProfile.Name)</h1>
                    </div>
                </div>

                <div class="tabs">
                    <input type="button" class="selected" value="Basic Info" data-properties="BasicInfoHeader,Name,Description,AlternateName,Url,CredentialType,ImageUrl,DateEffective,Version,LatestVersionUrl,PreviousVersion,AvailableOnlineAt,AvailabilityListing,CredentialId,CodedNotation,CredentialPurposeTypeIds,AudienceLevelTypeIds,CredentialStatusTypeId,EstimatedTimeToEarn,EstimatedCosts,Addresses,Jurisdiction,Subject,Keyword" />
                    <input type="button" value="Agent Roles" data-properties="AgentRole_Recipient" />
                    <input type="button" value="Industry" data-properties="IndustryHeader,Industry,OtherIndustries" />
                    <input type="button" value="Occupation" data-properties="OccupationHeader,Occupation,OtherOccupations" />
                    <input type="button" value="Embedded/Included Credentials" data-properties="EmbeddedCredentials" />
                    @*<input type="button" value="Encompassing Credentials" data-properties="ParentCredential" />*@
                    <input type="button" value="Attainment Requirements" data-properties="Requires" />
                    <input type="button" value="Attainment Recommendations" data-properties="Recommends" />
                    <input type="button" value="Credential Required For" data-properties="IsRequiredFor" />
                    <input type="button" value="Credential Recommended For" data-properties="IsRecommendedFor" />
                    <input type="button" value="Advanced Standing For" data-properties="AdvancedStandingFor" />
                    <input type="button" value="Advanced Standing From" data-properties="AdvancedStandingFrom" />
                    <input type="button" value="Preparation For" data-properties="IsPreparationFor" />
                    <input type="button" value="Preparation From" data-properties="PreparationFrom" />
                    <input type="button" value="Renewal Requirements" data-properties="Renewal" />
                    <input type="button" value="Revocation Terms" data-properties="Revocation" />
                    @*<input type="button" value="Quality Assurance Actions" data-properties="QualityAssuranceAction_Recipient" />*@
                    @*<input type="button" value="Credential Processes" data-properties="CredentialProcess"/>*@
                    @*<input type="button" value="Statistical Information" data-properties="Earnings,EmploymentOutcome,Holders" />*@
                    @if ( isUserAdmin )
                    {
                        <input type="button" value="System Management" data-properties="ManagementHeader,ManagingOrgId"/>
                    }
                </div>

                <div class="tabItems">

                    <h2 class="tabItem" data-property="BasicInfoHeader">Basic Information</h2>
                    <h2 class="tabItem" data-property="ManagementHeader">Management</h2>
                    <h2 class="tabItem" data-property="IndustryHeader">Industries</h2>
                    <h2 class="tabItem" data-property="OccupationHeader">Occupations</h2>
         

                    @* Basic Info *@
                    @RenderListInput( "ManagingOrgId", "Managing Organization", ListInputSettings.InterfaceType.DROPDOWN_LIST, "Select the organization whose members can update this record.", null, enumServices.GetOrganizationsAsCodes(), false )
                    @RenderTextInput( "Name", "Credential Name", TextInputSettings.InputType.TEXT, "The official name of the credential.", true, 5 )
                    @RenderTextInput( "AlternateName", "Alternate Name", TextInputSettings.InputType.TEXT, "An alternate name or acronym for the credential.", false, 3 )
                    @RenderTextInput( "Description", "Credential Description", TextInputSettings.InputType.TEXTAREA, "A summary or description of the credential.", true, 15 )
                    @*@RenderListInput( "CredentialTypeId", "Credential Type", ListInputSettings.InterfaceType.DROPDOWN_LIST, "Select the type that best describes the credential.", enumServices.GetCredentialType( EnumerationType.CUSTOM ).Items )*@

                    @RenderListInput( new ListInputSettings()
                   {
                       Property = "CredentialType",
                       Label = "Credential Type",
                       Type = ListInputSettings.InterfaceType.RADIO_LIST,
                       Guidance = "Select the type that best describes the credential.",
                       EnumItems = enumServices.GetCredentialType( EnumerationType.CUSTOM ).Items,
                       ExtraClasses = new List<string>() { "twoColumns" },
                       RequireValue = true
                   } )

                    @RenderTextInput( "SubjectWebpage", "Credential URL", TextInputSettings.InputType.URL, "The URL of a page that lists information about the credential." )
                    @RenderTextInput( "ImageUrl", "Credential Image", TextInputSettings.InputType.URL, "A publicly-accessible URL of the image or icon that represents the credential." )
                    @RenderTextInput( "DateEffective", "Effective Date", TextInputSettings.InputType.DATE, "The date that the credential was first officially recognized and earnable." )
                    @RenderTextInput( "Version", "Credential Version", TextInputSettings.InputType.TEXT, "The version number, code, catalog year, or other identifier for the specific version of the credential being described." )
                    @RenderTextInput( "LatestVersionUrl", "Latest Version URL", TextInputSettings.InputType.URL, "Provide a URL that will always lead to the latest version of the credential, even if the credential version changes." )
                    @RenderTextInput( "PreviousVersion", "Version Being Replaced URL", TextInputSettings.InputType.URL, "Provide a URL to the version of the credential that this credential version replaces." )
                    @RenderTextInput( "AvailableOnlineAt", "Available Online At", TextInputSettings.InputType.URL, "Provide a URL to where this credential is available online." )
                    @RenderTextInput( "AvailabilityListing", "Availability Listing", TextInputSettings.InputType.URL, "Provide a URL to a page that lists physical and/or online locations where this credential is available." )
                    @RenderTextInput( "CredentialId", "Credential Identifier", TextInputSettings.InputType.TEXT, "Optionally provide a globally unique identifier for this credential." )
                    @RenderTextInput( "CodedNotation", "Notation Code", TextInputSettings.InputType.TEXT, "Optionally provide a notation code for this credetial. For example this could be a class code." )
                    @RenderListInput( "CredentialPurposeTypeIds", "Credential Purpose", ListInputSettings.InterfaceType.CHECKBOX_LIST, "The general purpose of the credential.", enumServices.GetCredentialPurpose( EnumerationType.CUSTOM ).Items )
                    @RenderListInput( "AudienceLevelTypeIds", "Audience Level", ListInputSettings.InterfaceType.CHECKBOX_LIST, "Select the education level someone should have before attempting to attain this credential.", enumServices.GetAudienceLevel( EnumerationType.CUSTOM ).Items )
                    @RenderListInput( "CredentialStatusTypeId", "Credential Status", ListInputSettings.InterfaceType.DROPDOWN_LIST, "Select the status for this credential.", enumServices.GetEnumeration( "credentialStatusType", EnumerationType.SINGLE_SELECT, false ).Items )
                    
                    @RenderTextValueInput( "Subject", "Subjects", TextInputSettings.InputType.TEXT, "Enter subjects that describe this Credential.", "Add a Subject", "Subject", "0" )

                    @RenderTextValueInput( "Keyword", "Keywords", TextInputSettings.InputType.TEXT, "Enter keywords that describe this Credential.", "Add a Keyword", "Add a Keyword (max length of 200 characters)", "0" )

                    @RenderProfileInput( "EstimatedTimeToEarn", "Estimated Time to Earn", "DurationProfile", "Describe the estimated amount of time it would take to earn the credential normally, and for each applicable special circumstance.", "Add new Time Estimate", "0" )
                    @RenderProfileInput( "EstimatedCosts", "Estimated Costs", "CostProfile", "Enter costs associated with this credential, for example an aggregate cost.", "Add New Estimated Cost", "0" )
                    @RenderProfileInput( "Addresses", "Available at Addresses", "AddressProfile", "Addresses at which the credential is available.", "Add an Address", "0" )
                    @RenderProfileInput( "Jurisdiction", "Jurisdiction", "JurisdictionProfile", "The geographic area in which the credential can be used, sans exceptions.", "Add new Jurisdiction", "0" )
                    @RenderProfileInput( "AgentRole_Recipient", "Agent Roles", "AgentRoleProfile_Recipient", "Describe the relationships this credential has to one or more organizations.", "Add new Role", "0", false )

                    @RenderProfileInput( "Requires", "Attainment Requirements", "ConditionProfile", "Describe each set of requirements for attaining this credential.", "Add new Requirements", "0", false )
                    @RenderProfileInput( "Recommends", "Attainment Recommendations", "ConditionProfile", "Describe each set of recommended items that will help prepare someone to attain the credential.", "Add new Recommendations", "0", false )
                    @RenderProfileInput( "IsRequiredFor", "Credential Required For", "ConditionProfile", "Describe each set of items that the credential is a known requirement for.", "Add new Connection", "0", false )
                    @RenderProfileInput( "IsRecommendedFor", "Credential Recommended For", "ConditionProfile", "Describe each set of items that the credential will help someone prepare for.", "Add new Connection", "0", false )
                    @RenderProfileInput( "AdvancedStandingFor", "Advanced Standing For", "ConditionProfile", "Describe each set of items that the credential will provide advanced standing for.", "Add new Connection", "0", false )
                    @RenderProfileInput( "AdvancedStandingFrom", "Advanced Standing From", "ConditionProfile", "Describe each set of items that will provide advanced standing for the credential.", "Add new Connection", "0", false )
                    @RenderProfileInput( "IsPreparationFor", "Preparation For", "ConditionProfile", "Describe each set of items that the credential will prepare someone for.", "Add new Connection", "0", false )
                    @RenderProfileInput( "PreparationFrom", "Preparation From", "ConditionProfile", "Describe each set of items that will prepare someone for the credential.", "Add new Connection", "0", false )
                    @RenderProfileInput( "Renewal", "Credential Renewal", "ConditionProfile", "Describe the applicable conditions someone who previously attained this credential must meet in order to renew their status as a holder.", "Add new Renewal Requirements", "0", false )
                    @*@RenderProfileInput( "QualityAssuranceAction_Recipient", "Quality Assurance Actions", "QualityAssuranceActionProfile_Recipient", "Describe the Quality Assurance Actions that have been applied to this credential.", "Add new Quality Assurance Action", "0", false )*@
                    @*@RenderProfileInput( "CredentialProcess", "Credential Processes", "ProcessProfile", "Describe the processes used to select, develop, validate, or maintain the credential.", "Add new Process Description", "0", false )*@
                    @RenderProfileInput( "Revocation", "Revocation Terms", "RevocationProfile", "Describe the applicable conditions for removing this credential from someone that has previously attained it.", "Add new Revocation Conditions", "0", false )

                    @RenderProfileInput( "Earnings", "Credential Earnings", "EarningsProfile", "Describe the statistical information about earnings that holders of this credential are reported to have received.", "Add new Earnings Description", "0" )
                    @RenderProfileInput( "EmploymentOutcome", "Employment Outcomes", "EmploymentOutcomeProfile", "Describe statistical employment outcome information about this credential.", "Add new Outcome Description", "0" )
                    @RenderProfileInput( "Holders", "Holder Statistics", "HolderProfile", "Describe statistical information about those who received this credential.", "Add new Holder Statistics Description", "0" )

                    @RenderMicroSearchInput( new MicroSearchSettings() { 
                        Property = "Industry", 
                        SearchType = "IndustrySearch",
                        ProfileTemplate = "CodeItem",
                        SavedItemsHeader = "Saved Industries",
                        ParentRepeaterId = "0",
                        Label = "Industry Codes", 
                        Guidance = "Identify the specific industries this credential applies to. We recommend using the <a href=\"http://www.naics.com/search/\" target=\"_blank\">NAICS codes</a>. Select an Industry category and browse through codes or search by entering a keyword or parial NAICS code in the text box.", 
                        ExtraClasses = new List<string>() { "tabItem" }, 
                        Filters = new List<MicroSearchFilter>() { 
                            new MicroSearchFilter() { FilterName = "HeaderId", Type = "select", Items = industryHeaders } 
                        }
                    } )
                    @RenderTextValueInput( "OtherIndustries", "Other Industries", TextInputSettings.InputType.TEXT, "Enter an industry that does not exist via the search.", "Add an Industry", "Add another Industry", "0" )

                    @RenderMicroSearchInput( new MicroSearchSettings()
                    {
                        Property = "Occupation",
                        SearchType = "OccupationSearch",
                        ProfileTemplate = "CodeItem",
                        SavedItemsHeader = "Saved Occupations",
                        ParentRepeaterId = "0",
                        Label = "Occupation Codes",
                        Guidance = "Identify the specific occupations this credential applies to. We recommend using the <a href=\"http://www.bls.gov/soc/\" target=\"_blank\">SOC codes</a>. Select an Occupation category and browse through codes or search by entering a keyword or parial SOC code in the text box.",
                        ExtraClasses = new List<string>() { "tabItem" },
                        Filters = new List<MicroSearchFilter>() { 
                            new MicroSearchFilter() { FilterName = "HeaderId", Type = "select", Items = occupationHeaders } 
                        }
                    } )
                    @RenderTextValueInput( "OtherOccupations", "Other Occupations", TextInputSettings.InputType.TEXT, "Enter an occupation that does not exist via the search.", "Add an Occupation", "Add another Occupation", "0" )


                    @RenderMicroSearchInput( new MicroSearchSettings()
                    {
                        Property = "EmbeddedCredentials",
                        SearchType = "CredentialSearch",
                        SavedItemsHeader = "Saved Credentials",
                        ProfileTemplate = "MicroProfile",
                        ParentRepeaterId = "0",
                        ProfileType = "Credential",
                        Label = "Embedded/Included Credentials",
                        Guidance = "Identify any credentials that are a part of this credential. Such credentials are typically earned during the pursuit of this credential and/or upon attainment of it.",
                        ExtraClasses = new List<string>() { "tabItem" },
                        HasEditProfile = true,
                        HasResultLink = true,
                        UseSmallLabel = false
                    } )

                </div><!-- /tabItems -->
            }
            break;

       

        case EditorSettings.EditorType.ORGANIZATION:
        {
        <h1>@(Model.MainProfile.Id == 0 ? "New Organization" : "Editing Organization: " + Model.MainProfile.Name)</h1>

        <div class="tabs">
            <input type="button" class="selected" value="Basic Info" data-properties="BasicInfoHeader,Name,Description,AgentPurposeUrl,Purpose,Url,ImageUrl,DateEffective,Founded,FoundingYear,FoundingMonth,FoundingDay,OrganizationTypeIds,OrganizationServiceTypeIds,OrganizationSectorTypeId,IdentificationCodes,Jurisdiction,Keyword" />
            <input type="button" value="Contact Information" data-properties="ContactInfoHeader,SocialMediaPages,Address,AvailabilityListing,PhoneNumbers,Emails" />
            <input type="button" value="Agent Roles Received" data-properties="AgentRole_Recipient" />
            @*<input type="button" value="Agent Roles Performed" data-properties="AgentRole_Actor" />*@
            <input type="button" value="Quality Assurance Actions Received" data-properties="QualityAssuranceAction_Recipient" />
            @*<input type="button" value="Quality Assurance Actions Issued" data-properties="QualityAssuranceAction_Actor" />*@
            <input type="button" value="Verification Services" data-properties="VerificationService" />
            <input type="button" value="Departments" data-properties="Department" />
            <input type="button" value="Subsidiaries" data-properties="Subsidiary" />
            <input type="button" value="Quality Assurance Performed" data-properties="QAPerformedHeader,QAPurposeTypeIds,QATargetTypeIds" />
        </div>

        <div class="tabItems">

            <h2 class="tabItem" data-property="BasicInfoHeader">Basic Information</h2>
            <h2 class="tabItem" data-property="ContactInfoHeader">Contact Information</h2>
            <h2 class="tabItem" data-property="QAPerformedHeader">Quality Assurance Performed</h2>

            @* Basic Info *@
            @RenderTextInput( "Name", "Organization Name", TextInputSettings.InputType.TEXT, "The official name of the organization.", true, 5 )
            @RenderTextInput( "Description", "Organization Description", TextInputSettings.InputType.TEXTAREA, "A summary or description of the organization.", true, 15 )

            @RenderTextInput( "AgentPurposeUrl", "Agent Purpose", TextInputSettings.InputType.URL, "A resource that describes the agent's primary purpose." )
            @RenderTextInput( "Purpose", "Organization Purpose", TextInputSettings.InputType.TEXTAREA, "The organization's purpose or mission statement." )

            @RenderTextInput( "MissionAndGoalsStatement", "Mission and Goals Statement", TextInputSettings.InputType.URL, " resource that defines or explains the mission and goals statement of the resource being described." )

            @RenderTextInput( "SubjectWebpage", "Organization URL", TextInputSettings.InputType.URL, "The URL of a page that lists information about the organization." )

            @RenderTextInput( "ImageUrl", "Organization Image", TextInputSettings.InputType.URL, "A publicly-accessible URL of the image or icon that represents the organization." )
            @RenderTextInput( "FoundingYear", "Founding Year", TextInputSettings.InputType.NUMBER, "The year the organization was founded." )
            @RenderTextInput( "FoundingMonth", "Founding Month", TextInputSettings.InputType.NUMBER, "The month the organization was founded." )
            @RenderTextInput( "FoundingDay", "Founding Day", TextInputSettings.InputType.NUMBER, "The numeric/calendar day of the month the organization was founded." )
            @RenderTextInput( "AvailabilityListing", "Availability Listing", TextInputSettings.InputType.URL, "Provide a URL to a page that lists physical and/or online locations where this organization is located." )
            @*@RenderTextInput( "Versioning", "Versioning Information", TextInputSettings.InputType.TEXTAREA, "Describe how the organization manages changes in its credentials and credential-related processes." )*@

            @* Lists *@
            @foreach(var item in new List<ListInputSettings>() {
                        new ListInputSettings() { Property = "OrganizationTypeIds", Label = "Organization Type", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) that best describe the organization. Check all that apply.", EnumItems = enumServices.GetOrganizationType( EnumerationType.CUSTOM ).Items, ExtraClasses = new List<string>() { "twoColumns" } },
                        //new ListInputSettings() { Property = "OrganizationSectorTypeId", Label = "Organization Sector Type", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "Select the sector type that best describes the organization.", CodeItems = enumServices.GetPropertiesList( "orgSectorType", false ) },
                        new ListInputSettings() { Property = "OrganizationServiceTypeIds", Label = "Organization Service Types", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "The types of services offered by the organization.", EnumItems = enumServices.GetOrganizationServices( EnumerationType.CUSTOM ).Items, ExtraClasses = new List<string>() { "twoColumns" } },
                        new ListInputSettings() { Property = "QAPurposeTypeIds", Label = "Agent QA Purpose Type", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the Quality Assurance purpose type.", CodeItems = enumServices.GetPropertiesList( "agentQAPurpose", true) },
                        new ListInputSettings() { Property = "QATargetTypeIds", Label = "Agent QA Target Type", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) of entities this Agent performs QA on or for.", CodeItems = enumServices.GetPropertiesList( "qualityAssuranceTargetType", true) }
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_ListBox.cshtml", item )
                    }

            @RenderListInput( new ListInputSettings()
                               {
                                   Property = "OrganizationSectorTypeId",
                                   Label = "Organization Sector Type",
                                   Type = ListInputSettings.InterfaceType.RADIO_LIST,
                                   Guidance = "Select the sector type that best describes the organization.",
                                   EnumItems = enumServices.GetEnumeration( "orgSectorType", EnumerationType.SINGLE_SELECT, true ).Items

                               } )

            @* Profiles *@
            @{ var parentID = Model.MainProfile.Id.ToString(); }
            @foreach ( var item in new List<ProfileSettings>() {
                        new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", ParentRepeaterId = "0", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "The geographic area that this organization serves, sans exceptions." },
                        new ProfileSettings() { Property = "AgentRole_Recipient", Profile = "AgentRoleProfile_Recipient", ParentRepeaterId = "0", Label = "Agent Roles Received", AddText = "Add new Role", Guidance = "Describe the relationships this organization has to one or more organizations where this organization is the recipient of the role.", UseSmallLabel = false },
                        new ProfileSettings() { Property = "AgentRole_Actor", Profile = "AgentRoleProfile_Actor", ParentRepeaterId = "0", Label = "Agent Roles Performed", AddText = "Add new Role", Guidance = "Describe the relationships this organization has to other entities where this organization is the performer of the role." },
                        new ProfileSettings() { Property = "QualityAssuranceAction_Recipient", Profile = "QualityAssuranceActionProfile_Recipient", ParentRepeaterId = "0", Label = "Quality Assurance Actions Received", AddText = "Add new Quality Assurance Action", Guidance = "Describe the Quality Assurance Actions that have been applied to this organization.", UseSmallLabel = false },
                        new ProfileSettings() { Property = "QualityAssuranceAction_Actor", Profile = "QualityAssuranceActionProfile_Actor", ParentRepeaterId = "0", Label = "Quality Assurance Actions Issued", AddText = "Add new Quality Assurance Action", Guidance = "Describe the Quality Assurance Actions that this organization has issued." },
                        new ProfileSettings() { Property = "Address", Profile = "AddressProfile", ParentRepeaterId = "0", Label = "Organization Addresses", AddText = "Add an Address", Guidance = "Addresses at which the organization can be reached." },
                        new ProfileSettings() { Property = "VerificationService", Profile = "VerificationServiceProfile", ParentRepeaterId = "0", Label = "Verification Services", AddText = "Add a Verification Service", Guidance = "If the organization provides services to prove that individuals have credentials, describe them here.", UseSmallLabel = false },
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", item )
                    }


            @* TextValue Profiles *@
            @foreach ( var item in new List<TextValueEditorSettings>()
                    {
                        new TextValueEditorSettings() { Property = "Keyword", ParentRepeaterId = "0", Label = "Keywords", AddText = "Add a Keyword", Guidance = "Enter subjects that describe this record.", ValueType = TextInputSettings.InputType.TEXT, ValuePlaceholder = "Add a Keyword (max length of 200 characters)" },
                         new TextValueEditorSettings() { Property = "IdentificationCodes", ParentRepeaterId = "0", Label = "Organization Identification Codes", AddText = "Add an Identification Code", Guidance = "Codes that identify the organization within existing frameworks", HasSelector = true, HasOther = true, CodeItems = new EnumerationServices().GetPropertiesList( "identityType", false ), ValueType = TextInputSettings.InputType.TEXT },
                        new TextValueEditorSettings() { Property = "SocialMediaPages", ParentRepeaterId = "0", Label = "Organization Social Media Pages", AddText = "Add a Social Media Page", Guidance = "Social Media Pages that represent the organization directly.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://" },
                        new TextValueEditorSettings() { Property = "PhoneNumbers", ParentRepeaterId = "0", Label = "Organization Phone/Fax Numbers", AddText = "Add a Phone/Fax Number", Guidance = "Phone numbers for contacting the organization directly.", HasSelector = true, HasOther = true, OtherPlaceholder = "Enter 'Other' phone type"  ,CodeItems = new EnumerationServices().GetPropertiesList( "phoneType", false ), ValueType = TextInputSettings.InputType.TEXT, ValuePlaceholder = "Phone/Fax Number" },
                        new TextValueEditorSettings() { Property = "Emails", ParentRepeaterId = "0", Label = "Organization Emails", AddText = "Add an Email", Guidance = "Emails for contacting the organization directly. Please provide a purpose (e.g, \"Public Relations\", \"Technical Staff\", \"Head Office\", etc.) and a valid email address.", ValueType = TextInputSettings.InputType.TEXT, HasOther = true, OtherPlaceholder = "Email Purpose", ValuePlaceholder = "Email Address" },
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", item )
                    }


            @* Micro Searches *@
            @foreach(var item in new List<MicroSearchSettings>() {
                        new MicroSearchSettings() {
                            Property = "Department",
                            SearchType = "OrganizationSearch",
                            Label = "Department Organizations",
                            Guidance = "Identify any organizations that are a department of this organization.",
                            SavedItemsHeader = "Saved Departments",
                            ExtraClasses = new List<string>() { "tabItem" },
                            HasEditProfile = true,
                            HasCreateProfile = true,
                            CreateProfileTitle = "Organization",
                            ProfileType = "Organization",
                            ParentRepeaterId = "0",
                            UseSmallLabel = false,
        AllowingPopupCreate=false
                        },
                        new MicroSearchSettings() {
                            Property = "Subsidiary",
                            SearchType = "OrganizationSearch",
                            Label = "Subsidiary Organizations",
                            Guidance = "Identify any organizations that are a subsidiary of this organization.",
                            SavedItemsHeader = "Saved Subsidiaries",
                            ExtraClasses = new List<string>() { "tabItem" },
                            HasEditProfile = true,
                            HasCreateProfile = true,
                            CreateProfileTitle = "Organization",
                            ProfileType = "Organization",
                            ParentRepeaterId = "0",
                            UseSmallLabel = false,
        AllowingPopupCreate=false
                        }
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", item )
                    }

        </div><!-- /tabItems -->
        }
        break;

        case EditorSettings.EditorType.ASSESSMENT:
        {
        <h1>@(Model.MainProfile.Id == 0 ? "New Assessment" : "Editing Assessment: " + Model.MainProfile.Name)</h1>

        <div class="tabs">
            <input type="button" class="selected" value="Basic Info" data-properties="BasicInfoHeader,Name,Description,SubjectWebpage,AssessmentMethodType,AssessmentOutput,AvailableOnlineAt,AvailabilityListing,CodedNotation,DateEffective,AssessmentUseType,DeliveryType,DeliveryTypeDescription,Jurisdiction,Duration,Subject,Keyword,Addresses,IsProctored,HasGroupEvaluation,HasGroupParticipation,AssessmentExample,AssessmentExampleDescription,ScoringMethodType,ScoringMethodDescription,ScoringMethodExample,ScoringMethodExampleDescription,ExternalResearch,ProcessStandards,ProcessStandardsDescription,CreditHourType,CreditHourValue,CreditUnitType,CreditUnitTypeDescription,CreditUnitValue,VerificationMethodDescription" />
            <input type="button" value="Competencies" data-properties="CompetencyHeader,RequiresCompetenciesFrameworks,AssessesCompetenciesFrameworks" />
            <input type="button" value="Organization Roles" data-properties="AgentRole_Recipient" />
            @*<input type="button" value="Quality Assurance Received" data-properties="QualityAssuranceAction_Recipient" />*@
            <input type="button" value="Estimated Costs" data-properties="Cost" />
            @*<input type="button" value="Eligibility Requirements" data-properties="Requires" />
            <input type="button" value="Recommendations" data-properties="Recommends" />*@
            <input type="button" value="Instructional Program Category" data-properties="CIPHeader,OtherInstructionalProgramCategory,CipCode" />
            @*<input type="button" value="Assessment Processes" data-properties="AssessmentProcess" />*@
            @if ( isUserAdmin )
                    {
                <input type="button" value="System Management" data-properties="ManageHeader,ManagingOrgId" />
                    }
        </div>

        <div class="tabItems">

            <h2 class="tabItem" data-property="BasicInfoHeader">Basic Information</h2>
            <h2 class="tabItem" data-property="CompetencyHeader">Competencies</h2>
            <h2 class="tabItem" data-property="CIPHeader">Instructional Program Categories</h2>
            <h2 class="tabItem" data-property="ManageHeader">Management</h2>

            @* Basic Info *@
            @RenderListInput( "ManagingOrgId", "Managing Organization", ListInputSettings.InterfaceType.DROPDOWN_LIST, "Select the organization whose members can update this record.", null, enumServices.GetOrganizationsAsCodes() )

            @foreach(var item in new List<TextInputSettings>() {
                        new TextInputSettings() { Property = "Name", Label = "Assessment Name", Type = TextInputSettings.InputType.TEXT, RequireValue = true, MinimumLength = 5, Guidance = "The official name of the assessment." },
                        new TextInputSettings() { Property = "Description", Label = "Assessment Description", Type = TextInputSettings.InputType.TEXTAREA, RequireValue = true, MinimumLength = 15, Guidance = "A summary or description of the assesssment." },
                        new TextInputSettings() { Property = "SubjectWebpage", Label = "Assessment URL", Type = TextInputSettings.InputType.URL, Guidance = "The URL of a page that lists information about the assessment." },
                        new TextInputSettings() { Property = "AvailableOnlineAt", Label = "Available Online At", Type = TextInputSettings.InputType.URL, Guidance = "Provide a URL to where this assessment is available online." },
                        new TextInputSettings() { Property = "AvailabilityListing", Label = "Availability Listing", Type = TextInputSettings.InputType.URL, Guidance = "Provide a URL to a page that lists physical and/or online locations where this assessment is available." },
                        new TextInputSettings() { Property = "CodedNotation",
                            Label = "Identification Code", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the identification code for the assessment, if it has one." },
                        new TextInputSettings() { Property = "DateEffective", Label = "Effective Date", Type = TextInputSettings.InputType.DATE, Guidance = "The date that this information was first applicable." }
                      @*  ,
    new TextInputSettings() { Property = "AssessmentInformationUrl", Label = "More Information", Type=TextInputSettings.InputType.URL, Guidance = "Provide a URL that leads to more information about this assessment." }*@
            } )
            {
        @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", item )
            }

    @* Lists *@
            @RenderListInput( new ListInputSettings()
                {
                    Property = "DeliveryType",
                    Label = "Delivery Type",
                    Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
                    HasOtherBox = false,
                    Guidance = "Select the type(s) that best describe the way the assessment is delivered. Check all that apply.",
                    EnumItems = enumServices.GetEnumeration( "deliveryType", EnumerationType.MULTI_SELECT, true ).Items,
                    ExtraClasses = new List<string>() { "twoColumns" }
                } )
            @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DeliveryTypeDescription", Label = "Delivery Type Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "A more detailed, refined description of delivery type." } )
            @RenderListInput( new ListInputSettings()
                {
                    Property = "AssessmentMethodType",
                    Label = "Assessment Method Type",
                    Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
                    HasOtherBox = false,
                    Guidance = "An enumeration of assessment methods.",
                    EnumItems = enumServices.GetEnumeration( "assessmentMethodType", EnumerationType.CUSTOM ).Items
                } )

            @RenderTextInput( "AssessmentOutput", "Assessment Output", TextInputSettings.InputType.TEXTAREA, "A more precise refinement of the assessment type." )


            @RenderListInput( new ListInputSettings()
                {
                    Property = "AssessmentUseType",
                    Label = "Assessment Use Types",
                    Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
                    HasOtherBox = false,
                    Guidance = "The intended use of the assessment being referenced.",
                    EnumItems = enumServices.GetEnumeration( "assessmentUse", EnumerationType.MULTI_SELECT ).Items,
                    ExtraClasses = new List<string>() { "twoColumns" }
                } )


            @*@foreach(var item in new List<ListInputSettings>() {
                        //new ListInputSettings() { Property = "AssessmentMethodType", Label = "Assessment Method", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) that best describe the assessment. Check all that apply.", EnumItems = enumServices.GetEnumeration( "assessmentType", EnumerationType.MULTI_SELECT ).Items, ExtraClasses = new List<string>() { "twoColumns" } },
                        //new ListInputSettings() { Property = "AssessmentModalityTypeIds", Label = "Assessment Modality Types", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "The type(s) of modality through which the assessment is offered.", EnumItems = enumServices.GetEnumeration( "modality", EnumerationType.MULTI_SELECT ).Items, ExtraClasses = new List<string>() { "twoColumns" } },
                        new ListInputSettings() { Property = "DeliveryType", Label = "Delivery Type", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) that best describe the way the assessment is delivered. Check all that apply.", EnumItems = enumServices.GetEnumeration( "deliveryType", EnumerationType.MULTI_SELECT, true ).Items, ExtraClasses = new List<string>() { "twoColumns" } },
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_ListBox.cshtml", item )
                    }*@

            @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
               {
                   Property = "IsProctored",
                   Label = "Is Proctored",
                   IncludeDefaultItem = false,
                   Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST,
                   Guidance = "An administrative process that ensures the assessment is being delivered to the right person(s) under the right conditions (e.g., instructions, time, materials, equipment) and without access to unauthorized assistance (e.g., other people, references).",
                   StringItems = new Dictionary<string, string>() {
                        { "IsProctored", "" }
                    }
               } )
            @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
           {
               Property = "HasGroupEvaluation",
               Label = "Has Group Evaluation",
               IncludeDefaultItem = false,
               Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST,
               StringItems = new Dictionary<string, string>() {
                        { "HasGroupEvaluation", "" }
                    },
               Guidance = "Participants in the assessment activity being referenced are scored as a group."
           } )
            @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
           {
               Property = "HasGroupParticipation",
               Label = "Has Group Participation",
               IncludeDefaultItem = false,
               Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST,
               StringItems = new Dictionary<string, string>() {
                        { "HasGroupParticipation", "" }
                    },
               Guidance = "Completing the assessment activity being referenced requires two or more participants."
           } )
            <div class="sectionGroup">
                @RenderTextInput( "AssessmentExample", "Assessment Example", TextInputSettings.InputType.URL, "A resource that provides an example assessment or assessment item." )

                @RenderTextInput( "AssessmentExampleDescription", "Assessment Example Description", TextInputSettings.InputType.TEXTAREA, "Text of an example assessment item." )
            </div>

            <div class="sectionGroup">
                @RenderListInput( new ListInputSettings()
                 {
                     Property = "ScoringMethodType",
                     Label = "Scoring Method Type",
                     Type = ListInputSettings.InterfaceType.CHECKBOX_LIST,
                     Guidance = "Type of scoring method.",
                     EnumItems = enumServices.GetEnumerationForRadioButtons( "scoringMethod", 1 ).Items,
                     UseSmallLabel = false
                 } )


                @RenderTextInput( "ScoringMethodDescription", "Scoring Method Description", TextInputSettings.InputType.TEXTAREA, "A description of the Scoring Method ." )

                @RenderTextInput( "ScoringMethodExample", "Scoring Method Example", TextInputSettings.InputType.URL, "A resource that is an example of the method or tool used to score the assessment." )

                @RenderTextInput( "ScoringMethodExampleDescription", "Scoring Method Example Description", TextInputSettings.InputType.TEXTAREA, "The text of an example of the method or tool used to score the assessment." )
            </div>

            @RenderTextInput( "ExternalResearch", "External Research", TextInputSettings.InputType.URL, "A resource that provides information about research that supports one or more aspects of the resource being described." )

            <div class="sectionGroup">
                @RenderTextInput( "ProcessStandards", "Process Standards", TextInputSettings.InputType.URL, "A resource describing the criteria, standards, and/or requirements used." )
                @RenderTextInput( "ProcessStandardsDescription", "Process Standards Description", TextInputSettings.InputType.TEXTAREA, "A description of the criteria, standards, and/or requirements used." )
            </div>

            <div class="sectionGroup">
                @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourType", Label = "Credit Hour Type", Type = TextInputSettings.InputType.TEXT, Guidance = "Units of time corresponding to types of credits. Examples include but are not limited to semester hours, quarter hours, clock hours, or hours of participation." } )

                @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourValue", Label = "Credit Hour Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of credit hours awarded for completing or attaining the resource being described." } )

                @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings()
                   {
                       Property = "CreditUnitType",
                       Label = "Credit Unit Type",
                       Type = ListInputSettings.InterfaceType.RADIO_LIST,
                       HasOtherBox = false,
                       Guidance = "The type of credit associated with degree and non-degree learning opportunities.",
                       EnumItems = enumServices.GetEnumeration( "creditUnit", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items
                   } )


                @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings()
                   {
                       Property = "CreditUnitTypeDescription",
                       Label = "Credit Unit Type Description",
                       Type = TextInputSettings.InputType.TEXTAREA,
                       Guidance = "Provide	a more refined, detailed description of credit unit type."
                   } )

                @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings()
                   {
                       Property = "CreditUnitValue",
                       Label = "Credit Unit Value",
                       Type = TextInputSettings.InputType.NUMBER,
                       Guidance = "The number of either credit units awarded for college credit or continuing education units for completing or attaining the resource being described."
                   } )
            </div>
            @RenderTextInput( "VerificationMethodDescription", "Verification Method Description", TextInputSettings.InputType.TEXTAREA, "Description of the methods used to evaluate the validity and reliability." )
            @* Profiles *@
            @{ var parentID = Model.MainProfile.Id.ToString(); }
            @foreach ( var item in new List<ProfileSettings>() {
                        new ProfileSettings() { Property = "Duration", Profile = "DurationProfile", ParentRepeaterId = "0", Label = "Estimated Time to Complete", AddText = "Add new Time Estimate", Guidance = "Describe the estimated amount of time it would take to complete the assessment normally, and for each applicable special circumstance." },
                        new ProfileSettings() { Property = "Addresses", Profile = "AddressProfile", ParentRepeaterId = "0", Label = "Available at Addresses", AddText = "Add an Address", Guidance = "Enter addresses at which the assessment is available." },
                        new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", ParentRepeaterId = "0", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "The geographic area that this assessment information is applicable to, sans exceptions." },
                        new ProfileSettings() { Property = "AgentRole_Recipient", Profile = "AgentRoleProfile_Recipient", ParentRepeaterId = "0", Label = "Agent Roles Received", AddText = "Add new Role", Guidance = "Describe the relationships this assessment has to one or more organizations where this assessment is the recipient of the role.", UseSmallLabel = false },
                        //new ProfileSettings() { Property = "QualityAssuranceAction_Recipient", Profile = "QualityAssuranceActionProfile_Recipient", ParentRepeaterId = "0", Label = "Quality Assurance Actions Received", AddText = "Add new Quality Assurance Action", Guidance = "Describe the Quality Assurance Actions that have been applied to this assessment.", UseSmallLabel = false },
                        new ProfileSettings() { Property = "Cost", Profile = "CostProfile", Label = "Estimated Costs", AddText = "Add new Cost", Guidance = "If there are any costs associated with this assessment, describe them here.", ParentRepeaterId = "0", UseSmallLabel = false },
                        new ProfileSettings() { Property = "RequiresCompetenciesFrameworks", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Competencies Required", AddText = "Add new Competency", Guidance = "Indicate the competencies this assessment requires.", ParentRepeaterId = "0" },
                        new ProfileSettings() { Property = "AssessesCompetenciesFrameworks", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Competencies Assessed", AddText = "Add new Competency", Guidance = "Indicate the competencies this assessment assesses.", ParentRepeaterId = "0" },
                        new ProfileSettings() { Property = "Requires", Profile = "ConditionProfile", Label = "Requirements for Eligibility", AddText = "Add new Requirements", Guidance = "Indicate the prerequisites and/or requirements for taking this assessment.", ParentRepeaterId = "0", UseSmallLabel = false },
                        new ProfileSettings() { Property = "Recommends", Profile = "ConditionProfile", Label = "Recommendations for Preparation", AddText = "Add new Recommendations", Guidance = "Indicate any recommendations for preparing for this assessment.", ParentRepeaterId = "0", UseSmallLabel = false }
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", item )
                    }

            @* TextValue Profiles *@
            @*new TextValueEditorSettings() { Property = "IdentificationCodes", ParentRepeaterId = "0", Label = "Assessment Identification Codes", AddText = "Add an Identification Code", Guidance = "Codes that identify the assessment within existing frameworks", HasSelector = true, ValueType = TextInputSettings.InputType.TEXT },*@
            @foreach ( var item in new List<TextValueEditorSettings>()
                    {
                       new TextValueEditorSettings() { Property = "Subject", ParentRepeaterId = "0", Label = "Subjects", AddText = "Add a Subject", Guidance = "Enter subjects that describe this record.", ValueType = TextInputSettings.InputType.TEXT, ValuePlaceholder = "Subject" },
                        new TextValueEditorSettings() { Property = "Keyword", ParentRepeaterId = "0", Label = "Keywords", AddText = "Add a Keyword", Guidance = "Enter subjects that describe this record.", ValueType = TextInputSettings.InputType.TEXT, ValuePlaceholder = "Add a Keyword (max length of 200 characters)" },
                        new TextValueEditorSettings() { Property = "ResourceUrl", ParentRepeaterId = "0", Label = "Reference URL", AddText = "Add a Reference URL", Guidance = "Enter a URL to a useful web resource related to this assessment.", ValueType = TextInputSettings.InputType.URL },
                        new TextValueEditorSettings() { Property = "AssessmentExamples", ParentRepeaterId = "0", Label = "Assessment Example URL", AddText = "Add an Example URL", Guidance = "Enter a URL to an example of this assessment.", ValueType = TextInputSettings.InputType.URL }
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", item )
                    }

            @RenderMicroSearchInput(new MicroSearchSettings() {
                        Property = "CipCode",
                        SearchType = "CIPSearch",
                        ProfileTemplate = "CodeItem",
                        SavedItemsHeader = "Saved CIP Codes",
                        ParentRepeaterId = "0",
                        Label = "Instructional Program Category",
                        Guidance = "Identify the specific instructional program classifications that apply to this assessment. We recommend using the <a href=\"https://nces.ed.gov/ipeds/cipcode/browse.aspx?y=55\" target=\"_blank\">CIP codes</a>.",
                        ExtraClasses = new List<string>() { "tabItem" },
                        Filters = new List<MicroSearchFilter>() {
                            new MicroSearchFilter() { FilterName = "HeaderId", Type = "select", Items = cipHeaders }
                        }
                    } )

            @RenderTextValueInput( "OtherInstructionalProgramCategory", "Other Program Catgories", TextInputSettings.InputType.TEXT, "Enter an Instructional Program Category that does not exist via the search.", "Add a Program Catgory", "Add another Program Catgory", "0" )

            @*@RenderProfileInput( "AssessmentProcess", "Assessment Processes", "ProcessProfile", "Describe the processes used to select, develop, validate, or maintain the assessment.", "Add new Process Description", "0", false )*@
        </div><!-- /tabItems -->
        }
        break;

        case EditorSettings.EditorType.LEARNINGOPPORTUNITY:
        {

        <h1>@(Model.MainProfile.Id == 0 ? "New Learning Opportunity" : "Editing Learning Opportunity: " + Model.MainProfile.Name)</h1>

        <div class="tabs">
            <input type="button" class="selected" value="Basic Info" data-properties="BasicInfoHeader,Name,Description,SubjectWebpage,AvailableOnlineAt,AvailabilityListing,LearningResourceUrl,CodedNotation,DateEffective,DeliveryType,Subject,Keyword,Jurisdiction,Duration,LearningResourceUrls,Addresses,CreditHourType,CreditHourValue,CreditUnitType,CreditUnitTypeDescription,CreditUnitValue" />
            <input type="button" value="Competencies" data-properties="CompetencyHeader,RequiresCompetenciesFrameworks,TeachesCompetenciesFrameworks" />
            <input type="button" value="Instructional Program Category" data-properties="CIPHeader,OtherInstructionalProgramCategory,CipCode" />
            <input type="button" value="Organization Roles" data-properties="AgentRole_Recipient" />
            @*<input type="button" value="Quality Assurance Received" data-properties="QualityAssuranceAction_Recipient" />*@
            <input type="button" value="Estimated Costs" data-properties="Cost" />
            <input type="button" value="Embedded/Included Learning Opportunities" data-properties="EmbeddedLearningOpportunity" />
            @*<input type="button" value="Embedded/Included Assessments" data-properties="EmbeddedAssessment" />*@
            @*<input type="button" value="Eligibility Requirements" data-properties="Requires" />*@
            @*<input type="button" value="Recommendations" data-properties="Recommends" />*@
            @*<input type="button" value="Learning Opportunity Processes" data-properties="LearningOpportunityProcess" />*@
            @if ( isUserAdmin )
                    {
                <input type="button" value="System Management" data-properties="ManageHeader,ManagingOrgId" />
                    }
        </div>

        <div class="tabItems">

            <h2 class="tabItem" data-property="BasicInfoHeader">Basic Information</h2>
            <h2 class="tabItem" data-property="CompetencyHeader">Competencies</h2>
            <h2 class="tabItem" data-property="CIPHeader">Instructional Program Categories</h2>
            <h2 class="tabItem" data-property="ManageHeader">Management</h2>

            @* Basic Info *@
            @RenderListInput( "ManagingOrgId", "Managing Organization", ListInputSettings.InterfaceType.DROPDOWN_LIST, "Select the organization whose members can update this record.", null, enumServices.GetOrganizationsAsCodes() )

            @foreach(var item in new List<TextInputSettings>() {
                        new TextInputSettings() { Property = "Name", Label = "Learning Opportunity Name", Type = TextInputSettings.InputType.TEXT, RequireValue = true, MinimumLength = 5, Guidance = "The official name of the learning opportunity." },
                        new TextInputSettings() { Property = "Description", Label = "Learning Opportunity Description", Type = TextInputSettings.InputType.TEXTAREA, RequireValue = true, MinimumLength = 15, Guidance = "A summary or description of the learning opportunity." },
                        new TextInputSettings() { Property = "SubjectWebpage", Label = "Learning Opportunity URL", Type = TextInputSettings.InputType.URL, Guidance = "The URL of a page that lists information about the learning opportunity." },

                         new TextInputSettings() { Property = "AvailableOnlineAt", Label = "Available Online At", Type = TextInputSettings.InputType.URL, Guidance = "Provide a URL to where this credential is available online." },
                        new TextInputSettings() { Property = "AvailabilityListing", Label = "Availability Listing", Type = TextInputSettings.InputType.URL, Guidance = "Provide a URL to a page that lists physical and/or online locations where this learning opportunity is available." },
                         new TextInputSettings() { Property = "CodedNotation", Label = "Identification Code", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the identification code for this learning opportunity, if it has one." },
                        new TextInputSettings() { Property = "DateEffective", Label = "Effective Date", Type = TextInputSettings.InputType.DATE, Guidance = "The date that this information was first applicable." }
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", item )
                    }

            @* Lists *@
            @foreach(var item in new List<ListInputSettings>() {
                        new ListInputSettings() { Property = "DeliveryType", Label = "Delivery Type", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) that best describe the way the learning opportunity is delivered. Check all that apply.", EnumItems = enumServices.GetEnumeration( "deliveryType", EnumerationType.MULTI_SELECT, true ).Items, ExtraClasses = new List<string>() { "twoColumns" } },
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_ListBox.cshtml", item )
                    }

            @* Profiles *@
            @{ var parentID = Model.MainProfile.Id.ToString(); }
            @foreach ( var item in new List<ProfileSettings>() {
                        new ProfileSettings() { Property = "Duration", Profile = "DurationProfile", ParentRepeaterId = "0", Label = "Estimated Time to Complete", AddText = "Add new Time Estimate", Guidance = "Describe the estimated amount of time it would take to complete the learning opportunity normally, and for each applicable special circumstance." },
                        new ProfileSettings() { Property = "Addresses", Profile = "AddressProfile", ParentRepeaterId = "0", Label = "Available at Addresses", AddText = "Add an Address", Guidance = "Enter addresses at which the learning opportunity is available." },
                        new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", ParentRepeaterId = "0", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "The geographic area that this learning opportunity information is applicable to, sans exceptions." },
                        new ProfileSettings() { Property = "AgentRole_Recipient", Profile = "AgentRoleProfile_Recipient", ParentRepeaterId = "0", Label = "Agent Roles Received", AddText = "Add new Role", Guidance = "Describe the relationships this learning opportunity has to one or more organizations where this learning opportunity is the recipient of the role.", UseSmallLabel = false },
                        //new ProfileSettings() { Property = "QualityAssuranceAction_Recipient", Profile = "QualityAssuranceActionProfile_Recipient", ParentRepeaterId = "0", Label = "Quality Assurance Actions Received", AddText = "Add new Quality Assurance Action", Guidance = "Describe the Quality Assurance Actions that have been applied to this learning opportunity.", UseSmallLabel = false },
                        new ProfileSettings() { Property = "Cost", Profile = "CostProfile", Label = "Estimated Costs", AddText = "Add new Cost", Guidance = "If there are any costs associated with this learning opportunity, describe them here.", ParentRepeaterId = "0", UseSmallLabel = false },
                        new ProfileSettings() { Property = "RequiresCompetenciesFrameworks", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Competencies Required", AddText = "Add new Competency Framework and Competencies", Guidance = "Indicate the competencies this learning opportunity requires.", ParentRepeaterId = "0" },
                        new ProfileSettings() { Property = "TeachesCompetenciesFrameworks", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Competencies Taught", AddText = "Add new Competency Framework and Competencies", Guidance = "Indicate the competencies this learning opportunity teaches.", ParentRepeaterId = "0" }
                        //,
                        //new ProfileSettings() { Property = "RequiresCompetencies", Profile = "CredentialAlignmentObjectProfile", Label = "Competencies Required ****OLD*****", AddText = "Add new Competency", Guidance = "Indicate the competencies this learning opportunity requires.", ParentRepeaterId = "0" },
                        //new ProfileSettings() { Property = "TeachesCompetencies", Profile = "CredentialAlignmentObjectProfile", Label = "Competencies Taught ****OLD*****", AddText = "Add new Competency", Guidance = "Indicate the competencies this learning opportunity teaches.", ParentRepeaterId = "0" },
                    //    new ProfileSettings() { Property = "Requires", Profile = "ConditionProfile", Label = "Requirements for Eligibility", AddText = "Add new Requirements", Guidance = "Indicate the prerequisites and/or requirements for beginning this learning opportunity.", ParentRepeaterId = "0", UseSmallLabel = false },
                    //    new ProfileSettings() { Property = "Recommends", Profile = "ConditionProfile", Label = "Recommendations for Preparation", AddText = "Add new Recommendations", Guidance = "Indicate any recommendations that will help prepare for this learning opportunity.", ParentRepeaterId = "0", UseSmallLabel = false }
                    //
            } )
                    {
                @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", item )
                    }

            @* TextValue Profiles *@
                        @*new TextValueEditorSettings() { Property = "IdentificationCodes", ParentRepeaterId = "0", Label = "Learning Opportunity Identification Codes", AddText = "Add an Identification Code", Guidance = "Codes that identify the learning opportunity within existing frameworks", HasSelector = true, ValueType = TextInputSettings.InputType.TEXT },
        new TextValueEditorSettings() { Property = "ResourceUrls", ParentRepeaterId = "0", Label = "Reference URL", AddText = "Add a Reference URL", Guidance = "Provide a reference to a page that lists additional useful information about this learning opportunity.", ValueType = TextInputSettings.InputType.URL },

                        *@
            @foreach ( var item in new List<TextValueEditorSettings>()
                    {
                        new TextValueEditorSettings() { Property = "Subject", ParentRepeaterId = "0", Label = "Subjects", AddText = "Add a Subject", Guidance = "Enter subjects that describe this Learning Opportunity.", ValueType = TextInputSettings.InputType.TEXT, ValuePlaceholder = "Subject" },
                        new TextValueEditorSettings() { Property = "Keyword", ParentRepeaterId = "0", Label = "Keywords", AddText = "Add a Keyword", Guidance = "Enter subjects that describe this record.", ValueType = TextInputSettings.InputType.TEXT, ValuePlaceholder = "Add a Keyword (max length of 200 characters)" },
                   
                        new TextValueEditorSettings() { Property = "LearningResourceUrls", ParentRepeaterId = "0", Label = "Learning Resource URL", AddText = "Add a Learning Resource URL", Guidance = "URL to one or more key learning resources that are important for understanding and/or completing this learning opportunity.", ValueType = TextInputSettings.InputType.URL  }

                    } )
                    {
                @Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", item )
                    }

            @* Micro Searches *@
            @foreach(var item in new List<MicroSearchSettings>() {
                        new MicroSearchSettings() {
                            Property = "CipCode",
                            SearchType = "CIPSearch",
                            ProfileTemplate = "CodeItem",
                            SavedItemsHeader = "Saved CIP Codes",
                            ParentRepeaterId = "0",
                            Label = "Instructional Program Category",
                            Guidance = "Identify the specific instructional program classifications that apply to this learning opportunity. We recommend using the <a href=\"https://nces.ed.gov/ipeds/cipcode/browse.aspx?y=55\" target=\"_blank\">CIP codes</a>.",
                            ExtraClasses = new List<string>() { "tabItem" },
                            Filters = new List<MicroSearchFilter>() {
                                new MicroSearchFilter() { FilterName = "HeaderId", Type = "select", Items = cipHeaders }
                            }
                        },
                        new MicroSearchSettings() {
                            Property = "EmbeddedLearningOpportunity",
                            SearchType = "LearningOpportunityHasPartSearch",
                            SavedItemsHeader = "Saved Learning Opportunities",
                            ParentRepeaterId = "0",
                            Label = "Embedded/Included Learning Opportunity",
                            Guidance = "Identify any learning opportunities that are a part of this learning opportunity.",
                            HasEditProfile = true,
                            HasCreateProfile = true,
                            HasResultLink = true,
                            CreateProfileTitle = "LearningOpportunity",
                            ProfileType = "LearningOpportunity",
                            ExtraClasses = new List<string>() { "tabItem" },
                            UseSmallLabel = false,
        AllowingPopupCreate=false
                        }
                    } )
                    {
                @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", item )
                    }

            @*,
            new MicroSearchSettings()
            {
            Property = "EmbeddedAssessment",
            SearchType = "AssessmentSearch",
            Label = "Embedded Assessments",
            SavedItemsHeader = "Saved Assessments",
            ParentRepeaterId = "0",
            Guidance = "Select any significant assessment(s) that are a part of this learning opportunity.",
            HasEditProfile = true,
            HasCreateProfile = true,
            CreateProfileTitle = "Assessment",
            ProfileType = "Assessment",
            UseSmallLabel = false,
            AllowingPopupCreate=false
            }*@

            @RenderTextValueInput( "OtherInstructionalProgramCategory", "Other Program Catgories", TextInputSettings.InputType.TEXT, "Enter an Instructional Program Category that does not exist via the search.", "Add a Program Catgory", "Add another Program Catgory", "0" )

            @RenderProfileInput( "LearningOpportunityProcess", "Learning Opportunity Processes", "ProcessProfile", "Describe the processes used to select, develop, validate, or maintain the Learning Opportunity.", "Add new Process Description", "0", false )


            <div class="sectionGroup">

                @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourType", Label = "Credit Hour Type", Type = TextInputSettings.InputType.TEXT, Guidance = "Units of time corresponding to types of credits. Examples include but are not limited to semester hours, quarter hours, clock hours, or hours of participation." } )

                @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditHourValue", Label = "Credit Hour Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of credit hours awarded for completing or attaining the resource being described." } )

                @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CreditUnitType", Label = "Credit Unit Type", Type = ListInputSettings.InterfaceType.RADIO_LIST, HasOtherBox = false, Guidance = "The type of credit associated with degree and non-degree learning opportunities.", EnumItems = enumServices.GetEnumeration( "creditUnit", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )


                @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitTypeDescription", Label = "Credit Unit Type Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Provide	a more refined, detailed description of credit unit type.<" } )
                @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CreditUnitValue", Label = "Credit Unit Value", Type = TextInputSettings.InputType.NUMBER, Guidance = "The number of either credit units awarded for college credit or continuing education units for completing or attaining the resource being described." } )
            </div>




        </div><!-- /tabItems -->
        }
        break;

        default: break;
        }
    </div><!-- /profile -->
</div>
<div id="globalButtons">
    <div id="history"><div class="profileHistory" data-hasupdate="false">Last Updated: <span class="profileHistoryUser"></span>, <span class="profileHistoryTimestamp"></span></div></div>
    <div id="globalInputs">
        <input type="button" class="actionButton" value="Save Data" onclick="doGlobalSave(this);" />
        <input type="button" value="Preview" onclick="doGlobalPreview();" />
@if ( isUserAdmin ) { 
        <input type="button" class="redButton" value="Delete" onclick="doGlobalDelete(this);" />
}
    </div>
</div>
<div id="overlay"></div>
<div id="profiles"></div>


@* Templates *@

@* Editor List Item *@
<script type="text/template" id="template_profileListItem">
    <div class="profileItem" data-repeaterID="{repeaterID}">
        <div class="name">{Name}</div>
        <div class="buttons">
            <input type="button" class="actionButton" value="Edit" onclick="editProfile({repeaterID}, this);" />
            <input type="button" class="redButton" value="Delete" onclick="deleteProfile({repeaterID}, this);" />
        </div>
    </div>
</script>

@* Duration Profile *@
<script type="text/template" id="template_DurationProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "DurationProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )

        <div class="radioSelector propertyBox" data-sectionProperty="IsRange">
            <div class="mainGuidance">Provide either an exact duration or a minimum and maximum duration.</div>
            <div class="radioSection exact selected">
                <label class="radioButton"><input type="radio" data-sectionValue="false" name="duration_{repeaterID}" checked="checked" /></label>
                <div class="label">Exact Duration</div>
                <div class="data">
                    @Html.Partial( "~/Views/Editor/_DurationEditor.cshtml", "ExactDuration" )
                </div>
                <div class="radioCover"></div>
            </div>
            <div class="radioSection range">
                <label class="radioButton"><input type="radio" data-sectionValue="true" name="duration_{repeaterID}" /></label>
                <div class="label">Minimum Duration</div>
                <div class="data">
                    @Html.Partial( "~/Views/Editor/_DurationEditor.cshtml", "MinimumDuration" )
                </div>
                <div class="label">Maximum Duration</div>
                <div class="data">
                    @Html.Partial( "~/Views/Editor/_DurationEditor.cshtml", "MaximumDuration" )
                </div>
                <div class="radioCover"></div>
            </div>
        </div>

        @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Provide any useful further description, such as special conditions under which the above information applies, here." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>


@* Jurisdiction *@
<script type="text/template" id="template_JurisdictionProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "JurisdictionProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this Jurisdiction and provide any additional necessary information." } )

        @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { 
            Property = "", 
            Label = "Special Jurisdictions", 
            IncludeDefaultItem = false, 
            Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST, 
            StringItems = new Dictionary<string, string>() { 
                { "IsGlobalJurisdiction", "The jurisdiction is global/worldwide" },
                
            }
        } )

        @{
            var locationTypes = new MicroSearchFilter()
            {
                FilterName = "LocationType",
                Type = "select",
                Items = new Dictionary<string, string>() { 
                    //{ "CONT,ADMD,ADM1,ADM2,PCL*,PPL*", "Search for all location types" },
                    { "", "Search for all location types" },
                    { "PPL,PPLA1,PPLA2", "Search for Cities/Villages" },
                    { "ADMD,ADM1,ADM2", "Search for States/Provinces/Counties/Regions" },
                    { "CONT,PCL*", "Search for Continents and Countries" }
                }
            };
        }

        @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
        {
            Property = "MainRegion",
            SearchType = "RegionSearch",
            ProfileTemplate = "Region",
            SavedItemsHeader = "Saved Regions",
            Label = "Main Region",
            PageSize = 5,
            Guidance = "Describe the primary region for this item.",
            Filters = new List<MicroSearchFilter>() { locationTypes },
            AllowMultipleSavedItems = false,
            //DoAjaxSave = false,
            AutoSaveNewParentProfile = true,
            StaticSelectorValues = new Dictionary<string, object>() { { "IsException", false } }
        } )

        @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
        {
            Property = "RegionException",
            SearchType = "RegionSearch",
            ProfileTemplate = "Region",
            SavedItemsHeader = "Saved Exceptions",
            Label = "Region Exceptions",
            PageSize = 5,
            Guidance = "If the primary region contains any sub-regions where the item does <b>not</b> apply, select them here.",
            Filters = new List<MicroSearchFilter>() { locationTypes },
            //DoAjaxSave = false,
            AutoSaveNewParentProfile = true,
            StaticSelectorValues = new Dictionary<string, object>() { { "IsException", true } }
        } )

        <p class="guidance" style="text-align: right; padding-right: 10px;">Location search data by <a href="http://geonames.org" target="_blank">GeoNames.org</a></p>

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>


@* Agent Role (Recipient) SHOW FOR CREDENTIAL AGENT ROLES *@
<script type="text/template" id="template_AgentRoleProfile_Recipient">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "AgentRoleProfile_Recipient", IncludeName = false, Type = ProfileSettings.ModelType.WRAPPER_START } )

        @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "RoleTypeIds", Label = "Agent Roles", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) of relationship the selected organization has to this Item. Check all that apply.  (** roles.Items **)", EnumItems = roles.Items, ExtraClasses = new List<string>() { "twoColumns" } } )

        @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
        {
            Property = "Actor",
            SearchType = "OrganizationSearch",
            Label = "Acting Organization",
            Guidance = "Select the organization that performs the role(s) you selected.",
            SavedItemsHeader = "Selected Organization",
            ProfileType = "Organization",
            AllowMultipleSavedItems = false,
            DoAjaxSave = false,
            PageSize = 5,
            HasEditProfile = true,
            StaticSelectorValues = new Dictionary<string, object>()
            {
                { "Property", "Actor" }
            },
            HasCreateProfile = true,
            CreateProfileTitle = "Organization",
            HasResultLink = true,
            AllowingPopupCreate = false
        } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Agent Role (Actor) *@
<script type="text/template" id="template_AgentRoleProfile_Actor">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "AgentRoleProfile_Actor", Type = ProfileSettings.ModelType.WRAPPER_START } )

    
        @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "RoleTypeIds", Label = "Agent Roles", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) of relationship the selected organization has to this Organization. Check all that apply.", EnumItems = enumServices.GetAllAgentReverseRoles( EnumerationType.CUSTOM ).Items, ExtraClasses = new List<string>() { "twoColumns" } } )

        @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
        {
            Property = "Actor",
            Label = "Acting Organization",
            Guidance = "Select the organization that performs the role(s) you selected.",
            ProfileType = "Organization",
            AllowMultipleSavedItems = false
        } )
    

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Condition Profile *@
<script type="text/template" id="template_ConditionProfile">
    @*,    { "Other Tasks", "Task" }*@
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "ConditionProfile", Type = ProfileSettings.ModelType.WRAPPER_START, HasTabs = true, TabItems = new Dictionary<string, string>() {

            { "Basic Info", "Name,Description,DateEffective,Experience,ConditionProvider,AudienceTypeIds,YearsOfExperience,MinimumAge,RequiresCompetencies,ConditionItem,ReferenceUrl,Jurisdiction,Residency,Competency,MiniCompetency,Weight" },
            { "Credentials", "Credential,EducationLevelIds" },
            { "Assessments", "Assessment" },
            { "Learning Opportunities", "LearningOpportunity" }
        }
    } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )
    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Experience", Label = "Experience", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "List any equivalent work, educational, and/or experiential experience someone must have to meet this condition's criteria.<" } )
    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DateEffective", Label = "Effective Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate when this information first took effect." } )
    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Weight", Label = "Weight", Type = TextInputSettings.InputType.NUMBER, Guidance = "Provide a number between 0 and 1 that indicates the significance of these conditions." } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "ConditionProvider",
        SearchType = "OrganizationSearch",
        Label = "Condition Provider",
        Guidance = "Select the organization that asserts this information.",
        SavedItemsHeader = "Selected Organization",
        PageSize = 5,
        AllowMultipleSavedItems = false,
        DoAjaxSave = false,
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Organization",
        ProfileType = "Organization",
        AllowingPopupCreate=false
    } )

    @Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "ConditionItem", Label = "Condition Items", AddText = "Add new Condition Item", Guidance = "Enter any individual specific conditions or requirements." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "RequiresCompetencies", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Competencies", AddText = "Add new Competency", Guidance = "Provide any competencies that this information requires or applies to." } )

    @*@Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "MiniCompetency", Label = "Competencies", AddText = "Add new Competency", Guidance = "Enter any relevant competencies along with the URLs to look them up.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://", HasOther = true, OtherPlaceholder = "Competency"} )*@

    @Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "ReferenceUrl", Label = "Reference URL", AddText = "Add new Reference URL", Guidance = "Enter a URL to a useful web resource related to these conditions.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://" } )
    @*, HasOther = true, OtherPlaceholder = "Reference Name"*@
    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "AudienceTypeIds", Label = "Applicable Audience", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Indicate to which specific audience(s) these conditions apply. If there are no restrictions, do not check any options.", EnumItems = enumServices.GetEnumeration( "applicableAudienceType" ).Items } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "Credential",
        SearchType = "CredentialSearch",
        Label = "Applicable Credential",
        SavedItemsHeader = "Saved Credentials",
        Guidance = "Select any other credential(s) that these conditions require or apply to.",
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Credential",
        ProfileType = "Credential",
        AllowingPopupCreate = false
    } )
    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "YearsOfExperience", Label = "Years of Experience", Type = TextInputSettings.InputType.NUMBER, Guidance = "Indicate the minimum years of experience, if applicable." } )
    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "MinimumAge", Label = "Minimum Age", Type = TextInputSettings.InputType.NUMBER, Guidance = "Indicate the minimum required age in years, if applicable." } )

    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "EducationLevelIds", Label = "Education Level", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the education level someone is required to have. Check all that apply.", EnumItems = enumServices.GetAudienceLevel( EnumerationType.CUSTOM ).Items, ExtraClasses = new List<string>() { "twoColumns" }, IncludeDefaultItem = false } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Residency", Profile = "JurisdictionProfile", Label = "Residency", AddText = "Add new Residency Condition", Guidance = "If someone must be a resident of a given place in order for these conditions to apply to that person, indicate the valid place(s) here." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Select the place(s) where this information is applicable, independent of any residency requirements." } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "Assessment",
        SearchType = "AssessmentSearch",
        Label = "Applicable Assessment",
        SavedItemsHeader = "Saved Assessments",
        Guidance = "Select any assessment(s) that these conditions require or apply to.",
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Assessment",
        ProfileType = "Assessment",
        AllowingPopupCreate = false
    } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "LearningOpportunity",
        SearchType = "LearningOpportunitySearch",
        Label = "Applicable Learning Opportunity",
        SavedItemsHeader = "Saved Learning Opportunities",
        Guidance = "Select any learning opportunity(ies) that these conditions require or apply to.",
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Learning Opportunity",
        ProfileType = "LearningOpportunity",
        AllowingPopupCreate = false
    } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Task", Profile = "TaskProfile", Label = "Other Task", AddText = "Add new Task", Guidance = "If there are any additional tasks that require a deeper description than the condition items allow for, are not assessments or learning opportunities, and/or have a cost associated with them, indicate them here." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END, HasTabs = true } )
</script>

@* Task Profile *@
<script type="text/template" id="template_TaskProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "TaskProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Describe the task." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DateEffective", Label = "Effective Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate when this information first took effect." } )

    @RenderTextValueInput( "ResourceUrl", "Resource URL", TextInputSettings.InputType.URL, "Provide a URL to an additional resource relevant to the entity being described.", "Add new Resource", "http://" )

    @RenderTextInput( "AvailableOnlineAt", "Available Online At", TextInputSettings.InputType.URL, "Provide a URL to where this task is available online." )

    @RenderTextInput( "AvailabilityListing", "Availability Listing", TextInputSettings.InputType.URL, "Provide a URL to a page that lists physical and/or online locations where this task is available." )

    @RenderProfileInput( "Addresses", "Available at Addresses", "AddressProfile", "Addresses at which the task is available.", "Add an Address" )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "TaskProvider",
        SearchType = "OrganizationSearch",
        Label = "Task Provider",
        Guidance = "Select the organization that is responsible for providing and/or maintaining this task.",
        SavedItemsHeader = "Selected Organization",
        AllowMultipleSavedItems = false,
        DoAjaxSave = false,
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Organization",
        ProfileType = "Organization",
        AllowingPopupCreate = false
    } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Cost", Profile = "CostProfile", Label = "Cost", AddText = "Add new Cost", Guidance = "If there are any costs associated with this task, describe them here." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Duration", Profile = "DurationProfile", Label = "Duration", AddText = "Add new Duration", Guidance = "Estimate how long it will take to complete this task." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Select the place(s) where this information is applicable, independent of any residency requirements." } )
    
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Cost Profile *@
<script type="text/template" id="template_CostProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CostProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Briefly summarize the nature of this cost, and provide any other noteworthy details not covered in the items below." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "StartDate", Label = "Start Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the start date of the validity of this information." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EndDate", Label = "End Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the end date of the validity of this information." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DetailsUrl", Label = "Cost Details Url", Type = TextInputSettings.InputType.URL, Guidance = "Indicate a URL for details about this cost." } )
    @Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "ReferenceUrl", Label = "Reference URLs", AddText = "Add new Reference URL", Guidance = "Enter a URL to a useful web resource related to these conditions.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://" } )
    @*, HasOther = true, OtherPlaceholder = "Reference Name"*@

    @*@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Currency", Label = "Currency", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO Currency Code</a> for the currency used in this cost profile." } )*@

    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CurrencyTypeId", Label = "Currency Type", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "Select the type of currency that the costs for this item are measured in.", EnumItems = enumServices.GetCurrencies( EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "CostItem", Profile = "CostItemProfile", Label = "Cost Items", AddText = "Add new Cost Item", Guidance = "Describe the individual costs." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Select the place(s) where this information is applicable." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Cost Item Profile *@
<script type="text/template" id="template_CostItemProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CostItemProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )

    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "CostTypeId", Label = "Cost Type", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "Select the type of cost.", EnumItems = enumServices.GetEnumeration( "costType", EnumerationType.SINGLE_SELECT_ID_ONLY ).Items } )

    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "ResidencyTypeIds", Label = "Residency Type(s)", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) residency to which this cost item applies.", EnumItems = enumServices.GetEnumeration( "residencyType", EnumerationType.MULTI_SELECT ).Items } )

    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "EnrollmentTypeIds", Label = "Enrollment Type(s)", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the type(s) of enrollment to which this cost item applies.", EnumItems = enumServices.GetEnumeration( "enrollmentType", EnumerationType.MULTI_SELECT ).Items } )

    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "AudienceTypeIds", Label = "Applicable Audience(s)", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Select the specific type(s) of audience to which this cost item applies. If the cost applies to all, do not check any options.", EnumItems = enumServices.GetEnumeration( "applicableAudienceType", EnumerationType.MULTI_SELECT ).Items } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Price", Label = "Price", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the cost in the financial units indicated above." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Payments", Label = "Payment Pattern", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Describe the nature of payment(s) for this cost item." } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "Recipient",
        SearchType = "OrganizationSearch",
        Label = "Payment Recipient",
        Guidance = "Select the organization to which this cost will be paid.",
        SavedItemsHeader = "Selected Recipient",
        AllowMultipleSavedItems = false,
        DoAjaxSave = false,
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Organization",
        ProfileType = "Organization",
        AllowingPopupCreate = false
    } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Credential Alignment Object Profile *@
<script type="text/template" id="template_CredentialAlignmentObjectProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CredentialAlignmentObjectProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Competency Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the name of the competency." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Competency Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Describe the competency." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "TargetUrl", Label = "Competency URL", Type = TextInputSettings.InputType.URL, Guidance = "Provide the URL of the competency." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "TargetDescription", Label = "Target Description", Type = TextInputSettings.InputType.TEXT, Guidance = "Competency Target Description." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CodedNotation", Label = "Notation Code", Type = TextInputSettings.InputType.TEXT, Guidance = "If the competency has a code or identifier, provide it here." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Credential Alignment Object Profile (Split) *@
<script type="text/template" id="template_CredentialAlignmentObjectFrameworkProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CredentialAlignmentObjectFrameworkProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EducationalFrameworkName", Label = "Educational Framework Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Official name of the educational framework." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EducationalFrameworkUrl", Label = "Educational Framework URL", Type = TextInputSettings.InputType.URL, Guidance = "URL to the educational framework. Note that blank URL fields for competencies entered below will have the value of this field inserted automatically when you save the profile." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Items", Profile = "CredentialAlignmentObjectItemProfile", Label = "Competencies", AddText = "Add new Competency", Guidance = "Add each applicable competency that is a part of this framework." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Credential Alignment Object Profile Item (Split) *@
<script type="text/template" id="template_CredentialAlignmentObjectItemProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "CredentialAlignmentObjectItemProfile", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName = false } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Name", Label = "Competency Name", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the name of the competency." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Competency Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Describe the competency." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "TargetUrl", Label = "Competency URL (override)", Type = TextInputSettings.InputType.URL, Guidance = "Provide the URL of the competency. This will override the URL used in the Framework." } )
    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "AlignmentDate", Label = "Alignment Date", Type = TextInputSettings.InputType.DATE, Guidance = "Enter the date that this competency was aligned to this entity." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "CodedNotation", Label = "Notation Code", Type = TextInputSettings.InputType.TEXT, Guidance = "If the competency has a code or identifier, provide it here." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Revocation Profile *@
<script type="text/template" id="template_RevocationProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "RevocationProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )

    @*@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "RevocationCriteriaTypeIds", Label = "Revocation Criteria", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "Indicate the criteria that will lead to the credential being revoked. Check all that apply.", EnumItems = enumServices.GetEnumeration( "revocationCriteriaType", EnumerationType.MULTI_SELECT ).Items } )*@

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "RevocationCriteriaUrl", Label = "Revocation Criteria", Type = TextInputSettings.InputType.URL, Guidance = "Enter a URL to a page that lists the criteria for revocation.", Placeholder = "http://" } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )

    @RenderTextValueInput( new TextValueEditorSettings() { Property = "RevocationItems", ParentRepeaterId = "0", Label = "Revocation Items", AddText = "Add an Item", Guidance = "List any particular factors that help describe the revocation conditions.", ValueType = TextInputSettings.InputType.TEXT } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DateEffective", Label = "Date Effective", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the effective date of the validity of this information." } )

    @*@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EndDate", Label = "End Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate the end date of the validity of this information." } )*@

    @Html.Partial( "~/Views/Editor/_TextValueEditor.cshtml", new TextValueEditorSettings() { Property = "ReferenceUrl", Label = "Reference URL", AddText = "Add new Reference URL", Guidance = "Enter a URL to a useful web resource related to these conditions.", ValueType = TextInputSettings.InputType.URL, ValuePlaceholder = "http://" } )
    @*, HasOther = true, OtherPlaceholder = "Reference Name"*@

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Select the place(s) where this information is applicable." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Quality Assurance Action *@
<script type="text/template" id="template_QualityAssuranceActionProfile_Recipient">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "QualityAssuranceActionProfile_Recipient", Type = ProfileSettings.ModelType.WRAPPER_START, IncludeName=false } )
    
        @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
        {
            Property = "Actor",
            SearchType = "QAOrganizationSearch",
            Label = "Acting Organization",
            Guidance = "Select the organization that performed this quality assurance.",
            SavedItemsHeader = "Selected Organization",
            PageSize = 5,
            AllowMultipleSavedItems = false,
            DoAjaxSave = false,
            HasEditProfile = true,
            ProfileType = "Organization",
            AllowingPopupCreate = false
        } )

      @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "QualityAssuranceTypeId", Label = "Agent Roles", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "Select the type of quality assurance action.", EnumItems = qaRoles.Items } )

        @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
        {
            Property = "IssuedCredential",
            SearchType = "QACredentialSearch",
            Label = "Quality Assurance Issued",
            Guidance = "Select the quality assurance credential that was issued to this item by the acting organization.",
            SavedItemsHeader = "Selected Quality Assurance",
            PageSize = 5,
            AllowMultipleSavedItems = false,
            DoAjaxSave = false,
            HasEditProfile = true,
            HasCreateProfile = true,
            CreateProfileTitle = "Credential",
            ProfileType = "Credential",
            AllowingPopupCreate = false
        } )
        @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "ActionStatusTypeId", Label = "Action Status", Type = ListInputSettings.InterfaceType.DROPDOWN_LIST, HasOtherBox = false, Guidance = "Select the status for this assurance action.", EnumItems = enumServices.GetEnumeration( "actionStatusType", EnumerationType.SINGLE_SELECT, false ).Items } )

        @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "StartDate", Label = "Assurance Start Date", Type = TextInputSettings.InputType.DATE, Guidance = "The date the assurance took effect." } )

        @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "EndDate", Label = "Assurance End Date", Type = TextInputSettings.InputType.DATE, Guidance = "The date the assurance expires" } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
        {
            Property = "ParticipantAgent",
            SearchType = "OrganizationSearch",
            Label = "Participanting Agent",
            Guidance = "Select the organization that participates in this action.",
            SavedItemsHeader = "Selected Participant",
            PageSize = 5,
            AllowMultipleSavedItems = false,
            DoAjaxSave = false,
            HasEditProfile = true,
            ProfileType = "Organization",
            AllowingPopupCreate = false
        } )
        @*
            @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
            {
                Property = "SecondaryActor",
                SearchType = "OrganizationSearch",
                Label = "Participating Organizations",
                Guidance = "If any other organizations participated in issuing this quality assurance, indicate them here.",
                PageSize = 5,
                DoAjaxSave = false
            } )
        *@

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this Quality Assurance and provide any additional necessary information." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Verification Service Profile *@
<script type="text/template" id="template_VerificationServiceProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "VerificationServiceProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Describe the task." } )

    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { 
        Property = "", 
        Label = "Authorized Verification", 
        IncludeDefaultItem = false, 
        Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST, 
        StringItems = new Dictionary<string, string>() { 
            { "HolderMustAuthorize", "The holder of the credential must authorize this service" },
        }
    } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "DateEffective", Label = "Effective Date", Type = TextInputSettings.InputType.DATE, Guidance = "Indicate when this information first took effect." } )

    @RenderTextInput( "VerificationServiceUrl", "Verification Service Url", TextInputSettings.InputType.URL, "A resource that provides a means of accessing the verification service." )

    @*@RenderListInput( "ClaimType", "Claim Type", ListInputSettings.InterfaceType.CHECKBOX_LIST, "The type of claim type provided through a verification service.", enumServices.GetEnumeration( "claimType",
    EnumerationType.MULTI_SELECT, false, true ).Items )*@

    @Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { Property = "ClaimType", Label = "Claim Type", Type = ListInputSettings.InterfaceType.CHECKBOX_LIST, HasOtherBox = false, Guidance = "The type of claim type provided through a verification service. Check all that apply.", EnumItems = enumServices.GetEnumeration( "claimType",
    EnumerationType.MULTI_SELECT, false, true ).Items } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "Credential",
        SearchType = "CredentialSearch",
        Label = "Applicable Credential",
        SavedItemsHeader = "Saved Credentials",
        PageSize = 5,
        Guidance = "Select the credential(s) that this service applies to.",
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Credential",
        ProfileType = "Credential",
        DoAjaxSave = false,
        AllowMultipleSavedItems = false,
        AllowingPopupCreate = false
    } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Jurisdiction", Profile = "JurisdictionProfile", Label = "Jurisdiction", AddText = "Add new Jurisdiction", Guidance = "Select the place(s) where this information is applicable." } )
    
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Property = "Cost", Profile = "CostProfile", Label = "Cost", AddText = "Add new Cost", Guidance = "If there are any costs associated with this service, describe them here." } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Process Profile *@
<script type="text/template" id="template_ProcessProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings()
{
    Profile = "ProcessProfile",
    Type = ProfileSettings.ModelType.WRAPPER_START,
    HasTabs = true,
    TabItems = new Dictionary<string, string>() {
            { "Basic Info", "Name,Description,DateEffective,ProcessMethod,ExternalInput,StaffEvaluationMethod,ProcessingAgent,TargetCompetencyFramework,DecisionInformationUrl,OfferedByDirectoryUrl,PublicInformationUrl,StaffEvaluationUrl,OutcomeReviewUrl,PoliciesAndProceduresUrl,ProcessCriteriaUrl,ProcessCriteriaValidationUrl,ProcessFrequency,StaffSelectionCriteriaUrl,Jurisdiction" }
        }
    } )

    @*{ "Credentials", "TargetCredential" },
    { "Assessments", "TargetAssessment" },
    { "Learning Opportunities", "TargetLearningOpportunity" }*@

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "ProcessingAgent",
        SearchType = "OrganizationSearch",
        Label = "Process Provider",
        Guidance = "Select the agent that processes this information.",
        SavedItemsHeader = "Selected Agent",
        PageSize = 5,
        AllowMultipleSavedItems = false,
        DoAjaxSave = false,
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Organization",
        ProfileType = "Organization",
        AllowingPopupCreate = false
    } )

    @RenderListInput( "ExternalInput", "External Input Type", ListInputSettings.InterfaceType.CHECKBOX_LIST, "The type(s) of external stakeholders that provide input to the processes.", enumServices.GetEnumeration( "externalInputType", EnumerationType.MULTI_SELECT, false, true ).Items )

  

    @*@RenderListInput( "StaffEvaluationMethod", "Staff Evaluation Method", ListInputSettings.InterfaceType.CHECKBOX_LIST, "An indication of how staff are evaluated.", enumServices.GetEnumeration( "staffEvaluationMethod", 
    EnumerationType.MULTI_SELECT, false, true ).Items )*@

    @RenderTextInput( "TargetCompetencyFramework", "Competency Framework", TextInputSettings.InputType.TEXT, "Optionally provide the competency framework whose process is being described by this profile." )

    @foreach ( var item in new List<ProfileSettings>() {
    new ProfileSettings() { Property = "RequiresCompetenciesFrameworks", Profile = "CredentialAlignmentObjectFrameworkProfile", Label = "Competencies", AddText = "Add new Competency", Guidance = "Indicate the competencies this process uses.", ParentRepeaterId = "0"  }
    } )
    {
        @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", item )
    }
    <div>
    @*@RenderTextInput( "DecisionInformationUrl", "Decision Information Url", TextInputSettings.InputType.URL, "The types of decisions that are made about the described process and how they are defined." )

    @RenderTextInput( "OfferedByDirectoryUrl", "Offered By Directory Url", TextInputSettings.InputType.URL, "A directory or directories of providers and their current statuses." )

    @RenderTextInput( "PublicInformationUrl", "Public Information Url", TextInputSettings.InputType.URL, "A description of the information about the described process." )

    @RenderTextInput( "StaffEvaluationUrl", "Staff Evaluation Url", TextInputSettings.InputType.URL, "A description of how staff are evaluated." )

    @RenderTextInput( "OutcomeReviewUrl", "Outcome Review Url", TextInputSettings.InputType.URL, "A resource describing how outcomes are reviewed." )

    @RenderTextInput( "PoliciesAndProceduresUrl", "Policies And Procedures Url", TextInputSettings.InputType.URL, "A description of policies and procedures that govern the process." )

    @RenderTextInput( "ProcessCriteriaUrl", "Process Criteria Url", TextInputSettings.InputType.URL, "A resource describing criteria/standards/requirements used in a process." )

    @RenderTextInput( "ProcessCriteriaValidationUrl", "Process Criteria Validation Url", TextInputSettings.InputType.URL, "A process used to validate the criteria." )

    @RenderTextInput( "StaffSelectionCriteriaUrl", "Staff Selection Criteria Url", TextInputSettings.InputType.URL, "Criteria for selecting staff to perform the described process." )*@
    </div>
    @RenderTextInput( "ProcessFrequency", "Process Frequency", TextInputSettings.InputType.TEXT, "How often the process recurs." )


    @RenderTextInput( "ProcessMethod", "Process Method", TextInputSettings.InputType.URL, "	A resource that describes the process methods." )
    @RenderTextInput( "ProcessMethodDescription", "Process Method Description", TextInputSettings.InputType.TEXTAREA, "A more detailed refinement of the process methods.", true, 15 )

    @RenderTextInput( "ProcessStandards", "ProcessS tandards", TextInputSettings.InputType.URL, "A resource describing the criteria, standards, and/or requirements used." )
    @RenderTextInput( "ProcessStandardsDescription", "Process Standards Description", TextInputSettings.InputType.TEXTAREA, "A description of the criteria, standards, and/or requirements used.", true, 15 )

    @RenderTextInput( "ScoringMethodDescription", "Scoring Method Description", TextInputSettings.InputType.TEXTAREA, "The method used to score the assessment.", true, 15 )
    @RenderTextInput( "ScoringMethodExample", "Scoring Method Example", TextInputSettings.InputType.URL, "A resource that is an example of the method or tool used to score the assessment." )
    @RenderTextInput( "ScoringMethodExampleDescription", "Scoring Method Example Description", TextInputSettings.InputType.TEXTAREA, "The text of an example of the method or tool used to score the assessment.", true, 15 )

    @RenderTextInput( "VerificationMethodDescription", "Verification Method Description", TextInputSettings.InputType.TEXTAREA, "Description of the methods used to evaluate the resource validity and reliability.", true, 15 )


    @RenderProfileInput( "Jurisdiction", "Jurisdiction", "JurisdictionProfile", "The geographic area that the process profile is applicable to, sans exceptions.", "Add new Jurisdiction" )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "TargetCredential",
        SearchType = "CredentialSearch",
        Label = "Target Credential",
        SavedItemsHeader = "Saved Credentials",
        Guidance = "Select a credential that is the focus of the resource being described.",
        AllowMultipleSavedItems = false,
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Target Credential",
        ProfileType = "Credential",
        AllowingPopupCreate = false
    } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "TargetAssessment",
        SearchType = "AssessmentSearch",
        Label = "Target Assessment",
        SavedItemsHeader = "Saved Assessments",
        Guidance = "Select an assessment being referenced.",
        AllowMultipleSavedItems = false,
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Target Assessment",
        ProfileType = "Assessment",
        AllowingPopupCreate = false
    } )

    @Html.Partial( "~/Views/Editor/_MicroSearch.cshtml", new MicroSearchSettings()
    {
        Property = "TargetLearningOpportunity",
        SearchType = "LearningOpportunitySearch",
        Label = "Applicable Learning Opportunity",
        SavedItemsHeader = "Saved Learning Opportunities",
        Guidance = "Select a Learning Opportunity that is the focus of the resource being described.",
        AllowMultipleSavedItems = false,
        HasEditProfile = true,
        HasCreateProfile = true,
        CreateProfileTitle = "Learning Opportunity",
        ProfileType = "LearningOpportunity",
        AllowingPopupCreate = false
    } )


    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Earnings Profile *@
<script type="text/template" id="template_EarningsProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "EarningsProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )



    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Employment Outcome Profile *@
<script type="text/template" id="template_EmploymentOutcomeProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "EmploymentOutcomeProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )



    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Holder Profile *@
<script type="text/template" id="template_HolderProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "HolderProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )



    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Address Profile *@
<script type="text/template" id="template_AddressProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "AddressProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )

        @RenderMicroSearchInput( new MicroSearchSettings() {
            Property = "AddressSelect",
            SearchType = "AddressSearch",
            Label = "Existing Address",
            ProfileTemplate = "Address",
            SavedItemsHeader = "",
            PageSize = 5,
            Guidance = "Add a copy of a previously-saved address, or enter a new address below.",
            DoAjaxSave = false,
            AllowMultipleSavedItems = false,
            ExtraClasses = new List<string>() { "hideSavedResults" }
        } )

        @*@Html.Partial( "~/Views/Editor/_ListBox.cshtml", new ListInputSettings() { 
            Property = "", 
            Label = "Main Address", 
            IncludeDefaultItem = false, 
            Type = ListInputSettings.InterfaceType.BOOLEAN_CHECKBOX_LIST, 
            EnableUncheck = false,
            StringItems = new Dictionary<string, string>() { 
                { "IsMainAddress", "This is the main/official/headquarters address" }
            }
        } )*@

        @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Address1", Label = "Address Line 1", Type = TextInputSettings.InputType.TEXT, Guidance = "" } )

        @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Address2", Label = "Address Line 2", Type = TextInputSettings.InputType.TEXT, Guidance = "" } )

        @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "City", Label = "City", Type = TextInputSettings.InputType.TEXT, Guidance = "" } )

        @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Region", Label = "State/Province", Type = TextInputSettings.InputType.TEXT, Guidance = "" } )

        @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "PostalCode", Label = "Postal Code", Type = TextInputSettings.InputType.TEXT, Guidance = "" } )

        @*@Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Country", Label = "Country", Type = TextInputSettings.InputType.TEXT, Guidance = "" } )*@
        @RenderListInput( "CountryId", "Country", ListInputSettings.InterfaceType.DROPDOWN_LIST, "Select Country", null, enumServices.GetCountries() )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Starter Profile - used for "Create New" functions in micro searches *@
<script type="text/template" id="template_StarterProfile">
    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Profile = "StarterProfile", Type = ProfileSettings.ModelType.WRAPPER_START } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Description", Label = "Description", Type = TextInputSettings.InputType.TEXTAREA, Guidance = "Summarize this information." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "Url", Label = "Url", Type = TextInputSettings.InputType.TEXT, Guidance = "Provide the URL to this item." } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "ProfileType", Type = TextInputSettings.InputType.HIDDEN } )

    @Html.Partial( "~/Views/Editor/_PropertyBox.cshtml", new TextInputSettings() { Property = "SearchType", Type = TextInputSettings.InputType.HIDDEN } )

    @Html.Partial( "~/Views/Editor/_ProfileBox.cshtml", new ProfileSettings() { Type = ProfileSettings.ModelType.WRAPPER_END } )
</script>

@* Text Value Profiles *@
<script type="text/template" id="template_TextValueProfile">
    <div class="textValueProfile" data-recordID="{RecordId}" data-rowID="{RowId}" data-hasSelector="{HasSelector}" data-textValueID="{textValueID}">
        <div class="textValueSelectorBox" data-hasOther="{HasOther}">
            <select class="textValueSelector"></select>
            <input type="text" class="textValueOther" placeholder="{OtherPlaceholder}" data-required="{RequireOther}" />
        </div>
        <div class="textValueValueBox">
            <input type="text" class="textValueValue" data-type="{ValueType}" placeholder="{ValuePlaceholder}" data-required="{RequireValue}" />
            <input type="button" class="textValueDelete redButton" value="Delete" onclick="deleteTextValueProfile('{textValueName}', '{textValueID}', this);" />
        </div>
    </div>
</script>

@* Micro Profiles *@
@* Paging *@
<script type="text/template" id="template_MicroSearch_PageButton">
    <input type="button" class="microSearchPageButton {current}" value="{pageNumber}" onclick="setMicroSearchPage('{microSearchName}', {pageNumber});" />
</script>

@* Generic Micro Profile *@
<script type="text/template" id="template_MicroProfile_MicroProfile">
    <div class="microProfile" data-microprofile="microProfile" data-recordID="{Id}" data-resultID="{resultID}">
        <div class="rawData">{rawData}</div>
        <div class="selectors">{Selectors}</div>
        <div class="title noResultLink">{Name}</div>
        <div class="title hasResultLink"><a href="@Url.Content( "~/detail/" ){profileType}/{Id}" target="microResultWindow">{Name}</a></div>
        <div class="description">{Description}</div>
        <div class="properties">{Properties}</div>
        <div class="microProfileButtons">
            <input type="button" class="actionButton showOnResult" value="Save/Add" onclick="saveMicroProfile('{microSearchName}', {resultID});" />
            <a href="@Url.Content("~/editor/"){profileType}/{Id}" class="linkButton actionButton editMicroProfile" target="microResultWindow">Edit</a>
            <input type="button" class="redButton deleteButton showOnSaved" value="Delete" onclick="deleteMicroProfile('{microSearchName}', {resultID});" />
        </div>
    </div>
</script>

@* Code Item *@
<script type="text/template" id="template_MicroProfile_CodeItem">
    <div class="microProfile" data-microprofile="codeitem" data-recordID="{Id}" data-resultID="{resultID}">
        <div class="rawData">{rawData}</div>
        <div class="selectors">{Selectors}</div>
        <a href="{Url}" target="_blank" class="title">{Name}</a>
        <div class="description">{Description}</div>
        <div class="properties">
            <div data-microproperty="FrameworkCode">Code: {FrameworkCode}</div>
        </div>
        <div class="microProfileButtons">
            <input type="button" class="actionButton showOnResult" value="Save/Add" onclick="saveMicroProfile('{microSearchName}', {resultID});" />
            <input type="button" class="redButton deleteButton showOnSaved" value="Delete" onclick="deleteMicroProfile('{microSearchName}', {resultID});" />
        </div>
    </div>
</script>

@* Region *@
<script type="text/template" id="template_MicroProfile_Region">
    <div class="microProfile" data-microprofile="region" data-latitude="{Latitude}" data-longitude="{Longitude}" data-geonamesID="{GeoNamesId}" data-resultID="{resultID}">
        <div class="rawData">{rawData}</div>
        <div class="selectors">{Selectors}</div>
        <div class="title">{Name}</div>
        <div class="description">{Description}</div>
        <a href="{Url}" target="_blank">View on Map</a>
        <div class="microProfileButtons">
            <input type="button" class="actionButton showOnResult" value="Save/Add" onclick="saveMicroProfile('{microSearchName}', {resultID});" />
            <input type="button" class="redButton deleteButton showOnSaved" value="Delete" onclick="deleteMicroProfile('{microSearchName}', {resultID});" />
        </div>
    </div>
</script>

@* Address *@
<script type="text/template" id="template_MicroProfile_Address">
    <div class="microProfile" data-microprofile="address" data-resultID="{resultID}">
        <div class="rawData">{rawData}</div>
        <div class="selectors">{Selectors}</div>
        <div class="rawProperties">{rawProperties}</div>
        <div class="title">{Name}</div>
        <div class="properties">
            <div data-microProperty="Address1">{Address1}</div>
            <div data-microProperty="Address2">{Address2}</div>
            <div data-microProperty="City_Region_PostalCode">{City}, {Region} {PostalCode}</div>
            <div data-microProperty="Country">{Country}</div>
        </div>
        <div class="microProfileButtons">
            <input type="button" class="actionButton showOnResult" value="Copy" onclick="copyMicroProfile('{microSearchName}', {resultID});" />
        </div>
    </div>
</script>

<div id="waitWrapper">
    <div id="wait"><i id="waitSpinner" class="fa fa-spin fa-spinner"></i><div id="waitTitle">Working...</div></div>
</div>
